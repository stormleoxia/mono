// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;

		bool? interactive_async;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static readonly string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_extern_alias_directives opt_using_directives",
    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "extern_alias_directives : extern_alias_directive",
    "extern_alias_directives : extern_alias_directives extern_alias_directive",
    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
    "extern_alias_directive : EXTERN_ALIAS error",
    "using_directives : using_directive",
    "using_directives : using_directives using_directive",
    "using_directive : using_namespace",
    "using_namespace : USING opt_static namespace_or_type_expr SEMICOLON",
    "using_namespace : USING opt_static IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
    "using_namespace : USING error",
    "opt_static :",
    "opt_static : STATIC",
    "$$2 :",
    "$$3 :",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon_error",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
    "opt_semicolon_error :",
    "opt_semicolon_error : SEMICOLON",
    "opt_semicolon_error : error",
    "namespace_name : IDENTIFIER",
    "namespace_name : namespace_name DOT IDENTIFIER",
    "namespace_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_using_directives :",
    "opt_using_directives : using_directives",
    "opt_extern_alias_directives :",
    "opt_extern_alias_directives : extern_alias_directives",
    "opt_namespace_or_type_declarations :",
    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
    "namespace_or_type_declarations : namespace_or_type_declaration",
    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
    "namespace_or_type_declaration : type_declaration",
    "namespace_or_type_declaration : namespace_declaration",
    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$4 :",
    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
    "$$5 :",
    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : IDENTIFIER error",
    "attribute_section_cont : error",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$6 :",
    "attribute : attribute_name $$6 opt_attribute_arguments",
    "attribute_name : namespace_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "positional_or_named_argument : error",
    "$$7 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
    "named_argument_expr : expression_or_error",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : primary_constructor_body",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : incomplete_member",
    "class_member_declaration : error",
    "$$8 :",
    "primary_constructor_body : OPEN_BRACE $$8 opt_statement_list block_end",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "$$13 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$9 type_declaration_name $$10 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$11 OPEN_BRACE $$12 opt_class_member_declarations CLOSE_BRACE $$13 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$14 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$14 constant_initializer opt_constant_declarators SEMICOLON",
    "constant_declaration : opt_attributes opt_modifiers CONST type error",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$15 :",
    "constant_initializer : ASSIGN $$15 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$16 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$16 opt_field_initializer opt_field_declarators SEMICOLON",
    "$$17 :",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$17 fixed_field_size opt_fixed_field_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
    "opt_field_initializer :",
    "$$18 :",
    "opt_field_initializer : ASSIGN $$18 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$19 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$19 variable_initializer",
    "opt_fixed_field_declarators :",
    "opt_fixed_field_declarators : fixed_field_declarators",
    "fixed_field_declarators : fixed_field_declarator",
    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
    "$$20 :",
    "fixed_field_size : OPEN_BRACKET $$20 expression CLOSE_BRACKET",
    "fixed_field_size : OPEN_BRACKET error",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$21 :",
    "method_declaration : method_header $$21 method_body_expression_block",
    "$$22 :",
    "$$23 :",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$22 opt_formal_parameter_list CLOSE_PARENS $$23 opt_type_parameter_constraints_clauses",
    "$$24 :",
    "$$25 :",
    "$$26 :",
    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$24 method_declaration_name OPEN_PARENS $$25 opt_formal_parameter_list CLOSE_PARENS $$26 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
    "method_body_expression_block : method_body",
    "method_body_expression_block : expression_block",
    "method_body : block",
    "method_body : SEMICOLON",
    "$$27 :",
    "expression_block : ARROW $$27 expression SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : arglist_modifier COMMA error",
    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : arglist_modifier",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$28 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$28 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$29 :",
    "$$30 :",
    "$$31 :",
    "$$32 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$29 OPEN_BRACE $$30 accessor_declarations $$31 CLOSE_BRACE $$32 opt_property_initializer",
    "$$33 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$33 expression_block",
    "opt_property_initializer :",
    "$$34 :",
    "opt_property_initializer : ASSIGN $$34 property_initializer SEMICOLON",
    "property_initializer : expression",
    "property_initializer : array_initializer",
    "$$35 :",
    "$$36 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$35 opt_formal_parameter_list CLOSE_BRACKET $$36 indexer_body",
    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
    "indexer_body : expression_block",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$37 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$37 accessor_body",
    "$$38 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$38 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$39 :",
    "$$40 :",
    "$$41 :",
    "$$42 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$39 type_declaration_name $$40 opt_class_base opt_type_parameter_constraints_clauses $$41 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$42 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$43 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$43 method_body_expression_block",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$44 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$44 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "overloadable_operator : IS",
    "$$45 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$45 opt_formal_parameter_list CLOSE_PARENS",
    "$$46 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$46 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$47 :",
    "$$48 :",
    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$47 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$48 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$49 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$49 opt_argument_list CLOSE_PARENS",
    "$$50 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$50 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "constructor_initializer : error",
    "$$51 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$51 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "$$52 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$52 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$53 :",
    "$$54 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$53 event_accessor_declarations $$54 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type error",
    "opt_event_initializer :",
    "$$55 :",
    "opt_event_initializer : ASSIGN $$55 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$56 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$56 event_variable_initializer",
    "$$57 :",
    "event_variable_initializer : $$57 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$58 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$58 event_accessor_block",
    "$$59 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$59 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
    "$$60 :",
    "$$61 :",
    "$$62 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$60 OPEN_BRACE $$61 opt_enum_member_declarations $$62 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$63 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$63 ASSIGN constant_expression",
    "enum_member_declaration : opt_attributes IDENTIFIER error",
    "enum_member_declaration : attributes_without_members",
    "$$64 :",
    "$$65 :",
    "$$66 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$64 opt_formal_parameter_list CLOSE_PARENS $$65 opt_type_parameter_constraints_clauses $$66 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_expr : member_name",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
    "member_name : simple_name_expr",
    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER generic_dimension",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$67 :",
    "type_declaration_name : IDENTIFIER $$67 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : void_invalid",
    "simple_type : type_expression",
    "simple_type : void_invalid",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_expr opt_nullable",
    "type_expression : namespace_or_type_expr pointer_stars",
    "type_expression : builtin_type_expression",
    "void_invalid : VOID",
    "builtin_type_expression : builtin_types opt_nullable",
    "builtin_type_expression : builtin_types pointer_stars",
    "builtin_type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : DECIMAL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : type_name_expression",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : this_access",
    "primary_expression : base_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : undocumented_expressions",
    "primary_expression : interpolated_string",
    "type_name_expression : simple_name_expr",
    "type_name_expression : IDENTIFIER GENERATE_COMPLETION",
    "type_name_expression : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
    "interpolated_string : INTERPOLATED_STRING_END",
    "interpolations : interpolation",
    "interpolations : interpolations INTERPOLATED_STRING interpolation",
    "interpolation : expression",
    "interpolation : expression COMMA expression",
    "$$68 :",
    "interpolation : expression COLON $$68 LITERAL",
    "$$69 :",
    "interpolation : expression COMMA expression COLON $$69 LITERAL",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
    "member_access : BASE DOT identifier_inside_body opt_type_argument_list",
    "member_access : AWAIT DOT identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : builtin_types DOT GENERATE_COMPLETION",
    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "invocation_expression : primary_expression open_parens_any error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : AWAIT ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACKET_EXPR argument_list CLOSE_BRACKET ASSIGN initializer_value",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : REF declaration_expression",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : OUT declaration_expression",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
    "declaration_expression : variable_type identifier_inside_body",
    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression_or_error",
    "expression_list : expression_list COMMA expression_or_error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$70 :",
    "new_expr_type : $$70 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_expression : NEW OPEN_BRACE GENERATE_COMPLETION",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameters : COMPLETE_COMPLETION",
    "anonymous_type_parameters : anonymous_type_parameter COMPLETE_COMPLETION",
    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
    "anonymous_type_parameter : identifier_inside_body",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : error",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "sizeof_expression : SIZEOF open_parens_any type error",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "checked_expression : CHECKED error",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED error",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$71 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$71 block",
    "$$72 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$72 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$73 :",
    "anonymous_method_signature : OPEN_PARENS $$73 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : AWAIT prefixed_unary_expression",
    "unary_expression : BANG error",
    "unary_expression : TILDE error",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
    "unary_expression : AWAIT error",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "prefixed_unary_expression : PLUS error",
    "prefixed_unary_expression : MINUS error",
    "prefixed_unary_expression : OP_INC error",
    "prefixed_unary_expression : OP_DEC error",
    "prefixed_unary_expression : STAR error",
    "prefixed_unary_expression : BITWISE_AND error",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR error",
    "multiplicative_expression : multiplicative_expression DIV error",
    "multiplicative_expression : multiplicative_expression PERCENT error",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression PLUS error",
    "additive_expression : additive_expression MINUS error",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS pattern_type_expr opt_identifier",
    "additive_expression : additive_expression IS pattern_expr",
    "additive_expression : additive_expression AS error",
    "additive_expression : additive_expression IS error",
    "additive_expression : AWAIT IS type",
    "additive_expression : AWAIT AS type",
    "pattern_type_expr : variable_type",
    "pattern_expr : literal",
    "pattern_expr : PLUS prefixed_unary_expression",
    "pattern_expr : MINUS prefixed_unary_expression",
    "pattern_expr : sizeof_expression",
    "pattern_expr : default_value_expression",
    "pattern_expr : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "pattern_expr : STAR",
    "pattern_expr : pattern_expr_invocation",
    "pattern_expr : pattern_property",
    "pattern_expr_invocation : type_name_expression OPEN_PARENS opt_pattern_list CLOSE_PARENS",
    "pattern_property : type_name_expression OPEN_BRACE pattern_property_list CLOSE_BRACE",
    "pattern_property_list : pattern_property_entry",
    "pattern_property_list : pattern_property_list COMMA pattern_property_entry",
    "pattern_property_entry : identifier_inside_body IS pattern",
    "pattern : pattern_expr",
    "pattern : pattern_type_expr opt_identifier",
    "opt_pattern_list :",
    "opt_pattern_list : pattern_list",
    "pattern_list : pattern_argument",
    "pattern_list : pattern_list COMMA pattern_argument",
    "pattern_argument : pattern",
    "pattern_argument : IDENTIFIER COLON pattern",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT error",
    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "relational_expression : relational_expression OP_LT error",
    "relational_expression : relational_expression OP_GT error",
    "relational_expression : relational_expression OP_LE error",
    "relational_expression : relational_expression OP_GE error",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "equality_expression : equality_expression OP_EQ error",
    "equality_expression : equality_expression OP_NE error",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "and_expression : and_expression BITWISE_AND error",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET error",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND error",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR error",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "lambda_parameter : AWAIT",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$74 :",
    "lambda_expression_body : $$74 expression",
    "lambda_expression_body : block",
    "lambda_expression_body : error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$75 :",
    "lambda_expression : IDENTIFIER ARROW $$75 lambda_expression_body",
    "$$76 :",
    "lambda_expression : AWAIT ARROW $$76 lambda_expression_body",
    "$$77 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$77 lambda_expression_body",
    "$$78 :",
    "$$79 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$78 opt_lambda_parameter_list CLOSE_PARENS ARROW $$79 lambda_expression_body",
    "$$80 :",
    "$$81 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$80 opt_lambda_parameter_list CLOSE_PARENS ARROW $$81 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "non_assignment_expression : ARGLIST",
    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
    "constant_expression : expression",
    "boolean_expression : expression",
    "opt_primary_parameters :",
    "opt_primary_parameters : primary_parameters",
    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "opt_primary_parameters_with_class_base :",
    "opt_primary_parameters_with_class_base : class_base",
    "opt_primary_parameters_with_class_base : primary_parameters",
    "opt_primary_parameters_with_class_base : primary_parameters class_base",
    "$$82 :",
    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$82 opt_argument_list CLOSE_PARENS",
    "$$83 :",
    "$$84 :",
    "$$85 :",
    "$$86 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$83 type_declaration_name $$84 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$85 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$86 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "modifier : ASYNC",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "class_base : COLON type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "opt_type_parameter_variance :",
    "opt_type_parameter_variance : type_parameter_variance",
    "type_parameter_variance : OUT",
    "type_parameter_variance : IN",
    "$$87 :",
    "block : OPEN_BRACE $$87 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$88 :",
    "block_prepared : OPEN_BRACE $$88 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$89 :",
    "labeled_statement : identifier_inside_body COLON $$89 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : type_name_expression opt_nullable",
    "variable_type_simple : type_name_expression pointer_stars",
    "variable_type_simple : builtin_type_expression",
    "variable_type_simple : void_invalid",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "identifier_inside_body : AWAIT",
    "$$90 :",
    "block_variable_declaration : variable_type identifier_inside_body $$90 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
    "$$91 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$91 const_variable_initializer opt_const_declarators SEMICOLON",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$92 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$92 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "switch_section : switch_labels statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$93 :",
    "for_statement : FOR open_parens_any $$93 for_statement_cont",
    "$$94 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$94 for_condition_and_iterator_part embedded_statement",
    "for_statement_cont : error",
    "$$95 :",
    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$95 for_iterator_part",
    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
    "close_parens_close_brace : CLOSE_PARENS",
    "close_parens_close_brace : CLOSE_BRACE",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$96 :",
    "for_initializer : variable_type identifier_inside_body $$96 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type error",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "$$97 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$97 embedded_statement",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "continue_statement : CONTINUE error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN expression error",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW expression error",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN expression error",
    "yield_statement : identifier_inside_body BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "catch_clause : CATCH opt_catch_filter block",
    "$$98 :",
    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$98 opt_catch_filter_or_error",
    "catch_clause : CATCH open_parens_any error",
    "opt_catch_filter_or_error : opt_catch_filter block_prepared",
    "opt_catch_filter_or_error : error",
    "opt_catch_filter :",
    "$$99 :",
    "opt_catch_filter : WHEN $$99 open_parens_any expression CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$100 :",
    "unsafe_statement : UNSAFE $$100 block",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "lock_statement : LOCK open_parens_any expression error",
    "$$101 :",
    "$$102 :",
    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$101 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$102 embedded_statement",
    "$$103 :",
    "$$104 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$103 using_initialization CLOSE_PARENS $$104 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_or_fixed_variable_initializer :",
    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
    "nested_from_clause : FROM identifier_inside_body IN expression",
    "nested_from_clause : FROM type identifier_inside_body IN expression",
    "$$105 :",
    "from_clause : FROM identifier_inside_body IN $$105 expression_or_error",
    "$$106 :",
    "from_clause : FROM type identifier_inside_body IN $$106 expression_or_error",
    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : select_or_group_clause opt_query_continuation",
    "query_body : query_body_clauses COMPLETE_COMPLETION",
    "query_body : query_body_clauses error",
    "query_body : error",
    "$$107 :",
    "select_or_group_clause : SELECT $$107 expression_or_error",
    "$$108 :",
    "$$109 :",
    "select_or_group_clause : GROUP $$108 expression_or_error $$109 by_expression",
    "by_expression : BY expression_or_error",
    "by_expression : error",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$110 :",
    "let_clause : LET identifier_inside_body ASSIGN $$110 expression_or_error",
    "$$111 :",
    "where_clause : WHERE $$111 expression_or_error",
    "$$112 :",
    "$$113 :",
    "$$114 :",
    "join_clause : JOIN identifier_inside_body IN $$112 expression_or_error ON $$113 expression_or_error EQUALS $$114 expression_or_error opt_join_into",
    "$$115 :",
    "$$116 :",
    "$$117 :",
    "join_clause : JOIN type identifier_inside_body IN $$115 expression_or_error ON $$116 expression_or_error EQUALS $$117 expression_or_error opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO identifier_inside_body",
    "$$118 :",
    "orderby_clause : ORDERBY $$118 orderings",
    "orderings : order_by",
    "$$119 :",
    "orderings : order_by COMMA $$119 orderings_then_by",
    "orderings_then_by : then_by",
    "$$120 :",
    "orderings_then_by : orderings_then_by COMMA $$120 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$121 :",
    "opt_query_continuation : INTO identifier_inside_body $$121 query_body",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
    "$$122 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$122 interactive_statement_list opt_COMPLETE_COMPLETION",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : VOID opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT THIS",
    "$$123 :",
    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$123 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$124 :",
    "opt_doc_method_sig : OPEN_PARENS $$124 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT",
    "INTERR_OPERATOR","WHEN","INTERPOLATED_STRING",
    "INTERPOLATED_STRING_END","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 384 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 385 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 404 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 449 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 29:
  case_29();
  break;
case 30:
  case_30();
  break;
case 31:
  case_31();
  break;
case 32:
  case_32();
  break;
case 45:
  case_45();
  break;
case 46:
#line 652 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 47:
  case_47();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
  case_58();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 62:
  case_62();
  break;
case 63:
  case_63();
  break;
case 64:
  case_64();
  break;
case 65:
#line 778 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = "event"; }
  break;
case 66:
#line 779 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = "return"; }
  break;
case 67:
#line 786 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 68:
  case_68();
  break;
case 69:
#line 803 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 70:
  case_70();
  break;
case 72:
#line 822 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 73:
#line 826 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 74:
#line 831 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
  case_78();
  break;
case 79:
#line 873 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 81:
  case_81();
  break;
case 82:
#line 886 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 83:
  case_83();
  break;
case 84:
  case_84();
  break;
case 86:
#line 917 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 87:
#line 921 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 88:
#line 925 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 91:
  case_91();
  break;
case 92:
  case_92();
  break;
case 106:
  case_106();
  break;
case 107:
  case_107();
  break;
case 108:
  case_108();
  break;
case 109:
#line 1002 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  }
  break;
case 110:
  case_110();
  break;
case 111:
  case_111();
  break;
case 112:
  case_112();
  break;
case 113:
  case_113();
  break;
case 114:
  case_114();
  break;
case 115:
#line 1052 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 121:
#line 1101 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 122:
#line 1105 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 123:
  case_123();
  break;
case 124:
#line 1121 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 125:
  case_125();
  break;
case 126:
  case_126();
  break;
case 129:
  case_129();
  break;
case 130:
  case_130();
  break;
case 131:
  case_131();
  break;
case 132:
  case_132();
  break;
case 133:
#line 1199 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 135:
  case_135();
  break;
case 136:
  case_136();
  break;
case 139:
#line 1229 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 140:
#line 1233 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 141:
  case_141();
  break;
case 142:
#line 1246 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 143:
  case_143();
  break;
case 146:
#line 1265 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 147:
#line 1269 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 148:
  case_148();
  break;
case 149:
#line 1285 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 150:
  case_150();
  break;
case 151:
  case_151();
  break;
case 154:
  case_154();
  break;
case 155:
  case_155();
  break;
case 156:
  case_156();
  break;
case 157:
#line 1352 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 158:
  case_158();
  break;
case 159:
  case_159();
  break;
case 160:
#line 1392 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 161:
  case_161();
  break;
case 162:
#line 1402 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 163:
  case_163();
  break;
case 164:
  case_164();
  break;
case 165:
  case_165();
  break;
case 169:
#line 1480 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
#line 1504 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 174:
  case_174();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
#line 1562 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 182:
#line 1566 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
#line 1644 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 191:
  case_191();
  break;
case 192:
#line 1685 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 194:
#line 1693 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 195:
  case_195();
  break;
case 196:
  case_196();
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 204:
#line 1783 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
#line 1833 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_property = null;
	  }
  break;
case 211:
  case_211();
  break;
case 212:
  case_212();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 218:
#line 1895 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
#line 1941 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 222:
  case_222();
  break;
case 227:
  case_227();
  break;
case 228:
  case_228();
  break;
case 229:
  case_229();
  break;
case 230:
  case_230();
  break;
case 231:
  case_231();
  break;
case 233:
  case_233();
  break;
case 234:
  case_234();
  break;
case 235:
#line 2078 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  }
  break;
case 236:
  case_236();
  break;
case 237:
  case_237();
  break;
case 238:
  case_238();
  break;
case 239:
  case_239();
  break;
case 240:
#line 2118 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 243:
  case_243();
  break;
case 244:
  case_244();
  break;
case 245:
#line 2143 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 246:
#line 2147 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 251:
#line 2155 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 252:
#line 2159 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 253:
#line 2163 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 254:
#line 2169 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  }
  break;
case 255:
  case_255();
  break;
case 257:
  case_257();
  break;
case 258:
  case_258();
  break;
case 259:
  case_259();
  break;
case 261:
#line 2260 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 262:
#line 2261 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 263:
#line 2262 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 264:
#line 2263 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 265:
#line 2264 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 266:
#line 2265 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 267:
#line 2267 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 268:
#line 2268 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 269:
#line 2270 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 270:
#line 2271 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 271:
#line 2272 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 272:
#line 2273 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 273:
#line 2274 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 274:
#line 2275 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 275:
#line 2276 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 276:
#line 2277 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 277:
#line 2278 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 278:
#line 2279 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 279:
#line 2280 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 280:
#line 2281 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 281:
#line 2282 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 282:
#line 2283 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 283:
  case_283();
  break;
case 284:
#line 2297 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 285:
  case_285();
  break;
case 286:
#line 2320 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 287:
  case_287();
  break;
case 288:
  case_288();
  break;
case 289:
  case_289();
  break;
case 290:
  case_290();
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
  case_293();
  break;
case 295:
#line 2444 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 298:
#line 2456 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 299:
  case_299();
  break;
case 300:
#line 2466 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 306:
  case_306();
  break;
case 307:
  case_307();
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
  case_311();
  break;
case 313:
#line 2589 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 314:
  case_314();
  break;
case 317:
#line 2606 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 318:
#line 2610 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 319:
  case_319();
  break;
case 320:
#line 2623 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
#line 2648 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 328:
  case_328();
  break;
case 329:
  case_329();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 340:
  case_340();
  break;
case 342:
#line 2811 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 343:
  case_343();
  break;
case 346:
#line 2825 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 352:
  case_352();
  break;
case 354:
#line 2899 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 355:
  case_355();
  break;
case 356:
#line 2918 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 357:
  case_357();
  break;
case 359:
  case_359();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 366:
  case_366();
  break;
case 367:
  case_367();
  break;
case 369:
  case_369();
  break;
case 370:
  case_370();
  break;
case 371:
  case_371();
  break;
case 372:
  case_372();
  break;
case 373:
#line 3037 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 374:
  case_374();
  break;
case 375:
  case_375();
  break;
case 377:
  case_377();
  break;
case 378:
  case_378();
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 381:
  case_381();
  break;
case 382:
  case_382();
  break;
case 384:
  case_384();
  break;
case 385:
  case_385();
  break;
case 386:
  case_386();
  break;
case 387:
  case_387();
  break;
case 388:
  case_388();
  break;
case 390:
#line 3155 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 391:
#line 3162 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 397:
  case_397();
  break;
case 399:
#line 3192 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 400:
  case_400();
  break;
case 401:
#line 3211 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 403:
  case_403();
  break;
case 404:
  case_404();
  break;
case 405:
#line 3232 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 406:
#line 3236 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 407:
  case_407();
  break;
case 408:
  case_408();
  break;
case 409:
  case_409();
  break;
case 410:
#line 3269 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 411:
#line 3270 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
#line 3271 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 413:
#line 3272 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 414:
#line 3273 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3274 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 417:
#line 3279 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 418:
#line 3280 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 419:
#line 3281 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 420:
#line 3282 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 421:
#line 3283 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 422:
#line 3284 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 423:
#line 3285 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 424:
#line 3286 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 425:
#line 3287 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 448:
  case_448();
  break;
case 452:
#line 3331 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 453:
#line 3335 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 454:
#line 3336 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 455:
#line 3343 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[-2+yyTop], (List<Expression>) yyVals[-1+yyTop], (StringLiteral) yyVals[0+yyTop]);
	  }
  break;
case 456:
#line 3347 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[0+yyTop], null, null);
	  }
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
#line 3370 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 460:
  case_460();
  break;
case 461:
#line 3380 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 462:
  case_462();
  break;
case 463:
#line 3392 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 464:
  case_464();
  break;
case 469:
  case_469();
  break;
case 470:
#line 3434 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 479:
#line 3495 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 480:
  case_480();
  break;
case 481:
#line 3503 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
#line 3533 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 488:
  case_488();
  break;
case 489:
  case_489();
  break;
case 490:
#line 3555 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 491:
#line 3559 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 492:
  case_492();
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
#line 3597 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 504:
#line 3636 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
#line 3688 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 515:
  case_515();
  break;
case 516:
#line 3706 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
	  }
  break;
case 517:
  case_517();
  break;
case 518:
#line 3715 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
#line 3840 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 535:
#line 3848 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
#line 3868 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 539:
#line 3875 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 544:
  case_544();
  break;
case 545:
  case_545();
  break;
case 546:
  case_546();
  break;
case 547:
#line 3942 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 550:
#line 3964 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 553:
#line 3973 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 555:
  case_555();
  break;
case 556:
  case_556();
  break;
case 557:
#line 3993 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 558:
#line 3997 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 559:
  case_559();
  break;
case 560:
  case_560();
  break;
case 561:
  case_561();
  break;
case 562:
  case_562();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 568:
  case_568();
  break;
case 569:
#line 4057 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 570:
#line 4061 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 571:
#line 4068 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 572:
#line 4072 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 577:
  case_577();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 585:
  case_585();
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
  case_588();
  break;
case 589:
#line 4204 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 590:
#line 4208 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 591:
#line 4212 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 592:
#line 4216 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 593:
#line 4223 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 595:
#line 4231 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 599:
#line 4255 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 600:
#line 4259 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 608:
#line 4323 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 609:
#line 4327 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 610:
#line 4331 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 611:
#line 4335 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 612:
#line 4339 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 613:
#line 4343 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 614:
  case_614();
  break;
case 615:
  case_615();
  break;
case 616:
  case_616();
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 621:
  case_621();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 628:
  case_628();
  break;
case 629:
  case_629();
  break;
case 630:
  case_630();
  break;
case 631:
  case_631();
  break;
case 632:
#line 4451 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 641:
#line 4507 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 642:
#line 4511 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 645:
  case_645();
  break;
case 646:
#line 4522 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new WildcardPattern (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 649:
#line 4531 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new RecursivePattern ((ATypeNameExpression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 650:
#line 4538 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new PropertyPattern ((ATypeNameExpression) yyVals[-3+yyTop], (List<PropertyPatternMember>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 655:
  case_655();
  break;
case 656:
#line 4580 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Arguments (0);
	  }
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
#line 4606 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 661:
  case_661();
  break;
case 663:
  case_663();
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
  case_675();
  break;
case 677:
  case_677();
  break;
case 678:
  case_678();
  break;
case 679:
  case_679();
  break;
case 680:
  case_680();
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 685:
  case_685();
  break;
case 686:
  case_686();
  break;
case 688:
  case_688();
  break;
case 689:
  case_689();
  break;
case 691:
  case_691();
  break;
case 692:
  case_692();
  break;
case 694:
  case_694();
  break;
case 695:
  case_695();
  break;
case 697:
  case_697();
  break;
case 699:
  case_699();
  break;
case 700:
  case_700();
  break;
case 701:
  case_701();
  break;
case 702:
  case_702();
  break;
case 703:
  case_703();
  break;
case 704:
  case_704();
  break;
case 705:
  case_705();
  break;
case 706:
  case_706();
  break;
case 707:
  case_707();
  break;
case 708:
  case_708();
  break;
case 709:
  case_709();
  break;
case 710:
  case_710();
  break;
case 711:
  case_711();
  break;
case 712:
  case_712();
  break;
case 713:
  case_713();
  break;
case 714:
  case_714();
  break;
case 715:
  case_715();
  break;
case 716:
  case_716();
  break;
case 717:
  case_717();
  break;
case 718:
  case_718();
  break;
case 719:
  case_719();
  break;
case 720:
#line 4949 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 721:
  case_721();
  break;
case 722:
#line 4959 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 723:
  case_723();
  break;
case 725:
  case_725();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
  case_730();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 733:
  case_733();
  break;
case 734:
#line 5026 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
#line 5040 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 738:
  case_738();
  break;
case 739:
  case_739();
  break;
case 745:
#line 5065 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 746:
  case_746();
  break;
case 747:
  case_747();
  break;
case 748:
  case_748();
  break;
case 750:
#line 5094 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 751:
#line 5101 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 753:
  case_753();
  break;
case 754:
#line 5122 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 755:
#line 5126 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 756:
#line 5130 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 757:
#line 5134 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 758:
  case_758();
  break;
case 759:
  case_759();
  break;
case 760:
#line 5159 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  }
  break;
case 761:
  case_761();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
  case_764();
  break;
case 765:
#line 5211 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 766:
#line 5213 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 767:
  case_767();
  break;
case 768:
#line 5226 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 770:
  case_770();
  break;
case 771:
  case_771();
  break;
case 772:
  case_772();
  break;
case 773:
  case_773();
  break;
case 774:
  case_774();
  break;
case 775:
  case_775();
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
  case_781();
  break;
case 782:
  case_782();
  break;
case 783:
  case_783();
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 788:
#line 5341 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 789:
  case_789();
  break;
case 791:
#line 5355 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 792:
  case_792();
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 798:
  case_798();
  break;
case 799:
  case_799();
  break;
case 800:
#line 5447 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 801:
#line 5451 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 802:
#line 5458 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 803:
  case_803();
  break;
case 804:
#line 5472 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Covariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 805:
#line 5476 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Contravariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 806:
  case_806();
  break;
case 807:
#line 5501 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 808:
  case_808();
  break;
case 809:
  case_809();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 816:
#line 5545 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 817:
#line 5549 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 819:
  case_819();
  break;
case 822:
#line 5573 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 823:
#line 5577 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 852:
  case_852();
  break;
case 853:
  case_853();
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 865:
  case_865();
  break;
case 866:
#line 5718 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 868:
#line 5726 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	yyVal = Error_AwaitAsIdentifier (yyVals[0+yyTop]);
	  }
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 874:
  case_874();
  break;
case 875:
  case_875();
  break;
case 879:
  case_879();
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 884:
#line 5826 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 885:
#line 5830 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 890:
  case_890();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 895:
#line 5875 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 896:
  case_896();
  break;
case 897:
#line 5885 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 898:
#line 5886 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 904:
  case_904();
  break;
case 905:
  case_905();
  break;
case 906:
  case_906();
  break;
case 907:
#line 5958 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 908:
  case_908();
  break;
case 909:
  case_909();
  break;
case 910:
#line 5978 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 914:
#line 5988 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 916:
  case_916();
  break;
case 917:
#line 6005 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 920:
#line 6034 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 925:
  case_925();
  break;
case 926:
  case_926();
  break;
case 927:
  case_927();
  break;
case 928:
  case_928();
  break;
case 929:
  case_929();
  break;
case 930:
  case_930();
  break;
case 931:
#line 6094 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 932:
  case_932();
  break;
case 933:
  case_933();
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 936:
#line 6135 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 937:
  case_937();
  break;
case 938:
  case_938();
  break;
case 939:
  case_939();
  break;
case 941:
#line 6163 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { lexer.putback ('}'); }
  break;
case 942:
#line 6167 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 947:
#line 6191 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 949:
#line 6196 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 953:
  case_953();
  break;
case 954:
  case_954();
  break;
case 955:
  case_955();
  break;
case 956:
  case_956();
  break;
case 957:
  case_957();
  break;
case 964:
  case_964();
  break;
case 965:
  case_965();
  break;
case 966:
  case_966();
  break;
case 967:
  case_967();
  break;
case 968:
  case_968();
  break;
case 969:
  case_969();
  break;
case 970:
  case_970();
  break;
case 971:
  case_971();
  break;
case 972:
  case_972();
  break;
case 973:
  case_973();
  break;
case 974:
  case_974();
  break;
case 975:
  case_975();
  break;
case 976:
  case_976();
  break;
case 977:
  case_977();
  break;
case 978:
  case_978();
  break;
case 981:
#line 6420 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 982:
  case_982();
  break;
case 983:
  case_983();
  break;
case 984:
  case_984();
  break;
case 985:
  case_985();
  break;
case 986:
  case_986();
  break;
case 989:
  case_989();
  break;
case 990:
  case_990();
  break;
case 991:
  case_991();
  break;
case 992:
  case_992();
  break;
case 993:
#line 6511 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 994:
  case_994();
  break;
case 995:
#line 6523 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 996:
#line 6527 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 997:
  case_997();
  break;
case 998:
#line 6542 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 999:
#line 6549 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1000:
  case_1000();
  break;
case 1001:
#line 6559 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1002:
  case_1002();
  break;
case 1003:
  case_1003();
  break;
case 1004:
  case_1004();
  break;
case 1005:
  case_1005();
  break;
case 1006:
  case_1006();
  break;
case 1007:
  case_1007();
  break;
case 1008:
  case_1008();
  break;
case 1009:
  case_1009();
  break;
case 1010:
  case_1010();
  break;
case 1011:
  case_1011();
  break;
case 1013:
  case_1013();
  break;
case 1014:
#line 6663 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 1015:
  case_1015();
  break;
case 1016:
  case_1016();
  break;
case 1017:
  case_1017();
  break;
case 1018:
  case_1018();
  break;
case 1019:
  case_1019();
  break;
case 1020:
  case_1020();
  break;
case 1021:
  case_1021();
  break;
case 1022:
  case_1022();
  break;
case 1023:
  case_1023();
  break;
case 1024:
#line 6767 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1025:
  case_1025();
  break;
case 1026:
#line 6783 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1027:
  case_1027();
  break;
case 1028:
  case_1028();
  break;
case 1029:
  case_1029();
  break;
case 1031:
  case_1031();
  break;
case 1032:
  case_1032();
  break;
case 1033:
#line 6847 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1034:
  case_1034();
  break;
case 1035:
  case_1035();
  break;
case 1036:
  case_1036();
  break;
case 1037:
  case_1037();
  break;
case 1038:
#line 6886 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	yyVal = new object[] { yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]) };
	  }
  break;
case 1039:
  case_1039();
  break;
case 1041:
  case_1041();
  break;
case 1047:
#line 6915 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1048:
  case_1048();
  break;
case 1049:
#line 6934 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1050:
  case_1050();
  break;
case 1051:
  case_1051();
  break;
case 1052:
  case_1052();
  break;
case 1053:
  case_1053();
  break;
case 1054:
  case_1054();
  break;
case 1055:
  case_1055();
  break;
case 1056:
  case_1056();
  break;
case 1057:
  case_1057();
  break;
case 1058:
  case_1058();
  break;
case 1060:
#line 7079 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1061:
#line 7086 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1062:
  case_1062();
  break;
case 1064:
  case_1064();
  break;
case 1065:
  case_1065();
  break;
case 1067:
  case_1067();
  break;
case 1068:
  case_1068();
  break;
case 1069:
#line 7132 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1070:
  case_1070();
  break;
case 1071:
  case_1071();
  break;
case 1072:
#line 7149 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1073:
  case_1073();
  break;
case 1074:
  case_1074();
  break;
case 1076:
  case_1076();
  break;
case 1077:
  case_1077();
  break;
case 1080:
  case_1080();
  break;
case 1081:
  case_1081();
  break;
case 1089:
#line 7274 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1090:
#line 7281 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1091:
  case_1091();
  break;
case 1092:
  case_1092();
  break;
case 1093:
  case_1093();
  break;
case 1094:
#line 7304 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1095:
#line 7308 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1096:
  case_1096();
  break;
case 1097:
  case_1097();
  break;
case 1098:
  case_1098();
  break;
case 1099:
  case_1099();
  break;
case 1101:
#line 7344 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1103:
#line 7352 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1104:
#line 7356 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1105:
#line 7363 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1107:
  case_1107();
  break;
case 1108:
  case_1108();
  break;
case 1109:
  case_1109();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 392 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
#line 406 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 426 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 459 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 467 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		UsingClause uc;
		if (yyVals[-2+yyTop] != null) {
			if (lang_version <= LanguageVersion.V_5)
				FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "using static");

			uc = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			uc = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[0+yyTop]));
		}

		current_namespace.AddUsing (uc);
	  }

void case_19()
#line 483 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		if (yyVals[-4+yyTop] != null) {
			report.Error (8085, GetLocation (yyVals[-4+yyTop]), "A `using static' directive cannot be used to declare an alias");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 500 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_23()
#line 518 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }

void case_24()
#line 546 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_25()
#line 551 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_26()
#line 560 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

		var name = (MemberName) yyVals[0+yyTop];		
		var ns = new NamespaceContainer (name, current_namespace);
		lbag.AddLocation (ns, GetLocation (yyVals[-1+yyTop]));
		current_namespace.AddTypeContainer (ns);
	  }

void case_29()
#line 574 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_30()
#line 582 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_31()
#line 587 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_32()
#line 593 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_45()
#line 631 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_47()
#line 653 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_55()
#line 686 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }

void case_56()
#line 691 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_57()
#line 704 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	PushLocation (GetLocation (yyVals[0+yyTop]));
		lexer.parsing_attribute_section = true;
	  }

void case_58()
#line 709 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_59()
#line 717 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_60()
#line 724 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }

void case_61()
#line 742 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation(yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation(yyVals[0+yyTop]));
		}
	  }

void case_62()
#line 753 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<Attribute> () {
			new Attribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }

void case_63()
#line 764 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }

void case_64()
#line 774 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	  }

void case_68()
#line 788 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		if (attrs != null) {
			attrs.Add ((Attribute) yyVals[0+yyTop]);
	  		lbag.AppendTo (attrs, GetLocation (yyVals[-1+yyTop]));
	  	}

		yyVal = attrs;
	  }

void case_70()
#line 805 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_75()
#line 833 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_76()
#line 839 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_77()
#line 845 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_78()
#line 859 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_81()
#line 876 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_83()
#line 888 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_84()
#line 898 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_91()
#line 935 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_92()
#line 940 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_106()
#line 961 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_107()
#line 971 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_local_parameters = current_type.PrimaryConstructorParameters;
		if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
			current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_108()
#line 982 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_local_parameters = null;
		var t = current_type as ClassOrStruct;
		if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
				t.PrimaryConstructorBlock = b;
			}
		}
	  }

void case_110()
#line 1004 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_111()
#line 1012 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }

void case_112()
#line 1030 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_113()
#line 1035 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_114()
#line 1041 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_116()
#line 1059 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_117()
#line 1072 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_118()
#line 1085 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_123()
#line 1110 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_125()
#line 1123 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_126()
#line 1128 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_129()
#line 1143 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_130()
#line 1158 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_131()
#line 1171 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_132()
#line 1182 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_135()
#line 1205 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_136()
#line 1211 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_141()
#line 1238 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_143()
#line 1248 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_148()
#line 1274 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_150()
#line 1287 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_151()
#line 1293 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_154()
#line 1303 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_155()
#line 1312 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }

void case_156()
#line 1319 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_158()
#line 1354 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-6+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = method;

		lexer.ConstraintsParsing = true;
	  }

void case_159()
#line 1376 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null) {
			var method = (Method) yyVals[-1+yyTop];
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_161()
#line 1395 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_163()
#line 1404 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_164()
#line 1435 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_165()
#line 1456 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_170()
#line 1485 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6) {
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "expression bodied members");
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	 }

void case_171()
#line 1494 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
	 }

void case_174()
#line 1510 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_175()
#line 1515 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_176()
#line 1522 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_177()
#line 1528 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_178()
#line 1535 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_179()
#line 1545 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_180()
#line 1551 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_183()
#line 1568 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_184()
#line 1576 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_185()
#line 1585 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_186()
#line 1609 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_187()
#line 1617 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }

void case_188()
#line 1623 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_189()
#line 1632 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }

void case_191()
#line 1646 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_195()
#line 1695 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_196()
#line 1719 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_197()
#line 1726 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_198()
#line 1733 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_199()
#line 1746 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_200()
#line 1751 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_201()
#line 1758 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Attributes) yyVals[-3+yyTop], Location.Null);
	  }

void case_202()
#line 1767 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_203()
#line 1772 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_205()
#line 1788 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_206()
#line 1799 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_207()
#line 1805 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_208()
#line 1819 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_209()
#line 1826 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		lexer.parsing_modifiers = true;
	  }

void case_211()
#line 1838 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_212()
#line 1845 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);

		property.Get = new Property.GetMethod (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, property.Get.Block.StartLocation,
				"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		current_type.AddMember (property);

		current_local_parameters = null;
	  }

void case_214()
#line 1870 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_215()
#line 1876 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		((Property)current_property).Initializer = (Expression) yyVals[-1+yyTop];
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;
	  }

void case_219()
#line 1897 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }

void case_220()
#line 1923 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		current_property = null;		
	  }

void case_222()
#line 1943 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_property.Get = new Indexer.GetIndexerMethod (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];
	  }

void case_227()
#line 1955 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_228()
#line 1969 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_229()
#line 1991 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_230()
#line 2012 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_231()
#line 2039 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_233()
#line 2061 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_234()
#line 2066 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_236()
#line 2080 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = true;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_237()
#line 2087 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_238()
#line 2101 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_239()
#line 2107 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_243()
#line 2128 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_244()
#line 2133 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }

void case_255()
#line 2171 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_257()
#line 2200 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_258()
#line 2208 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = ParameterModifierType.DefaultValue;
		if ((Operator.OpType) yyVals[-1+yyTop] == Operator.OpType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }

void case_259()
#line 2214 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else if (op == Operator.OpType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
			if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_283()
#line 2285 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "is user operator");

		yyVal = Operator.OpType.Is;
	  }

void case_285()
#line 2299 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_287()
#line 2322 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_288()
#line 2341 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_289()
#line 2347 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_290()
#line 2357 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_291()
#line 2374 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_292()
#line 2383 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if (!current_local_parameters.IsEmpty) {
				report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type.Kind == MemberKind.Struct && current_local_parameters.IsEmpty) {
				if (lang_version < LanguageVersion.V_6)
					FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "struct parameterless instance constructor");

				if ((mods & Modifiers.PUBLIC) == 0) {
					report.Error (8075, c.Location, "`{0}': Structs parameterless instance constructor must be public", c.GetSignatureForError ());
				}
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_293()
#line 2426 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_299()
#line 2458 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_301()
#line 2468 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_302()
#line 2474 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_303()
#line 2480 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_304()
#line 2488 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_305()
#line 2497 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_306()
#line 2522 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_307()
#line 2536 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_308()
#line 2549 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_309()
#line 2557 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_310()
#line 2564 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_311()
#line 2577 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_314()
#line 2591 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_319()
#line 2615 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_321()
#line 2625 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_322()
#line 2634 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_326()
#line 2655 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_327()
#line 2660 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_328()
#line 2665 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_329()
#line 2673 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_330()
#line 2685 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_331()
#line 2701 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_332()
#line 2713 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_333()
#line 2729 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_335()
#line 2738 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_336()
#line 2749 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
 
		lexer.putback ('}');

	  	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_337()
#line 2767 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_338()
#line 2772 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_339()
#line 2784 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_340()
#line 2792 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_343()
#line 2813 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_348()
#line 2831 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_349()
#line 2839 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_350()
#line 2852 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_351()
#line 2860 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_352()
#line 2874 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_355()
#line 2901 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_357()
#line 2920 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_359()
#line 2939 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_361()
#line 2950 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_362()
#line 2958 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_364()
#line 2970 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_365()
#line 2976 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_366()
#line 2985 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_367()
#line 2990 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_369()
#line 3002 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_370()
#line 3009 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_371()
#line 3017 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_372()
#line 3023 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_374()
#line 3039 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_375()
#line 3048 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_377()
#line 3059 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_378()
#line 3068 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_379()
#line 3073 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_380()
#line 3081 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_381()
#line 3087 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_382()
#line 3095 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_384()
#line 3105 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_385()
#line 3116 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_386()
#line 3122 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_387()
#line 3132 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (VarianceDecl) yyVals[-1+yyTop]);
  	  }

void case_388()
#line 3137 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, null);
  	  }

void case_397()
#line 3181 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_400()
#line 3197 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_403()
#line 3217 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_404()
#line 3225 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_407()
#line 3241 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_408()
#line 3247 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_409()
#line 3256 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_448()
#line 3321 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_457()
#line 3352 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = new List<Expression> ();
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_458()
#line 3358 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((StringLiteral) yyVals[-1+yyTop]);
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_460()
#line 3372 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-2+yyTop]) {
			Alignment = (Expression)yyVals[0+yyTop]
		};
	  }

void case_462()
#line 3382 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-3+yyTop]) {
			Format = (string)yyVals[0+yyTop]
		};
	  }

void case_464()
#line 3394 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-5+yyTop]) {
			Alignment = (Expression)yyVals[-3+yyTop],
			Format = (string) yyVals[0+yyTop]
		};
	  }

void case_469()
#line 3427 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_471()
#line 3439 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_472()
#line 3445 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_473()
#line 3451 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_474()
#line 3460 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_475()
#line 3466 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_476()
#line 3472 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SimpleName ("await", ((LocatedToken) yyVals[-3+yyTop]).Location), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_477()
#line 3478 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_478()
#line 3486 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_480()
#line 3496 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_482()
#line 3504 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_483()
#line 3512 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_484()
#line 3517 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_485()
#line 3524 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_488()
#line 3539 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}
 		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_489()
#line 3548 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_492()
#line 3564 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_493()
#line 3570 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_494()
#line 3575 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_495()
#line 3583 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_496()
#line 3589 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_498()
#line 3598 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_499()
#line 3606 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));

		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_500()
#line 3615 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "dictionary initializer");

		yyVal = new DictionaryElementInitializer ((Arguments)yyVals[-3+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_501()
#line 3623 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_506()
#line 3642 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_507()
#line 3648 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_508()
#line 3657 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_509()
#line 3671 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_510()
#line 3678 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_515()
#line 3699 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_517()
#line 3708 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_519()
#line 3717 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_520()
#line 3722 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_521()
#line 3730 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_522()
#line 3747 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }

void case_523()
#line 3757 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[-2+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
			Initializer = (Expression) yyVals[0+yyTop]
		};
	  }

void case_525()
#line 3776 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_526()
#line 3781 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};

		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_527()
#line 3792 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_528()
#line 3797 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_529()
#line 3805 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_530()
#line 3811 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_531()
#line 3820 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_532()
#line 3826 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_536()
#line 3853 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_537()
#line 3858 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_540()
#line 3880 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_541()
#line 3893 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_542()
#line 3905 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_543()
#line 3913 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_544()
#line 3920 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_545()
#line 3927 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_546()
#line 3932 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_548()
#line 3944 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_549()
#line 3952 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_555()
#line 3979 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_556()
#line 3985 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_559()
#line 4002 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_560()
#line 4008 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_561()
#line 4014 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_562()
#line 4019 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_566()
#line 4034 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_567()
#line 4042 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_568()
#line 4047 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_573()
#line 4077 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_574()
#line 4084 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_575()
#line 4098 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_576()
#line 4104 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_577()
#line 4113 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_579()
#line 4122 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_580()
#line 4130 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_581()
#line 4140 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_582()
#line 4151 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_583()
#line 4156 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_584()
#line 4166 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_585()
#line 4171 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 4180 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_587()
#line 4185 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 4194 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_596()
#line 4233 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_597()
#line 4241 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_601()
#line 4261 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 4266 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method != null) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else if (interactive_async != null) {
				current_block.Explicit.RegisterAsyncAwait ();
				interactive_async = true;
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4288 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 4294 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 4300 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 4307 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_614()
#line 4345 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_615()
#line 4351 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_616()
#line 4357 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_617()
#line 4363 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_618()
#line 4369 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Indirection (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_619()
#line 4375 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_621()
#line 4385 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_622()
#line 4390 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_623()
#line 4395 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_624()
#line 4400 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_625()
#line 4407 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_626()
#line 4414 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_628()
#line 4425 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_629()
#line 4430 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_630()
#line 4435 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_631()
#line 4442 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_633()
#line 4453 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] != null) {
			if (lang_version != LanguageVersion.Experimental)
				FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "type pattern matching");

			var lt = (LocatedToken) yyVals[0+yyTop];
			is_expr.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (is_expr.Variable);
		}

		yyVal = is_expr;
	  }

void case_634()
#line 4467 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var is_expr = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "pattern matching");

		yyVal = is_expr;
	  }

void case_635()
#line 4475 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_636()
#line 4481 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_637()
#line 4487 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Is (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_638()
#line 4492 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new As (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_645()
#line 4515 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_651()
#line 4543 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = new List<PropertyPatternMember> ();
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_652()
#line 4549 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var list = (List<PropertyPatternMember>) yyVals[-2+yyTop];
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_653()
#line 4558 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new PropertyPatternMember (lt.Value, (Expression) yyVals[0+yyTop], lt.Location);
	  }

void case_655()
#line 4567 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
			var lt = (LocatedToken) yyVals[0+yyTop];
			var variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (variable);
		}
	  }

void case_658()
#line 4586 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_659()
#line 4592 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);

		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_661()
#line 4608 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);
	  }

void case_663()
#line 4617 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_664()
#line 4622 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_665()
#line 4627 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_666()
#line 4634 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_668()
#line 4645 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_669()
#line 4650 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_670()
#line 4655 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_671()
#line 4660 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_672()
#line 4665 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_673()
#line 4672 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_674()
#line 4679 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_675()
#line 4686 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_677()
#line 4697 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_678()
#line 4702 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_679()
#line 4707 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_680()
#line 4714 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_682()
#line 4725 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_683()
#line 4730 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_685()
#line 4741 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_686()
#line 4746 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_688()
#line 4757 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_689()
#line 4762 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_691()
#line 4773 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_692()
#line 4778 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_694()
#line 4789 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_695()
#line 4794 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_697()
#line 4805 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_699()
#line 4817 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_700()
#line 4822 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_701()
#line 4828 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_702()
#line 4835 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		lexer.putback ('}');
	  }

void case_703()
#line 4846 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_704()
#line 4851 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_705()
#line 4856 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_706()
#line 4861 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_707()
#line 4866 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_708()
#line 4871 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_709()
#line 4876 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_710()
#line 4881 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_711()
#line 4886 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_712()
#line 4891 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_713()
#line 4896 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_714()
#line 4904 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_715()
#line 4911 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_716()
#line 4925 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_717()
#line 4931 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_718()
#line 4937 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_719()
#line 4942 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[0+yyTop]);
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_721()
#line 4950 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_723()
#line 4961 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_725()
#line 4969 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_727()
#line 4983 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_728()
#line 4991 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_729()
#line 4997 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_730()
#line 5002 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-1+yyTop]);
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_731()
#line 5008 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_732()
#line 5013 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_733()
#line 5019 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_735()
#line 5028 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_736()
#line 5033 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_738()
#line 5042 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_739()
#line 5047 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_746()
#line 5070 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_747()
#line 5075 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_748()
#line 5080 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_753()
#line 5107 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];

		/* Cannot use opt_formal_parameter_list because it can be shared instance for empty parameters*/
	  	lbag.AppendToMember (current_container, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));

		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "primary constructor");
	  }

void case_758()
#line 5136 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }

void case_759()
#line 5141 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
		current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }

void case_761()
#line 5161 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.ConstraintsParsing = true;

		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }

void case_762()
#line 5174 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_763()
#line 5193 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_764()
#line 5199 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_767()
#line 5218 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_770()
#line 5232 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_771()
#line 5251 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_772()
#line 5259 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_773()
#line 5264 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_774()
#line 5269 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_775()
#line 5274 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_776()
#line 5279 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_777()
#line 5284 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_778()
#line 5289 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_779()
#line 5294 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_780()
#line 5299 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_781()
#line 5304 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_782()
#line 5309 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_783()
#line 5314 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_784()
#line 5319 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_785()
#line 5326 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_789()
#line 5343 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_792()
#line 5360 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_793()
#line 5366 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_794()
#line 5385 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_795()
#line 5391 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_796()
#line 5401 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_797()
#line 5407 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_798()
#line 5433 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_799()
#line 5440 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_803()
#line 5460 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_806()
#line 5494 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_808()
#line 5506 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_809()
#line 5511 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_810()
#line 5520 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_811()
#line 5525 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_819()
#line 5552 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_852()
#line 5616 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_853()
#line 5621 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_854()
#line 5626 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_855()
#line 5634 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_856()
#line 5642 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_859()
#line 5655 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_860()
#line 5671 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (expr.Name == "var" && expr is SimpleName)
				yyVal = new VarExpr (expr.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		}
	  }

void case_861()
#line 5697 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_865()
#line 5708 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_869()
#line 5731 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_870()
#line 5738 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		if (yyVals[-2+yyTop] != null)
			lbag.AddLocation (yyVal, PopLocation (), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_871()
#line 5747 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_872()
#line 5754 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_874()
#line 5764 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		PushLocation (GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_875()
#line 5770 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_879()
#line 5788 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_882()
#line 5803 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_883()
#line 5812 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_890()
#line 5845 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_892()
#line 5858 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_893()
#line 5863 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_894()
#line 5871 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_896()
#line 5877 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_899()
#line 5895 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			var expr = yyVals[0+yyTop] as Expression;
			yyVal = new StatementErrorExpression (expr);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_900()
#line 5908 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }

void case_901()
#line 5913 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_904()
#line 5927 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_905()
#line 5936 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_906()
#line 5946 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_908()
#line 5960 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_909()
#line 5966 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_916()
#line 5997 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
		current_block.AddStatement (label);
	  }

void case_918()
#line 6010 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_919()
#line 6015 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_925()
#line 6046 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_926()
#line 6054 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_927()
#line 6064 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_928()
#line 6069 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_929()
#line 6074 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_930()
#line 6084 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }

void case_932()
#line 6100 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }

void case_933()
#line 6108 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_934()
#line 6121 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_935()
#line 6129 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_937()
#line 6139 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_938()
#line 6148 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_939()
#line 6153 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_944()
#line 6173 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_945()
#line 6180 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		if (yyVals[-1+yyTop] != null)
			lbag.AddLocation (current_variable, PopLocation ());

		current_variable = null;
	  }

void case_953()
#line 6207 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_954()
#line 6223 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_955()
#line 6236 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_956()
#line 6253 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_957()
#line 6263 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_964()
#line 6286 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_965()
#line 6294 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_966()
#line 6299 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_967()
#line 6307 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_968()
#line 6313 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_969()
#line 6318 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_970()
#line 6326 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_971()
#line 6331 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_972()
#line 6336 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_973()
#line 6344 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_974()
#line 6349 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_975()
#line 6354 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_976()
#line 6362 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_977()
#line 6378 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_978()
#line 6396 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_982()
#line 6422 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_983()
#line 6427 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_984()
#line 6432 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_985()
#line 6440 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_986()
#line 6447 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_989()
#line 6468 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	var c = new Catch ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	c.Filter = (CatchFilterExpression) yyVals[-1+yyTop];
	  	yyVal = c;
	  }

void case_990()
#line 6474 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
		lexer.parsing_catch_when = true;
	  }

void case_991()
#line 6490 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	((Catch) yyVals[-1+yyTop]).Filter = (CatchFilterExpression) yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_992()
#line 6495 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_994()
#line 6513 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		end_block (Location.Null);
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_997()
#line 6529 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "exception filter");

		yyVal = new CatchFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_1000()
#line 6554 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_1002()
#line 6564 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_1003()
#line 6572 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1004()
#line 6582 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_1005()
#line 6592 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_1006()
#line 6597 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_1007()
#line 6610 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_1008()
#line 6620 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_1009()
#line 6625 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_1010()
#line 6634 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_1011()
#line 6642 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1013()
#line 6653 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_1015()
#line 6665 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_1016()
#line 6676 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1017()
#line 6688 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1018()
#line 6699 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1019()
#line 6706 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1020()
#line 6715 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1021()
#line 6725 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1022()
#line 6740 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1023()
#line 6750 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }

void case_1025()
#line 6769 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1027()
#line 6785 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_1028()
#line 6804 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1029()
#line 6819 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_1031()
#line 6832 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_1032()
#line 6837 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_1034()
#line 6849 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1035()
#line 6856 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_1036()
#line 6864 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1037()
#line 6871 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var obj = (object[]) yyVals[0+yyTop];

		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-2+yyTop], linq_clause_blocks.Pop (), (Expression)obj[0], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, (Location) obj[1]);
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1039()
#line 6888 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new object[2] { null, Location.Null };
	  }

void case_1041()
#line 6897 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_1048()
#line 6917 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_1050()
#line 6936 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_1051()
#line 6946 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1052()
#line 6954 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1053()
#line 6962 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1054()
#line 6970 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_1055()
#line 7008 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1056()
#line 7016 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_1057()
#line 7024 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1058()
#line 7032 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_1062()
#line 7088 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_1064()
#line 7099 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1065()
#line 7106 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_1067()
#line 7115 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_1068()
#line 7122 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_1070()
#line 7134 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1071()
#line 7139 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1073()
#line 7151 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1074()
#line 7156 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1076()
#line 7166 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_1077()
#line 7182 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_1080()
#line 7209 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;

		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_1081()
#line 7237 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		--lexer.parsing_block;
		var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_1091()
#line 7283 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1092()
#line 7289 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1093()
#line 7295 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_1096()
#line 7310 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_1097()
#line 7315 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_1098()
#line 7323 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_1099()
#line 7331 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop];
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_1107()
#line 7369 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1108()
#line 7375 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1109()
#line 7384 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   16,   16,   20,   21,   18,   18,   23,   23,   23,   19,
   19,   19,   24,   24,   25,   25,    7,    7,    6,    6,
   22,   22,    8,    8,   26,   26,   26,   27,   27,   27,
   27,   27,    9,    9,   10,   10,   35,   33,   38,   34,
   34,   34,   34,   36,   36,   36,   37,   37,   42,   39,
   40,   41,   41,   43,   43,   43,   43,   43,   44,   44,
   44,   48,   45,   47,   51,   50,   50,   50,   53,   53,
   54,   54,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   69,   64,   74,   76,
   79,   80,   81,   29,   29,   84,   56,   56,   85,   85,
   86,   86,   87,   89,   83,   83,   88,   88,   94,   57,
   98,   57,   57,   93,  101,   93,   95,   95,  102,  102,
  103,  104,  103,   99,   99,  105,  105,  106,  107,   97,
   97,  100,  100,  100,  110,   58,  113,  114,  108,  115,
  116,  117,  108,  108,  108,  109,  109,  119,  119,  122,
  120,  112,  112,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  124,  124,  127,  127,  127,  127,  130,
  127,  128,  128,  131,  131,  132,  132,  132,  125,  125,
  125,  133,  133,  133,  126,  135,  137,  138,  140,   59,
  141,   59,  139,  143,  139,  142,  142,  145,  147,   61,
  146,  146,  136,  136,  136,  136,  136,  151,  148,  152,
  149,  150,  150,  150,  153,  154,  155,  157,   30,   30,
  156,  156,  158,  158,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  161,   62,  162,  162,  165,  160,  160,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  167,  166,  168,  166,  166,  166,   63,
  171,  173,  169,  170,  170,  172,  172,  177,  175,  178,
  175,  175,  175,  179,   65,  181,   60,  184,  185,   60,
   60,  180,  187,  180,  182,  182,  188,  188,  189,  190,
  189,  191,  186,  183,  183,  183,  183,  183,  195,  192,
  196,  193,  194,  194,   66,   67,  198,  200,  201,   31,
  197,  197,  197,  199,  199,  199,  202,  202,  203,  204,
  203,  203,  203,  205,  206,  207,   32,  208,  208,   17,
   17,   17,  209,  209,  209,  213,  213,  211,  211,  211,
  214,  214,  216,   73,  134,  111,  111,  144,  144,  217,
  217,  217,  215,  215,  218,  218,  219,  219,  221,  221,
   92,   82,   82,   96,   96,  129,  129,  163,  163,  223,
  223,  223,  222,  226,  226,  226,  228,  228,  229,  227,
  227,  227,  227,  227,  227,  227,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  232,  232,  232,  233,
  233,  233,  254,  254,  252,  252,  255,  255,  256,  256,
  257,  256,  258,  256,  259,  259,  260,  260,  235,  235,
  253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  237,  237,  237,  262,  262,  263,  263,  264,
  264,  266,  266,  266,  267,  267,  267,  267,  267,  267,
  267,  268,  268,  176,  176,  261,  261,  261,  261,  261,
  273,  273,  272,  272,  274,  274,  274,  274,  274,  274,
  276,  276,  276,  275,  238,  238,  238,  238,  271,  271,
  278,  278,  279,  279,  239,  240,  240,  241,  242,  243,
  243,  234,  234,  234,  234,  234,  284,  280,  244,  244,
  285,  285,  286,  286,  287,  287,  287,  287,  288,  288,
  288,  288,  281,  281,  224,  224,  283,  283,  289,  289,
  282,  282,   91,   91,  290,  290,  245,  291,  291,  212,
  210,  246,  246,  247,  247,  248,  248,  249,  293,  250,
  294,  250,  292,  292,  296,  295,  236,  297,  297,  297,
  297,  297,  297,  297,  297,  297,  298,  298,  298,  298,
  298,  298,  298,  298,  298,  298,  298,  298,  298,  299,
  299,  299,  299,  299,  299,  299,  300,  300,  300,  300,
  300,  300,  300,  300,  300,  300,  300,  300,  301,  303,
  303,  303,  303,  303,  303,  303,  303,  303,  304,  305,
  307,  307,  308,  309,  309,  306,  306,  310,  310,  311,
  311,  312,  312,  312,  312,  312,  313,  313,  313,  313,
  313,  313,  313,  313,  313,  314,  314,  314,  314,  314,
  315,  315,  315,  316,  316,  316,  317,  317,  317,  318,
  318,  318,  319,  319,  319,  320,  320,  321,  321,  321,
  321,  321,  322,  322,  322,  322,  322,  322,  322,  322,
  322,  322,  322,  323,  323,  324,  324,  324,  324,  325,
  325,  327,  326,  326,  326,   52,   52,  329,  328,  330,
  328,  331,  328,  332,  333,  328,  334,  335,  328,   46,
   46,  269,  269,  269,  269,  251,  251,  251,   90,  337,
   75,   75,  338,  339,  339,  339,  339,  341,  339,  342,
  343,  344,  345,   28,   72,   72,   71,   71,  118,  118,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,   77,   77,  340,  340,   78,
   78,  347,  347,  348,  348,  349,  349,  350,  350,  350,
  350,  220,  220,  351,  351,  352,  121,   70,   70,  353,
  174,   68,   68,  354,  354,  355,  355,  355,  355,  359,
  359,  360,  360,  360,  357,  357,  357,  357,  357,  357,
  357,  357,  357,  357,  357,  357,  357,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  375,  375,  375,  375,  362,  376,  358,  277,  277,  377,
  377,  377,  377,  225,  225,  378,   49,   49,  380,  356,
  383,  356,  379,  379,  379,  381,  381,  387,  387,  386,
  386,  388,  388,  382,  382,  384,  384,  389,  389,  390,
  385,  385,  385,  363,  363,  363,  374,  374,  391,  392,
  392,  364,  364,  393,  393,  393,  396,  394,  394,  395,
  395,  397,  397,  397,  398,  399,  399,  400,  400,  400,
  365,  365,  365,  365,  401,  401,  402,  402,  402,  406,
  403,  409,  405,  405,  412,  408,  408,  411,  411,  413,
  413,  407,  407,  416,  415,  415,  410,  410,  414,  414,
  418,  417,  417,  404,  404,  419,  404,  366,  366,  366,
  366,  366,  366,  420,  421,  421,  422,  422,  422,  423,
  423,  423,  424,  424,  424,  425,  425,  425,  426,  426,
  367,  367,  367,  367,  427,  427,  302,  302,  428,  431,
  428,  428,  430,  430,  429,  432,  429,  368,  369,  433,
  372,  370,  370,  435,  436,  373,  438,  439,  371,  371,
  371,  437,  437,  434,  434,  336,  336,  336,  336,  440,
  440,  442,  442,  444,  443,  445,  443,  441,  441,  441,
  441,  441,  449,  447,  450,  452,  447,  451,  451,  446,
  446,  453,  453,  453,  453,  453,  458,  454,  459,  455,
  460,  461,  462,  456,  464,  465,  466,  456,  463,  463,
  468,  457,  467,  471,  467,  470,  473,  470,  469,  469,
  469,  472,  472,  472,  448,  474,  448,    3,    3,  475,
    3,    3,  476,  476,  270,  270,  265,  265,    5,  477,
  477,  477,  477,  477,  481,  477,  477,  477,  477,  478,
  478,  479,  482,  479,  480,  480,  483,  483,  484,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    4,    6,    2,
    0,    1,    0,    0,   11,    3,    0,    1,    1,    1,
    3,    1,    0,    1,    0,    1,    0,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    2,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    0,    3,    0,    6,
    3,    2,    1,    1,    1,    1,    1,    3,    0,    3,
    1,    0,    3,    0,    1,    1,    3,    3,    1,    1,
    1,    0,    4,    4,    1,    0,    1,    1,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    4,    0,    0,
    0,    0,    0,   17,    5,    0,    9,    5,    0,    1,
    1,    2,    3,    0,    3,    1,    1,    1,    0,    8,
    0,    9,    6,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    1,    1,    2,    3,    0,    4,
    2,    1,    1,    1,    0,    3,    0,    0,   10,    0,
    0,    0,   12,    8,    5,    1,    1,    1,    1,    0,
    4,    0,    1,    1,    3,    3,    3,    5,    3,    5,
    1,    1,    1,    1,    3,    4,    6,    2,    4,    0,
    7,    0,    1,    1,    2,    1,    1,    1,    4,    6,
    4,    1,    2,    2,    1,    0,    0,    0,    0,   12,
    0,    6,    0,    0,    4,    1,    1,    0,    0,   10,
    3,    1,    1,    2,    1,    2,    1,    0,    5,    0,
    5,    1,    1,    1,    0,    0,    0,    0,   15,    5,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    5,    1,    1,    0,    7,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    7,    0,    7,    2,    2,    2,
    0,    0,    9,    1,    1,    0,    1,    0,    6,    0,
    6,    2,    1,    0,    8,    0,    9,    0,    0,   10,
    5,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    2,    2,    2,    1,    1,    1,    0,    5,
    0,    5,    1,    1,    2,    4,    0,    0,    0,   12,
    0,    2,    2,    0,    1,    2,    1,    3,    2,    0,
    5,    3,    1,    0,    0,    0,   13,    0,    1,    1,
    3,    3,    1,    4,    4,    2,    2,    0,    3,    2,
    1,    3,    0,    3,    1,    1,    3,    1,    2,    3,
    4,    4,    0,    3,    1,    3,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    1,    1,    2,    2,    2,    1,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    1,    1,    3,    1,    3,
    0,    4,    0,    6,    1,    1,    1,    1,    3,    3,
    4,    4,    5,    4,    4,    4,    3,    3,    3,    4,
    3,    4,    4,    4,    3,    0,    1,    3,    4,    0,
    1,    1,    3,    2,    3,    3,    1,    2,    3,    5,
    2,    1,    1,    0,    1,    1,    3,    3,    3,    2,
    1,    1,    1,    1,    2,    2,    2,    2,    4,    3,
    3,    2,    4,    1,    4,    5,    4,    3,    1,    3,
    1,    3,    1,    1,    1,    4,    3,    2,    2,    6,
    3,    7,    4,    3,    7,    3,    0,    2,    4,    3,
    1,    2,    0,    1,    1,    3,    1,    2,    3,    1,
    1,    1,    0,    1,    1,    2,    2,    3,    1,    2,
    0,    1,    2,    4,    1,    3,    4,    1,    1,    1,
    2,    4,    4,    4,    2,    4,    2,    4,    0,    4,
    0,    5,    0,    1,    0,    4,    4,    1,    2,    2,
    4,    2,    2,    2,    4,    2,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    3,    4,    3,    3,    3,    3,    3,    1,    1,
    2,    2,    1,    1,    4,    1,    1,    1,    4,    4,
    1,    3,    3,    1,    2,    0,    1,    1,    3,    1,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
    1,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    1,    5,    4,
    5,    5,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    2,    1,    1,    0,
    1,    0,    2,    1,    1,    1,    1,    0,    4,    0,
    4,    0,    5,    0,    0,    7,    0,    0,    8,    1,
    1,    1,    1,    1,    1,    6,    4,    4,    1,    1,
    0,    1,    3,    0,    1,    1,    2,    0,    6,    0,
    0,    0,    0,   15,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    1,    2,    3,    0,
    1,    1,    2,    4,    3,    1,    3,    1,    3,    1,
    1,    0,    1,    1,    1,    0,    4,    1,    1,    0,
    4,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    4,    1,    2,    2,
    2,    1,    1,    1,    2,    1,    1,    1,    0,    6,
    0,    7,    0,    2,    1,    0,    1,    0,    1,    1,
    2,    2,    4,    0,    2,    0,    1,    1,    2,    4,
    1,    5,    2,    2,    2,    2,    2,    2,    1,    1,
    1,    1,    1,    5,    7,    4,    0,    8,    4,    0,
    1,    1,    2,    1,    2,    1,    2,    3,    3,    1,
    1,    1,    1,    1,    5,    4,    7,    3,    6,    0,
    4,    0,    5,    1,    0,    4,    2,    2,    2,    1,
    1,    0,    1,    0,    5,    1,    0,    1,    0,    1,
    1,    1,    3,    4,    5,    0,    9,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    3,    4,    3,    3,
    3,    2,    3,    3,    2,    4,    4,    3,    0,    1,
    3,    4,    5,    3,    1,    2,    0,    1,    3,    0,
    7,    3,    2,    1,    0,    0,    5,    2,    2,    0,
    3,    5,    4,    0,    0,   10,    0,    0,    9,    5,
    4,    2,    1,    0,    2,    2,    2,    2,    2,    4,
    5,    4,    5,    0,    5,    0,    6,    3,    2,    2,
    2,    1,    0,    3,    0,    0,    5,    2,    1,    1,
    2,    1,    1,    1,    1,    1,    0,    5,    0,    3,
    0,    0,    0,   12,    0,    0,    0,   13,    0,    2,
    0,    3,    1,    0,    4,    1,    0,    4,    1,    2,
    2,    1,    2,    2,    0,    0,    4,    2,    3,    0,
    4,    2,    2,    3,    0,    1,    1,    1,    2,    2,
    2,    2,    4,    3,    0,    7,    4,    4,    3,    1,
    3,    0,    0,    4,    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0, 1078,    0,    0, 1082,    0,
    0,   15,   17,  412,  418,  425,  413,  415,    0,  414,
    0,  421,  423,  410,    0,  417,  419,  411,  422,  424,
  420,    0,  373, 1100,    0,  416, 1089,    0,   10,    1,
    0,    0,    0,   12,    0,  901,    0,    0,    0,    0,
    0,    0,    0,    0,  454,    0,    0,    0,    0,    0,
    0,    0,  452,    0,    0,    0,  535,    0,  453,    0,
    0,    0, 1000,    0,    0,    0,  745,    0,    0,    0,
    0,    0,    0,    0,    0,  456,  806,    0,  855,    0,
    0,    0,    0,    0,    0,    0,    0,  451,    0,  734,
    0,  900,    0,  838,    0,  447,  863,  862,    0,    0,
    0,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
  446,  449,  450,  741,    0,  607,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  742,  740,
  743,  744,  822,  824,    0,  820,  823,  839,  841,  842,
  843,  844,  845,  846,  847,  848,  849,  850,  840,    0,
    0,  902,  903,  921,  922,  923,  924,  958,  959,  960,
  961,  962,  963,    0,    0,    0,   20,   22,    0, 1086,
   16, 1079,    0,    0,  266,  283,  265,  262,  267,  268,
  261,  280,  279,  272,  273,  269,  271,  270,  274,  263,
  264,  275,  276,  282,  281,  277,  278,    0, 1103, 1092,
    0,    0, 1091,    0, 1090,    3,   57,    0,    0,    0,
   46,   43,   45,   48,   49,   50,   51,   52,   55,   13,
    0,    0,    0,  964,  585,  465,  466,  998,    0,    0,
    0,    0,    0,    0,    0,    0,  966,  965,    0,  595,
  589,  594,  854,  899,  825,  852,  851,  853,  826,  827,
  828,  829,  830,  831,  832,  833,  834,  835,  836,  837,
    0,    0,    0,  930,    0,    0,    0,  868,  867,    0,
    0,    0,    0,    0,    0,    0,    0,  972,    0,    0,
    0,    0,  426,    0,    0,    0,  975,    0,    0,    0,
    0,  587,  999,    0,    0,    0,  866,  406,    0,    0,
    0,    0,    0,    0,  392,  360,    0,  363,  393,    0,
  402,    0,    0,    0,    0,    0,    0,    0,  737,    0,
  606,    0,    0,  730,    0,    0,  602,    0,    0,  457,
    0,    0,  604,  600,  614,  608,  615,  609,  603,  599,
  619,  613,  618,  612,  616,  610,  617,  611,  728,  581,
    0,  580,  448,  366,  367,    0,    0,    0,    0,    0,
  856,    0,  359,    0,  404,  405,    0,    0,  538,  539,
    0,    0,    0,  860,  861,  869,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1081,
  821,  859,    0,  897,  898, 1032, 1049,    0,    0, 1033,
 1035,    0, 1061, 1018, 1016, 1042,    0,    0, 1040, 1043,
 1044, 1045, 1046, 1019, 1017,    0,    0,    0,    0,    0,
    0, 1099,    0,    0,  374,    0,    0, 1101,    0,    0,
   44,  776,  782,  774,    0,  771,  781,  775,  773,  772,
  779,  777,  778,  784,  780,  783,  785,    0,    0,  769,
   47,   56,  537,    0,  533,  534,    0,    0,  531,    0,
  871,    0,    0,    0,  928,    0,  896,  894,  895,    0,
    0,    0,  749,    0,  969,  967,  750,    0,    0,  562,
    0,    0,  550,  557,    0,    0,    0,  551,    0,    0,
  567,  569,    0,  546,    0,    0,    0,    0,    0,  541,
    0,  544,  548,  395,  394,  971,  970,    0,    0,  974,
  973,  984,    0,    0,    0,  985,  579,    0,  389,  578,
    0,    0, 1001,    0,    0,  865,    0,    0,  400,  401,
    0,    0,    0,  399,    0,    0,    0,  620,    0,    0,
  591,    0,  732,  638,  637,    0,    0,    0,  461,    0,
  455,  819,    0,    0,  814,  816,  817,  818,  469,  470,
    0,  370,  371,    0,  197,  196,  198,    0,  719,    0,
    0,    0,  396,    0,  714,    0,    0,  978,    0,    0,
    0,  477,  478,    0,  481,    0,    0,    0,    0,  479,
    0,    0,  528,    0,  485,    0,    0,    0,    0,  511,
  514,    0,    0,  506,  513,  512,    0,  703,  704,  705,
  706,  707,  708,  709,  710,  711,  713,  712,  624,  621,
  626,  623,  625,  622,  635,  632,  636,    0,    0,  646,
    0,    0,    0,    0,    0,  639,    0,  634,  647,  648,
  630,    0,  631,    0,  665,    0,    0,  666,    0,  672,
    0,  673,    0,  674,    0,  675,    0,  679,    0,  680,
    0,  683,    0,  686,    0,  689,    0,  692,    0,  695,
    0,  697,    0,  566,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1031, 1030,    0, 1041,    0, 1029,    0,
   18, 1097, 1098,    0,    0,  194,    0,    0, 1107,  388,
    0,    0,    0,  385, 1093, 1095,   63,   65,   66,    0,
    0,   58,    0,    0,   67,   69,   32,   30,    0,    0,
    0,  766,    0,  770,  475,    0,  536,    0,  584,    0,
  597,  183,  205,    0,    0,    0,  173,    0,    0,    0,
  184,  590,    0, 1004,  934,    0,  952,  931,    0,  943,
    0,  954,    0,  968,  906,    0, 1003,    0,    0,  549,
    0,  558,  568,  570,    0,    0,    0,    0,  497,    0,
    0,  492,    0,    0,  727,  726,  529,    0,  572,  543,
    0,    0,  154,  573,  152,  153,  575,    0,  583,  582,
  909,    0,  996,    0,    0,  982,    0,  986,  577,  586,
 1011,    0, 1007,  926,    0,    0, 1022,    0,  361,  362,
 1020,    0,    0,  747,  748,    0,    0,    0,  725,  724,
  731,    0,  476,    0,    0,  458,  808,  809,  807,  815,
  729,    0,  369,  717,    0,    0,    0,  605,  601,  977,
  976,  857,  482,  474,    0,    0,  480,  471,  472,  588,
  527,  525,    0,  524,  517,  518,    0,  515,  516,    0,
  510,  467,  468,  483,  484,    0,  875,    0,    0,  641,
  642,    0,    0,    0,  988,  633,  700,    0, 1050, 1024,
    0, 1051,    0, 1034, 1036, 1047,    0, 1062,    0, 1028,
 1076,    0, 1109,  195, 1104,    0,  805,  804,    0,  803,
    0,  384,    0,   62,   59,    0,    0,    0,    0,    0,
    0,  391,    0,  760,    0,    0,   88,   87,    0,  532,
    0,    0,    0,    0,    0,  188,  596,    0,    0,    0,
    0,    0,  944,  932,    0,  955,    0,    0, 1002,  559,
  556,    0,  501,    0,    0,    0, 1087, 1088,  488,  494,
    0,  498,    0,    0,    0,    0,    0,    0,  907,    0,
  992,    0,  989,  983, 1010,    0,  925,  364,  365, 1023,
 1021,    0,  592,    0,  733,  723,  463,  462,  372,  716,
  715,  735,  473,  526,    0,    0,  520,    0,  509,  508,
  507,    0,  891,  874,    0,    0,    0,  880,    0,    0,
    0,  651,    0,    0,  654,    0,  660,    0,  658,  701,
  702,  699,    0, 1026,    0, 1055,    0,    0, 1070, 1071,
 1064,    0,   19, 1108,  387,  386,    0,    0,   68,   61,
    0,   70,   31,   24,    0,    0,  337,    0,  240,    0,
  115,    0,   84,   85,  885,  127,  128,    0,    0,    0,
  888,  203,  204,    0,    0,    0,    0,  176,  185,  177,
  179,  929,    0,    0,    0,    0,    0,  953,    0,    0,
  502,  503,  496,  499,  495,    0,  489,  493,    0,  564,
    0,  530,  540,  487,  576,  574,    0,    0,    0, 1013,
    0,    0,  746,  738,    0,    0,  521,    0,  519,    0,
    0,  870,  881,  645,    0,  650,    0,    0,  655,  649,
    0, 1025,    0,    0,    0, 1039,    0, 1037, 1048,    0,
 1077, 1096,    0,   81,    0,    0,   75,   76,   79,   80,
    0,  354,  343,  342,    0,  761,  236,  110,    0,  872,
  889,  189,    0,  201,    0,    0,    0,  927, 1015,    0,
    0,    0,  948,    0,    0,  956,  905,    0,  545,  542,
  914,    0,  920,    0,    0,  912,    0,  916,    0,  990,
 1012, 1008,    0,  464,  736,  523,    0,    0,  653,  652,
  661,  659, 1027, 1052,    0, 1038,    0,    0, 1066,    0,
   82,   73,    0,    0,    0,  338,    0,    0,    0,    0,
    0,  190,    0,  180,  178, 1005,  945,  933,  941,  940,
  935,  937,    0,  500,    0,  908,  913,    0,  917,  997,
    0,    0,  739,    0,  883,    0, 1056, 1073, 1074, 1067,
   60,    0,   77,   78,    0,    0,    0,    0,    0,    0,
    0,  755,    0,  787,    0,  752,  890,  187,    0,  200,
    0,    0,  957,  919,  918,  994,    0,  991, 1009,  892,
    0,    0,    0,   83,    0,    0,  355,    0,    0,  353,
  339,    0,  347,    0,  409,    0,  407,    0,    0,  762,
    0,  792,  237,    0,  191, 1006,  936,    0,    0,  950,
  810,  993, 1053,    0, 1068,    0,    0,    0,  335,    0,
    0,  753,  789,    0,  758,    0,    0,  793,    0,  111,
  939,  938,    0,    0, 1057,   29,   28,   25,  356,  352,
    0,    0,  348,  408,    0,  795,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,  340,    0,  800,    0,
  801,  798,    0,  796,  106,  107,    0,  103,    0,    0,
   91,   93,   94,   95,   96,   97,   98,   99,  100,  101,
  102,  104,  105,  155,    0,    0,  253,  245,  246,  247,
  248,  249,  250,  251,  252,    0,    0,  243,  112,  811,
    0, 1054,    0,  357,  351,  759,    0,    0,    0,    0,
  763,   92,    0,  295,  290,  294,    0,  238,  244,    0,
 1060, 1058,  799,  797,    0,    0,    0,    0,    0,    0,
    0,    0,  304,    0,    0,  254,    0,    0,  260,    0,
  170,  169,  156,  166,  167,  168,    0,    0,    0,  108,
    0,    0,  289,    0,    0,  288,    0,  160,    0,    0,
  378,  336,    0,  376,    0,    0,    0,    0,    0,    0,
    0,    0,  764,    0,  239,  113,  118,  116,  311,    0,
  375,    0,    0,    0,    0,  131,    0,    0,    0,    0,
    0,    0,  165,  157,    0,    0,    0,  218,    0,  379,
    0,  255,    0,    0,    0,    0,  308,    0,  286,  133,
    0,  284,    0,    0,    0,  135,    0,  380,    0,    0,
  207,  212,    0,    0,    0,  377,  258,  171,  114,  126,
  124,    0,    0,  313,    0,    0,    0,    0,    0,  161,
    0,  292,    0,    0,    0,    0,  139,    0,    0,    0,
    0,  381,  382,    0,    0,    0,    0,    0,  121,  328,
    0,  309,    0,    0,  322,    0,    0,    0,  317,    0,
  151,    0,    0,    0,    0,  146,    0,    0,  305,    0,
  136,    0,  130,  140,  158,  164,  227,    0,  208,    0,
    0,  219,    0,  125,    0,  117,  122,    0,    0,    0,
  324,    0,  325,  314,    0,    0,  307,  318,  287,    0,
    0,  132,  147,  285,    0,  303,    0,  293,  297,  142,
    0,    0,    0,  224,  226,    0,  259,  123,  329,  331,
  310,    0,    0,  323,  320,  150,  148,  162,  302,    0,
    0,    0,  159,  228,  230,  209,    0,  222,  220,    0,
    0,  322,    0,  298,  300,  143,    0,    0,    0,    0,
  333,  334,  330,  332,  321,  163,    0,    0,  234,  233,
  232,  229,  231,  214,  210,  221,    0,    0,    0,  299,
  301,  216,  217,    0,  215,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   50,    9,   51,   10,   11,   52,  238,  784,  785,
   12,   13,   53,   22,   23,  199,  332,  241,  769,  960,
 1181, 1316, 1368, 1691,  957,  242,  243,  244,  245,  246,
  247,  248,  249,  762,  479,  763,  764, 1078,  765,  766,
 1082,  958, 1176, 1177, 1178,  274,  651, 1282,  113,  969,
 1093,  827, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
 1407, 1408, 1409, 1410, 1411, 1412, 1413,  603, 1439,  879,
  498,  773, 1494, 1092, 1295, 1249, 1293, 1330, 1380, 1450,
 1535, 1325, 1562, 1536, 1587, 1588, 1589, 1095, 1585, 1096,
  836,  961, 1547, 1521, 1575,  553, 1568, 1541, 1604, 1043,
 1573, 1576, 1577, 1672, 1605, 1606, 1602, 1414, 1473, 1443,
 1495,  786, 1549, 1651, 1518, 1608, 1683,  499, 1474, 1475,
  275, 1504,  787,  788,  789,  790,  791,  744,  621, 1299,
  745,  746,  975, 1497, 1526, 1619, 1580, 1653, 1705, 1689,
 1527, 1714, 1709, 1498, 1553, 1679, 1656, 1620, 1621, 1702,
 1687, 1688, 1090, 1248, 1359, 1426, 1478, 1427, 1428, 1466,
 1501, 1467,  335,  228, 1584, 1469, 1569, 1566, 1415, 1445,
 1490, 1648, 1610, 1342, 1649,  652, 1697, 1698, 1489, 1565,
 1538, 1597, 1592, 1563, 1629, 1634, 1595, 1598, 1599, 1682,
 1635, 1593, 1594, 1693, 1680, 1681, 1087, 1185, 1321, 1287,
 1350, 1322, 1323, 1371, 1245, 1347, 1384,  395,  336,  115,
  384,  385,  116,  614,  475,  231, 1513,  753,  754,  949,
  962,  117,  340,  442,  328,  341,  312, 1326, 1327,   46,
  120,  313,  122,  123,  124,  125,  126,  127,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
  140,  141,  142,  143,  359,  360,  875, 1145,  259,  914,
  832, 1133, 1122,  820,  999,  821,  822, 1123,  144,  202,
  828,  654,  655,  656,  905,  906,  145,  508,  509,  305,
 1131,  830,  443,  307,  537,  538,  539,  540,  543,  838,
  571,  271,  514,  866,  272,  513,  146,  147,  148,  149,
 1054,  926, 1055,  689,  690, 1056, 1051, 1052, 1057, 1058,
 1059,  150,  151,  152,  153,  154,  155,  156,  157,  158,
  159,  160,  624,  625,  626,  871,  872,  161,  611,  596,
  868,  386, 1146,  592, 1223,  162,  528, 1290, 1291, 1294,
 1375, 1088, 1247, 1357, 1470,  500, 1331, 1332, 1393, 1394,
  950,  361, 1363,  604,  605,  276,  277,  278,  165,  166,
  167,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  179,  291,  631,  180,  329,  919,  657,
 1046,  972,  780, 1099, 1044, 1047, 1201, 1048, 1100, 1101,
  292,  181,  182,  183, 1214, 1137, 1215, 1216, 1217, 1218,
  184,  185,  186,  187,  798,  521,  799, 1204, 1117, 1205,
 1337, 1302, 1262, 1338,  800, 1116,  801, 1340, 1263,  188,
  189,  190,  191,  192,  193,  314,  565,  566,  845, 1308,
 1271, 1010,  325, 1115,  982, 1301, 1142, 1016, 1272,  194,
  455,  195,  456, 1063, 1163,  457,  458,  739,  730,  731,
 1168, 1067,  459,  460,  461,  462,  463, 1068,  725, 1065,
 1276, 1364, 1432, 1165, 1312, 1383,  938,  733,  939, 1238,
 1170, 1239, 1313, 1072,   17,   19,   47,   48,  230,  747,
  953,  473,  748,  749,
  };
  protected static readonly short [] yySindex = {         -104,
    0, -145, -119,  138,  196,19722,    0,  313,    0,    0,
  196,  138,    0,    0,  255,    0, 8816,  196,    0,  250,
  -32,    0,    0,    0,    0,    0,    0,    0,  273,    0,
  292,    0,    0,    0,12227,    0,    0,    0,    0,    0,
    0,  278,    0,    0,  560,    0,    0,  832,    0,    0,
  313,  296,  196,    0,  360,    0,  342,  397, -171,19138,
 -110, -251,  316, 8977,    0, -251, -251, -251,   86, -251,
 -251,   -6,    0,11168, -251, -251,    0,11329,    0,  422,
 -251, -160,    0, -251,  448, -251,    0, 9477, 9477,  669,
 -251, -251,   57,11492,18023,    0,    0,18023,    0,12543,
12678,12813,12948,13083,13218,13353,13488,    0,  192,    0,
10243,    0,  247,    0,  -35,    0,    0,    0,  467,  476,
  432,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -35,    0, 1040,  907,  245,  614,
  682,  815,  474,  483,  608,  651, -272,  673,    0,    0,
    0,    0,    0,    0, 4218,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  726,
  185,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  172,  310,  296,    0,    0,  717,    0,
    0,    0,10243,10243,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  278,    0,    0,
  697,  722,    0, -209,    0,    0,    0,  296,12849,  898,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  901,  -35,18163,    0,    0,    0,    0,    0,18023, -189,
 -143,  877,  795,  555,  476,  -35,    0,    0,10243,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  293,  231,19138,    0,10243,18023,  818,    0,    0,  844,
18023,18023, 7064,  735, -134,  821,10243,    0,11492,  192,
  975,  881,    0,  870,10243,18023,    0, 1008,  930,  480,
 1429,    0,    0,18023,  422,17463,    0,    0,  448,18023,
  636,  570,  984,  -35,    0,    0,  905,    0,    0,  726,
    0,  432, 1025,  -35,18023,18023,18023,  316,    0,  987,
    0,10243,10243,    0,12408,  -35,    0,  913,  939,    0,
 9138,   79,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1582,    0,    0,    0,    0,19602,  636,  969,  970,18023,
    0,  660,    0,  182,    0,    0,  290,  187,    0,    0,
  938,11627, 9460,    0,    0,    0,18023,18023,18023,18023,
18023,18023,18023,18023,18023,18023,18023,13623,13758,13893,
 4963,16188,14028,14163,14298,14433,14568,14703,14838,14973,
15108,15243,15378,15513,15648,15783,15918,18583,18023,    0,
    0,    0,  726,    0,    0,    0,    0, 9477, 9477,    0,
    0,  -35,    0,    0,    0,    0,  326, 1018,    0,    0,
    0,    0,    0,    0,    0,  296,  898,  530,  387,  278,
  278,    0,  737, -100,    0,  278,  991,    0, -188,12849,
    0,    0,    0,    0, -121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  331,12984,    0,
    0,    0,    0,  992,    0,    0, 1022,  764,    0, 1035,
    0, 1036,  217,  422,    0, -251,    0,    0,    0,  -35,
10387, -154,    0, 1033,    0,    0,    0, -174,  122,    0,
  795,  555,    0,    0, 1031,    0, 1048,    0, 1043,  993,
    0,    0,  771,    0, 9740,  782,11788,  821,17323,    0,
 9904,    0,    0,    0,    0,    0,    0,  126,  168,    0,
    0,    0,  275,  422,  388,    0,    0,  448,    0,    0,
 1046, 1051,    0,  177,  -35,    0,  197, 1007,    0,    0,
18023, 1136,  660,    0,18023, 1137, 1054,    0, 1058, 1059,
    0,19602,    0,    0,    0,   91,  992,18023,    0,18023,
    0,    0, -255, 9138,    0,    0,    0,    0,    0,    0,
   91,    0,    0,  376,    0,    0,    0,  448,    0,  636,
  -35,10404,    0, 1060,    0, 1061,16053,    0, 1180, 1064,
 9138,    0,    0, 1009,    0,  992,  -35,18163, 1013,    0,
  660,  992,    0,  210,    0,17603,17603, 1065, 1183,    0,
    0,  269, -180,    0,    0,    0, -114,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,18711,18711,    0,
10243,  639,    0,    0,    0,    0,  -35,    0,    0,    0,
    0,  907,    0,  907,    0,12273,  245,    0,  245,    0,
  614,    0,  614,    0,  614,    0,  614,    0,  682,    0,
  682,    0,  815,    0,  474,    0,  483,    0,  608,    0,
  651,    0,  -42,    0,11788, 1162,  -35, 1163,  -35,11788,
11788, 1074,18023,    0,    0, 1018,    0,  -35,    0, 1039,
    0,    0,    0,10404,  737,    0, 1086, 1085,    0,    0,
   69,  296,  443,    0,    0,    0,    0,    0,    0, -196,
 1088,    0, 1087, 1089,    0,    0,    0,    0, 1093,11024,
 1049,    0,  439,    0,    0,  789,    0,18163,    0, 1090,
    0,    0,    0,  734,   61, 1098,    0, 1099, 1100, 1101,
    0,    0,18023,    0,    0,  -35,    0,    0, 1096,    0,
 1103,    0, -129,    0,    0, 8977,    0, 8977,10548,    0,
16407,    0,    0,    0,10711,10846,  551,17323,    0,  -23,
   58,    0, 1050, 1055,    0,    0,    0,  812,    0,    0,
 1108, 1111,    0,    0,    0,    0,    0, 1114,    0,    0,
    0, 1115,    0, 5452,  422,    0,  422,    0,    0,    0,
    0, 8977,    0,    0, 8977,  660,    0,18023,    0,    0,
    0,18023,10243,    0,    0,  422, 1117,   91,    0,    0,
    0,18023,    0, 1116, 1073,    0,    0,    0,    0,    0,
    0,10243,    0,    0,  -35,19602, 1153,    0,    0,    0,
    0,    0,    0,    0,  992,  830,    0,    0,    0,    0,
    0,    0,17603,    0,    0,    0,  -35,    0,    0,17183,
    0,    0,    0,    0,    0,10065,    0,10226, 1119,    0,
    0, 1122,  -35,18839,    0,    0,    0,11007,    0,    0,
 1210,    0, 1211,    0,    0,    0,  960,    0, 1128,    0,
    0,  501,    0,    0,    0,  737,    0,    0, 1091,    0,
 -100,    0,  737,    0,    0, 1039, 1133, 1134, 1097, 1139,
 1049,    0, 1129,    0, 1255, 1256,    0,    0,11788,    0,
17743, 1140,  734,10404,10243,    0,    0,  434, 1265, 1266,
  203, 1138,    0,    0,18023,    0,18023, 1244,    0,    0,
    0,17883,    0,  519,17883,  838,    0,    0,    0,    0,
 9600,    0, 1271,  726,11788, 1157,10548, 1158,    0, -251,
    0,  -35,    0,    0,    0,  -67,    0,    0,    0,    0,
    0, 1155,    0, 1186,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1156, 1151,    0,  856,    0,    0,
    0,10243,    0,    0,  -35, 1159, 1119,    0,18711, 1242,
  685,    0,  487,  -35,    0, 1165,    0, 1164,    0,    0,
    0,    0,11788,    0,11788,    0,   63,11788,    0,    0,
    0,  481,    0,    0,    0,    0, 1171, 1039,    0,    0,
11949,    0,    0,    0, 1177, 5615,    0, 1049,    0, 1049,
    0, 1049,    0,    0,    0,    0,    0,  -35, 1168, 1140,
    0,    0,    0, -144, -120, 1175, 1181,    0,    0,    0,
    0,    0, 1178,10548, 1119, -114,18023,    0, 1179, 8977,
    0,    0,    0,    0,    0, 1182,    0,    0, 1188,    0,
  821,    0,    0,    0,    0,    0, -179,18023, 1184,    0,
 1119, 1187,    0,    0, 1144,   91,    0,18023,    0, 1142,
 1185,    0,    0,    0,18948,    0,  -35,18948,    0,    0,
18839,    0,11788, 1219,11788,    0,11788,    0,    0,18023,
    0,    0, 1089,    0,  566,  903,    0,    0,    0,    0,
  138,    0,    0,    0, 1200,    0,    0,    0, 1190,    0,
    0,    0,  502,    0, 1191, 1316, 1323,    0,    0, 1119,
 1204, 1119,    0, 8977,  665,    0,    0,17883,    0,    0,
    0,18023,    0, 1209, -195,    0, 8653,    0, 1206,    0,
    0,    0,   91,    0,    0,    0,18023,10226,    0,    0,
    0,    0,    0,    0, 1236,    0,  979, 1208,    0, 1213,
    0,    0,11949,  196,  217,    0,  873, 1205, 1214,17743,
 1216,    0,18023,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8977,    0,   99,    0,    0, 9138,    0,    0,
  -69, 8977,    0, 1217,    0,11788,    0,    0,    0,    0,
    0,18023,    0,    0,  296, 1212,  296,  217,10243, 1205,
 1253,    0, 1253,    0, 1205,    0,    0,    0,18023,    0,
 8977,18023,    0,    0,    0,    0, 1222,    0,    0,    0,
 1247,11788,18023,    0,  296, 1224,    0, 1176,  982,    0,
    0, 1221,    0, 1225,    0,  113,    0, 1227, 1189,    0,
 1253,    0,    0, 1253,    0,    0,    0,  879, 1103,    0,
    0,    0,    0, 1252,    0,   41, 1253, 1357,    0, 1243,
  296,    0,    0,10243,    0,  103, 1245,    0, 1246,    0,
    0,    0, 9138,11788,    0,    0,    0,    0,    0,    0,
 1229, 1239,    0,    0,17323,    0,19790, -161,  296, 1249,
 1251, 1268,11788, 1248,18023,    0,    0, 1257,    0, 1250,
    0,    0, 1254,    0,    0,    0,12984,    0, 1259, -161,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -237,12984,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1263,  296,    0,    0,    0,
  -35,    0, 1268,    0,    0,    0, 1260,19790, 9138,19381,
    0,    0,  606,    0,    0,    0,19449,    0,    0, -161,
    0,    0,    0,    0, -255,10243,10243,  258,10243,  415,
  448, 1290,    0,  636,17084,    0, 1324,    0,    0, 1239,
    0,    0,    0,    0,    0,    0,17119, 1239, 1267,    0,
 -117, -116,    0,10243,  -81,    0,10243,    0, 1215, 1269,
    0,    0,  156,    0,  115, 1081,    0, 1270, 1220,  174,
  606,12227,    0,18023,    0,    0,    0,    0,    0,  156,
    0, 1275, 1226, 1272, 1261,    0, 1278, 1232, 1281,  217,
 1273, 1280,    0,    0, 1284, 1292, 1318,    0,  992,    0,
  952,    0, 1289, 1285, 1239,  -62,    0, 1282,    0,    0,
 1293,    0, 1294, 1296, 1297,    0, 1301,    0,  217,  217,
    0,    0,  217, 1291, 1298,    0,    0,    0,    0,    0,
    0, 1304,  221,    0, 1305,  217, 1428, 1308,  217,    0,
 -208,    0,10548, 1276, 1307, 1301,    0, 1312, 1313,  249,
 1319,    0,    0,  217,17743, 1279, 1310, 1304,    0,    0,
12984,    0,  296,  296,    0, 1283, 1315, 1305,    0, 1321,
    0,18023, 1288, 1320, 1308,    0, 1326,  217,    0,  116,
    0, 1322,    0,    0,    0,    0,    0,12984,    0,  249,
  249,    0, 1327,    0,  -62,    0,    0,  270, 1339,12984,
    0,12984,    0,    0,10548, 1328,    0,    0,    0, 1342,
 1293,    0,    0,    0, 1343,    0,  282,    0,    0,    0,
 1253, 1004, 1346,    0,    0, -211,    0,    0,    0,    0,
    0, 1406, 1459,    0,    0,    0,    0,    0,    0, 1350,
 1351,10548,    0,    0,    0,    0,  249,    0,    0,  652,
  652,    0, 1253,    0,    0,    0,  112,  112, 1345, 1355,
    0,    0,    0,    0,    0,    0,17323,17323,    0,    0,
    0,    0,    0,    0,    0,    0, 1352, 1356,17743,    0,
    0,    0,    0, 1354,    0,
  };
  protected static readonly short [] yyRindex = {         3692,
    0,    0, 9299, 3692,    0,    0,    0, 1735,    0,    0,
 3833, 2158,    0,    0,    0,    0,    0, 3833,    0, 1314,
   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1737,    0,    0, 1737,    0,    0, 1737,    0,    0,
 1735, 3880, 3739,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1367,    0,    0,    0,    0,    0,    0,    0,
    0,11185,    0, 1359,    0,    0,    0, 1359,    0,    0,
    0,    0,    0,    0, 2220,    0,    0,    0,    0,    0,
    0,    0,    0,  301,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5840,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6373, 5777,
 4376,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6481, 6661, 7066, 7345,
 1617, 7985, 8129, 8273, 8417, 5065, 1888, 4598,    0,    0,
    0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6553,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3943,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1737,    0,    0,
   66,    0,    0,    0,    0,    0,    0, 3986,  662, 4029,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4636,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1368,    0,    0,    0,    0,    0,    0, 4799,
 1362,    0,    0,    0,    0,    0,    0, 1362,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3121,    0,
   95, 3271,    0,    0,    0,    0,    0,    0,    0, 3421,
    0, 3271,    0,    0,    0,    0,    0, 1367,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1015,    0,    0,
  143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1370, 1990,    0,    0, 1359,
    0, 4636,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  272,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2354,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4761,    0,    0,
    0,    0,    0,    0,    0, 4092, 4139,  650,    0, 1737,
 1737,    0, 9921,   45,    0, 1737, 1743,    0,    0,  158,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  457,19062,    0,
    0,    0,    0, 4636,    0,    0,    0,    0,    0,    0,
    0,    0,19489,    0,    0,    0,    0,    0,    0,    0,
 1364,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  253,  755,    0,    0,  264,  850,    0,    0, 1376,  751,
    0,    0,    0,    0,  228,    0,    0, 5288, 1373,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1381,    0, 2670,    0,    0,  311,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2971,    0,    0,    0,    0,    0,    0,    0,
    0, 1370,    0,    0,    0,18303, 4636,    0,    0,    0,
    0,    0,    0,  265,    0,    0,    0,    0,    0,    0,
18303,    0,    0,    0,    0,    0,    0,   87,    0,  648,
    0,    0,    0, 1379,    0,    0,    0,    0, 1362,    0,
    0,    0,    0, 4473,    0, 4636,    0,    0, 4309,    0,
 4636, 5451,    0,    0,    0,    0,    0, -173,    0,    0,
    0,    0,  279,    0,    0,    0,  922,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 5937, 6046, 6155, 6264,    0, 6733,    0,    0,    0,
    0, 6841,    0, 6913,    0,    0, 7172,    0, 7244,    0,
 7417,    0, 7518,    0, 7590,    0, 7691,    0, 7841,    0,
 7913,    0, 8057,    0, 8201,    0, 8345,    0, 8489,    0,
 5228,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4761,    0,    0,    0,    0,
    0,    0,    0,    0,11805,    0,    0,  927,    0,    0,
 1334,16573,    0,    0,    0,    0,    0,    0,    0,  799,
  701,    0,    0, 1384,    0,    0,    0,    0, 2525,    0,
    0,    0,    0,    0,    0,12110,    0,    0,    0,  929,
    0,    0,    0,11966,19642,    0,    0,  944,  948,  949,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1382,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1392,    0,    0,    0,    0,    0, 7750,    0,    0,    0,
  271,    0,   97, 4962,    0,    0,    0,    0,    0,    0,
    0, 1389,    0,    0,    0,    0,    0, 1396,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2971,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,18303,    0,    0,
    0,    0,    0, 1020,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4636,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1390,    0,
    0,    0,    0, 1393,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -182,    0,  357,    0,
    0,    0,    0,    0,    0,11966,    0,    0,    0,    0,
   45,    0,10082,    0,    0, 1398,    0,  882,    0,    0,
    0,    0, 1402,    0, 1358, 1361,    0,    0,    0,    0,
    0, 1394,17200,    0,    0,    0,    0,19682,    0,    0,
    0,  950,    0,    0,    0,    0,    0, 2841,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5125,    0, 5614, 1404,    0,    0,    0,
    0, 1403,    0,    0,    0,  950,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -153,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1401,    0,    0,    0,
    0,    0, 2493,  746,    0,    0,    0, 1409,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  961,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1407,
    0,    0,    0,    0,    0,  964,  967,    0,    0,    0,
    0,    0,    0,    0, 1410,  922,  716,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5288,    0,    0,    0,    0,    0, 1416,    0,    0,    0,
 1410,    0,    0,    0,    0,18303,    0,    0,    0,  825,
  859,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1384,    0,16408,    0,    0,    0,    0,    0,
19838,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  791,    0,  867,    0,    0,    0,    0, 1413,
    0, 1390,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1418,    0,    0,    0,    0,    0,
    0,    0,18303,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -170,  395,    0,    0,
    0,    0,    0,19881,19489,    0,  545,  624,  471,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -139,    0,    0,
 1381,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,19924,    0,  384,19489,    0,  629,
 1420,    0, 1420,    0,  624,    0,    0,    0,    0,    0,
    0,  891,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,19967,    0,    0,    0,16846,    0,
    0, 1423,    0,    0,    0,  567,    0,  632,    0,    0,
  621,    0,    0, 1420,    0,    0,    0,    0,  897,    0,
    0,    0,    0,    0,    0, 3786, 1417,  688,    0,    0,
  407,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1431,    0,    0,    0,    0,    0,    0,    0,
    0, 3590,    0,    0, 1373,    0,    0,16682,16928,    0,
    0,  465,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  601,    0,    0,    0,19245,    0,    0,16764,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,19313,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,17010,    0,    0,    0,
    0,    0,  465,    0,    0,    0,    0,    0,  143,  457,
    0,    0,    0,    0,    0,    0,  457,    0,    0,16682,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5774,  459,    0, 1799,    0,    0,    0,17052,    0, 3590,
    0,    0,    0,    0,    0,    0,    0, 3590,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   -1,    0,  525,    0,  663,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  709,
    0,  725,    0,    0,    0,    0,    0,    0,    0,19489,
  966,    0,    0,    0,    0,    0,    0,    0, 1424,    0,
  546,    0,    0,    0, 3590,    0,    0,  971,    0,    0,
    0,    0,    0,    0,    0,    0, 1425,    0,19489,19489,
    0,    0,19529,    0,    0,    0,    0,    0,    0,    0,
    0, 1426, 2200,    0, 1427,19489,18443, 1430,19489,    0,
    0,    0,    0,    0,    0, 1433,    0,    0,    0,20047,
    0,    0,    0,19489,    0,    0,    0, 1435,    0,    0,
  332,    0, 1767,12714,    0,    0,    0, 1436,    0,    0,
    0,    0,    0,    0, 1437,    0,    0,19489,    0,  694,
    0,  983,    0,    0,    0,    0,    0, 1026,    0,18984,
20009,    0,    0,    0,    0,    0,    0,    0,    0, 1485,
    0, 1541,    0,    0,    0,  989,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  622,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,20047,    0,    0,12444,
12579,    0,  622,    0,    0,    0,    0,    0,16318,    0,
    0,    0,    0,    0,    0,    0, 1373, 1373,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1758,    0,    0,    0,    4,  -14, -184,  -47,  -43,
    0, 1808, 1806,  869,    0,    0, -168,    0,    0,    0,
    0,    0,    0,-1285, -793, -222, -627,    0,    0,    0,
    0,    0, -229,    0,    0,    0,  744,    0,  872,    0,
    0,    0,    0,  580,  582,  -17, -221,    0,  -46,    0,
    0,  813,  379,    0,  426, -685, -649, -584, -581, -560,
 -525, -520, -514,    0,    0,-1190,    0,-1292,    0,  375,
-1297,    0,   78,    0,    0,    0,  536,-1243,    0,    0,
    0,  431,  209,    0,    0,    0,  248,-1197,    0, -279,
 -305, -332,    0,    0,    0,-1002,  194,    0,    0, -537,
    0,    0,  261,    0,    0,  234,    0,    0,  339,    0,
 -529,-1137,    0,    0,    0,    0,    0, -483,  274,-1439,
  -10,    0,    0,    0,  863,  866,  875, 1062, -567,    0,
    0, -334,  883,  368,    0, -896,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  176,
    0,    0,    0,    0,    0,    0,    0,    0,  433,    0,
    0,    0, -306,  361,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  444,    0, -539,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  183,    0,    0,  268,    0,
    0,  277,  281,  181,    0,    0,    0,    0,    0,    0,
    0,    0,  517,    0,    0,    0,    0,  -84,    0,  337,
 -367, -359, 1446,    0,  341,    0, -449,    0,  924,    0,
 1558, 1173, -304, -277,  -83,  201,  868,    0,  526,    0,
  -41,  854, -398,    0,    0, -387,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -364,    0,    0,    0,    0,
    0,    0, -264,    0,    0, 1299,    0,    0,   39,    0,
 -362,    0, -278,    0,    0,    0,  884, -941, -319, -135,
 1067,    0,  968,    0, 1258, -583,   38, -343, 1112,    0,
    0,  758, 1819,    0,    0,    0,    0, 1082,    0,    0,
    0, 1544,    0,    0,    0,    0,    0, 1503,  973,  974,
 1474, -124, 1475,    0,    0,    0,    0,  745,   29,    0,
  740,  858,  977, 1470, 1472, 1473, 1471, 1477,    0, 1479,
    0,    0,    0, 1023, 1332, -577,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -309,  671,    0, -886,
    0,    0,    0,    0,    0, -479,    0,  611,    0,  473,
    0,    0,    0,  727, -575,  -15, -348,  -11,    0, 1778,
    0,   62,    0,   75,  101,  111,  124,  127,  167,  171,
  173,  175,  180,    0, -762,    0,    0,    0,  829,    0,
  747,    0,    0,    0,  718, -328,  806, -972,    0,  848,
 -499,    0,    0,    0,    0,    0,    0,  736,    0,  733,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  653,    0,    0,    0,
    0,    0,    0,    0,    0,  -30,    0, 1387,  686,    0,
    0,    0,    0,  937,    0,    0,    0,    0,    0,    0,
 -177,    0,    0,    0,    0,    0, 1501, 1223,    0,    0,
    0,    0, 1505,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  527,    0,    0,    0,    0,    0,    0,    0,
    0,  664,    0,    0,    0,    0,    0,    0,   17, 1028,
    0,    0,    0, 1029,
  };
  protected static readonly short [] yyTable = {           112,
  552,  163,  555,  196,  239,  164,  114,   18,  240,  831,
  502,  466,  607,  837,  569,  481,  524,  465,  265,  774,
  577,  797,  300,  683,  632,  587,  550,  548,  880,  440,
  469,  506,  633,  881,  684,  396,  404,  405,  536, 1150,
  653,  333,  343,  988, 1008,  989,  350,  319,  258, 1333,
 1085,  622, 1297, 1125,  885,  892,  311,  685,  644,  954,
  318,  233,  584,  909,  235,  383,  255,  757,  392,  320,
 1381,  323, 1212, 1069, 1153,  915, 1211,  358,  168,  623,
  362,  805,  745,   44,  255, 1072, 1387, 1552, 1212, 1015,
 1360,  169, 1017,  758, 1395,  322, 1320,  266,  406, 1440,
  269,  802,  522, 1369,  293,  294,  295, 1286,  301,  302,
   14, 1192,  322,  315,  316,  477,  877,  170, 1447,  321,
  324,  544,  326,  256,  330,  759,  986,  171,  915,  346,
  347, 1471,  437, 1341,  767, 1194,  775,   16, 1507, 1509,
  172,  917, 1444,  173,  438,  267, 1455,  112,  239,  163,
 1324,    1,  467,  164,  114,  750, 1069,    6,  403, 1677,
 1320, 1069,   97, 1069,  987,  724, 1069, 1069, 1072, 1069,
 1069, 1472,  257, 1072, 1515, 1072,  943,  878, 1072, 1072,
  506, 1072, 1072,  174, 1503,  256, 1306,  175, 1140,  176,
  480,  177, 1505, 1560,  467, 1069,  178,  916,  380,   97,
  745,  806,  745,  256,  745,  504,  507, 1072,  298, 1396,
   97,  237,   43,  927,  256,  859, 1678,  118,  298,  511,
  522,  381,  522,  860,  522,  823,  168, 1153,  382,  873,
 1213,  256,  915,  760,  257,  505,  545,  502,  546,  169,
  256,  510,  829,  481,  472,  576, 1213,  579,  580, 1559,
 1069,  265,  257,    2,  373,  607,  535,  622,  396,  745,
  118,  265, 1072,  257,  118,  170, 1264,  299,  894,  268,
  918,  990,  237,  898,  900,  171,   15,  299,  523,  522,
  257,  899,  607,  527,  529,  623,  915,  582,  172,  257,
 1025,  173,  547, 1628,  896,  843, 1366,  586,  559,  324,
  768, 1195,   20,  403, 1508, 1510,  572, 1085,  574,  597,
  761,  478,  527, 1000,  573,  623,  976, 1114, 1166, 1035,
 1652,  383, 1561,    3,    4,    5,    6,  298,  589,  590,
  520,  174, 1662,  348, 1663,  175,  928,  176,   53,  177,
 1516,  373,  397,  549,  178,  606,  869,  636,  997,  608,
   53,  641, 1085,  296, 1304,  507,  507, 1207, 1376,  630,
 1292,  297,  947,  575,  303,  118,  304, 1699, 1353,  373,
 1523, 1646,  629,  373,  948,  368,  129,  807,  129, 1240,
  265,  839, 1545,  129,  505,  650,  299, 1624,  867,  658,
  659,  660,  661,  662,  663,  664,  665,  666,  667,  668,
  200,  726,  728, 1328,  383,  732, 1104, 1673,  383,  998,
  944, 1578, 1579, 1167,    6, 1581,  506,  373,  239,  298,
 1367,  723,  467,  841,  337,  337,  751,  446, 1600,  767,
  752, 1607,  851,  237,  767, 1001,  383,  623,  767, 1696,
  383, 1258,  383,  383,  383,  383, 1623,  337,  298,  397,
  383,  368,  854,  767,  609,  996, 1485,  368, 1112,  686,
  397,   97,  397,  569,  397,  901,   53,  368, 1085, 1135,
 1645,  368,  782,  794, 1085,  803, 1590, 1305,  299,  349,
  767, 1377,   97,  981,  368, 1118,  742,  743, 1018, 1524,
 1354, 1700,  755,  118, 1647,    2, 1019,  808, 1530,  767,
 1303,  840,  507,  792, 1617,  197,  421,  299,  397, 1309,
  447,  610,  389, 1483,  812,  448,  368,  449,  334,  344,
  450,  451,  502,  452,  453,  683,  118, 1033,  853,  826,
   20,  650, 1659,  835,  379,  337,  684, 1669, 1336,  337,
  337,  388,  422,  842,  298, 1670,  536, 1038,  515,  298,
  380,  622,  852,  846,  793,  502,  506,  783,  796,  685,
  390,  118, 1484,  857,  444,  446,  868,  861, 1225,   49,
  198,  942,  855,  381,  884,  812, 1199,  203, 1113,  623,
  874,  734,  358,  902, 1660,  870,  380,  778,  606,  237,
  895,  507,  608,  237,  767, 1531,  204,  404,  405,  490,
  870,  844,  517,  634,  454,  337, 1671,  770,  639,  381,
  518,  771, 1063,  635,  868,  606,  382,  445,  640,  608,
  505,  237,  118,  383,  868,  391,  423,  424,  904,  904,
  868,  337,  516,  470,  471,  560,  813,  868, 1102,  843,
  925,  560,  491,  337,  912, 1273,  767,  504,  447,  256,
 1065,  337,  229,  448,  505,  449,  563,  337,  450,  451,
  490,  452,  453,  519,  447, 1097,  637,  623,  237,  448,
 1486,  449,  772,  847,  450,  451,   55,  452,  453,  868,
  931,  823,  933,  907,  907,  868,  390, 1002,  337,  337,
  270,  941,  880, 1418, 1040, 1063,  560,  813,  257,  512,
 1063,  913, 1063,  491,  504, 1063, 1063,  826, 1063, 1063,
  964,  505,  826,  826,  251,  937,  638,  337,  252, 1487,
 1059,  118,  337, 1654, 1655,  522, 1130, 1134,  765, 1419,
  766,  507,  390, 1065,  965,  562,  446,  555, 1065,  250,
 1065, 1418,  464, 1065, 1065,  558, 1065, 1065,  563,  983,
 1398, 1417,  765,  882,  766,  344,  683,  337,  735,  683,
  505,  966,  683,  578,  535,  564,  741,  684,  253,  265,
  684,  507, 1398,  684, 1106,  527,  254, 1419,  346,  765,
 1690,  766,  594,  595,  337,  337, 1200,  761,  393, 1063,
  685,  835,   97,  685, 1420,  883,  685, 1421,  826, 1417,
  650,  383,  797, 1059,  118,   53,  237, 1203, 1059,  751,
 1059,  613, 1200, 1059, 1059,  337, 1059, 1059, 1422,  447,
  951,  327, 1398,  393,  448,  829,  449, 1065,   53,  450,
  451,  118,  452,  453, 1013, 1388, 1014,  327, 1030,  397,
 1020,  751, 1420,  394, 1021, 1421,  118,  118,  963,  751,
  256,  676,  398, 1423, 1026, 1023,  327,  870, 1424, 1180,
 1036,  433,  952,  507, 1425, 1158, 1422,  375,  607,  507,
  121,  399,  400,   45, 1251,  434, 1050,  578,  727,  729,
 1073,  380,  265,  754,  119,  362, 1252, 1139,  383,  201,
 1124,  401,  650,  379, 1171,  375, 1005, 1059,  650,  257,
  835, 1423,  402,  751,  381,  788, 1424,  752,  379,  761,
 1062,  382, 1425,  121,  740,  754,  383,  121,  383,  607,
  383,  201,  368,  383,  380,  383,  393,  119,  337, 1159,
  383,  119, 1265,  767,  229,  995,  232,  788,  767,  794,
  907,  788,  767,  794, 1097,  380,  578,  381, 1471,  380,
 1241,  826, 1511,  523,  382,  342,  342,  767,  337,  327,
  380,  686,  786,  791,  790,  925, 1525,  756,  381, 1119,
  757,  794,  381, 1300, 1121,  382,   97, 1121,  342,  382,
  794, 1496,  383,  381,  767, 1472,  383,  826, 1543,  835,
  382,  791,  790, 1496,  786,  393,  435,  383, 1151,  756,
  791,  790,  757,  767,  368,  211,  118,  925,  118,  923,
  368,  425,  426,  924,  607, 1500,  774,  337,  121, 1335,
  368, 1180,   97,  718,  368,  718,  368, 1500,  327,  368,
  380, 1386,  119,  206,  507, 1611, 1259,  368, 1085,  615,
 1260,  973,  615,  345, 1261,  826,  616,  826, 1138,  616,
  826, 1189,  118,  381,  436,  118, 1156, 1193,  617,  349,
  382,  617, 1157, 1179,  296,  349,  439,  427,  428,  368,
  342,  342,  350,  296,   71,   71,  337,  381,   71,  373,
  337,  429,  430,  373,  382,  368,  373,  947,  373,  502,
  607,  947,  481,  373,  967,  947,  835, 1664,  304,  527,
 1315,  968,  306,  118,  306, 1435,  337, 1465,  541,  306,
 1050,  922,  542,  265, 1477,  474,  265,  987,  368,  265,
 1219,  987,  555,  987,  118, 1522,  867,  373,  555,  368,
 1226,  368,  867, 1468, 1686,  870,  342,  777,  468,  867,
 1468,  778, 1522,  476,  813,  826,  121,  826,  814,  826,
  368,  368, 1237,  348,  555,  824,  503, 1707, 1708,  542,
  119, 1554,  342, 1555,  186, 1186,  186, 1187,  186, 1188,
  368,  356,  368,  368,  342,  368,  368,   64,  368,  121,
  337,  368,  342, 1229, 1244, 1004, 1231,  867,  342, 1005,
 1121,  551,  686,  119,  523,  686,  507,  525,  686,  337,
  893,  606,  893, 1034,  893,  608,  229,  778,  234, 1274,
  835, 1126,  870,  449,  121,  916,  431,  432,  337,  342,
  342,  561,  337,  526,  449, 1179,  449,  561,  119, 1285,
  556, 1149,  523,  916,  882,  523,  882,  239,  882, 1318,
  199,  467,  199, 1319,  199,  449,  449, 1288,  342,  557,
 1361, 1289,  606,  342, 1362,   72,  608,  394,  826,   72,
  339,  339,  949,  560, 1314,  449,  949,  239,  951,  501,
  237,  467,  951,  449, 1012,  682,  449,  581, 1242, 1097,
 1243,  523,  561,  339,  701,  703,  705,  707,  342,  119,
  598,  599,  337, 1022,  826, 1237,  418,  419,  420,  873,
 1106,  873, 1106, 1318,  600,  601,  884, 1319,  884,  561,
  337,  337, 1029, 1069, 1070,  342,  342,  174,  585,  174,
  118,  181,  182,  181,  182, 1014,  583, 1014,  507,  593,
 1397, 1416, 1278, 1279, 1319,  752,   74,  205,   74,  205,
  175,  482,  175,  134,  627,  134,  826,  606,  312,  628,
  312,  608, 1397, 1349,  237,  118, 1319,  650,  118,  642,
  141,  118,  141,  756,  483,  826,  319,  523,  319,  381,
  474, 1674, 1675,  738,  121,  339,  339,  484,  337, 1416,
  459,  459,  486,  752, 1451,  460,  460,  487,  119,  488,
  489,  490,  491,  767,  767,  692,  694,  492,  697,  699,
  776,  493, 1397, 1713,  118, 1105, 1319,  709,  711,  381,
  779,  781,  804,  494,  337,  809,  495,  118,  496,  810,
  811,  849,  337,  606,  407,  812,  850,  608,  856,  858,
  862,  863, 1476,  864,  865,  890,  887,  886,  911,  910,
  893,  339,  497,  891,  897,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  930,  932,  121,  936,  342,
  387,  945,  946,  118,  578,  955,  956,  339,  118,  959,
   43,  119,  118,  977,  971,  984,  978,  979,  980,  554,
  985, 1003,  200, 1006,  121, 1009, 1534,  339,  916,  342,
 1476, 1007, 1024, 1028, 1027, 1032, 1045, 1049,  119,  121,
  121,  118, 1510, 1064, 1066, 1071, 1080, 1086, 1081, 1084,
 1089, 1091, 1075,  119,  119, 1591, 1184, 1098, 1083,  752,
 1110, 1111, 1114, 1120,  339,  339, 1129,  545, 1144, 1136,
 1143, 1147, 1618,  338,  338, 1148,  752,  929, 1152, 1155,
 1160, 1161,  934,  935, 1172, 1630, 1632, 1190,  342,  752,
  752, 1182, 1196,  339, 1206,  835,  338, 1198, 1197, 1220,
 1476, 1209, 1222,  118, 1224, 1234, 1208,  523, 1227, 1228,
 1246, 1254, 1618, 1618, 1250, 1253,  752,  752, 1255, 1256,
 1266, 1270, 1277, 1289, 1640, 1280, 1281, 1317, 1288, 1298,
 1310, 1329, 1341,  339, 1343, 1346,  357, 1348, 1351, 1365,
 1352, 1355,  364,  366,  368,  370,  372,  374,  376,  378,
 1356,  342, 1370, 1385, 1372, 1378, 1379,  835, 1386, 1429,
  339,  339, 1430, 1431, 1437,  337, 1488, 1434, 1502, 1618,
 1441, 1438, 1436,  752, 1448, 1453, 1519,  342, 1506,  118,
 1540, 1529, 1528, 1520,  338, 1537, 1539, 1531,  338,  338,
  507,  507, 1542, 1510,  835, 1544, 1548, 1546, 1550,  121,
 1471,  121, 1551, 1557, 1558, 1567, 1564, 1582, 1570, 1692,
 1692, 1571, 1572,  119, 1583,  119, 1701, 1701, 1574,  650,
  650, 1586, 1596, 1601,  567, 1603, 1613, 1615, 1616, 1626,
  337, 1712, 1622,   24, 1637,   25, 1639, 1612,   26, 1642,
 1625, 1644, 1657,   27, 1636,  121, 1650,   28,  121, 1641,
 1661,  342, 1665,  337,  338, 1666,   30, 1676, 1668,  119,
 1660, 1659,  119,   32, 1684, 1685, 1706, 1710,   33, 1704,
  342, 1711,   34, 1715,    9,   21, 1102,  593,  979,  553,
  338,  980, 1094,  942,   36,  720,   37,  554,  504,  342,
   38,  995,  338,  342,  721,  802,  121,   35,   39,   40,
  338,  946,   41,  552,  505,  568,  338,   35,  656,  876,
  119,   36,  341,  886,  337,   36,  337,  682,  987,  235,
  877, 1094,  109,  337,  657,  878,  887,  910,  879,  911,
  790,  119,  337,  337,  345,  337,  790,  338,  338,  767,
  368, 1499,  812,  767,  137,  119,  315, 1392,  236,  144,
   21,  357,  138, 1499,  120,  316,  145, 1132, 1499,   54,
  337, 1173, 1283,  337, 1284, 1442,  338, 1079, 1479, 1480,
 1334,  338, 1499, 1658, 1667, 1627, 1614,  612, 1643, 1532,
 1107,  342,  342, 1108, 1609,  974,   24,  588,   25, 1512,
  387,   26, 1109,  339, 1499, 1103,   27,  357, 1446, 1449,
   28, 1694, 1533, 1703, 1695, 1638,  338, 1373, 1392,   30,
 1633, 1556,  676, 1631, 1076, 1162,   32, 1164,  570, 1374,
 1169,   33,  994, 1041, 1128,   34, 1481, 1482, 1210,  970,
  306,  591,  991,  338,  338,  687,  688,   36,  876,   37,
 1232, 1230,  713,   38,  908,  715,  719,  717, 1031,  342,
 1454,   39,   40,  721, 1514,   41,  722, 1517,   85, 1296,
  670,  672,  674,  867,  338,  588,  588,  588,  588,  588,
  588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
  588, 1358,  441, 1268, 1202, 1275, 1221, 1191, 1257, 1269,
 1267,  848, 1141,  342, 1339,  676, 1307,  736,  940, 1452,
  676,  737,  676,  676,  676,  676,  676,  676,  676,  676,
  676,  676,  676,  121, 1074, 1233, 1345, 1235,    0, 1236,
 1077,    0,  676,  676,    0,    0,    0,  119,  676,  368,
  676,    0,  676,    0,  676,  676,  676,    0,    0,    0,
    0,    0,    0,  387,  676,  676,    0,    0,  682,  676,
  676,  682,    0,    0,  682,    0,  339,    0,  676,  676,
  676,  676,  119,    0,    0,  119,    0,   53,  119,    0,
    0,    0,    0,  676,    0,  339,    0,  338,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  588,    0,  676,
   53,    0,    0,    0,  339,    0,    0,  121,    0,  368,
    0,    0,    0,   53,    0,    0,    0,  338,   53,    0,
  121,  119,    0,   53,    0,   53,   53,   53,   53,    0,
    0,   53,  368,   53,  119,    0,    0,   53, 1311,    0,
    0,    0,    0,    0,    0,  368,    0,    0,    0,   53,
  368,    0,   53,  368,   53,  368,    0,  368,  368,  368,
  368,    0,    0,    0,    0,  368,  121,    0,    0,  368,
    0,  121,    0,  368, 1344,  121,  338,    0,   53,  889,
  119,  368,    0,    0,  368,  119,  368,    0,  326,  119,
    0,    0,    0,  696,    0,    0,    0,  339,    0,    0,
    0,    0,    0,    0,  121,  368,  342,   40,    0,    0,
  368,    0,    0,    0,    0,    0,    0,    0,  119,    0,
  368,  368,    0,  291,    0,  368, 1382,    0,    0,    0,
  920,  921,    0,    0,    0,  338,    0,    0,  368,  338,
    0,    0,    0,    0,    0, 1433,    0,    0,  357,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  554,  338,  121,    0,    0,  403,
  368,  342,    0,    0,    0,    0,  696,    0,    0,    0,
  119,  696,    0,  696,  696,  696,  696,  696,  696,  696,
  696,  696,  696,  696,  342,  368,    0,    0,    0,    0,
    0,  368,    0,  696,  696,    0,    0,    0,  339,  696,
    0,  696,    0,  696,    0,  696,  696,  696,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  696,    0,    0,    0,    0,    0,  368,    0,  338,
    0,    0,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  342,  119,  342,  338,    0,
    0,    0,    0,    0,  342,    0,    0,  357,    0,    0,
  696,    0,    0,  342,  342,    0,  342,  338,  368,    0,
    0,  338,  368,  368,    0,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,    0,    0,    0,
    0,  342,  368,  565,  342,  368,  368,    0,    0,    0,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
    0,  368,  368,    0,    0,  368,  368,  368,  368,  368,
    0,    0,  368,  368,    0,    0,    0,  368,  368,  368,
  368,  368,  368,  368,  368,    0,    0,    0,    0,    0,
    0,  338,    0,    0,    0,    0,  368,    0,    0,  368,
    0,  368,    0,  368,   40,    0,  368,    0,   40,  338,
  338,    0,  368,    0,    0,    0,    0,    0,    0,   40,
    0,    0,    0,    0,   40,    0,    0,    0,   40,    0,
    0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   40,   40,    0,    0,    0,   40,   40,
   53,  339,   53,    0,   40,    0,   40,   40,   40,   40,
    0,    0,    0,    0,   40,  403,    0,    0,   40,    0,
   40,  403,    0,   53,    0,    0,    0,  338,    0,    0,
   40,    0,   40,   40,    0,   40,   53,    0,    0,   40,
    0,   53,    0,  588,    0,    0,   53,    0,   53,   53,
   53,   53,    0,    0,   53,    0,   53,  403,    0,   40,
   53,    0,    0,  338,   26,    0,  339,    0,    0,   40,
   40,  338,   53,    0,    0,   53,    0,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  339,
    0, 1154,    0,    0,    0,    0,    0,    0,  403,    0,
    0,   53,  403,  403,    0,  403,  403,  403,  403,  403,
  403,  403,  403,  403,  403,  403,    0,    0,    0,    0,
    0,    0,  403,    0,    0,  403,  403,    0,    0,    0,
  403,  403,  403,  403,  403,  403,    0,  403,  403,  403,
    0,  403,  403,    0,    0,  403,  403,  403,  403,  565,
  339,    0,  403,  403,  565,  565,    0,  403,  403,  403,
  403,  403,  403,  403,  403,    0,    0,    0,  339,  339,
    0,  554,    0,    0,    0,    0,  403,  565,    0,  403,
    0,  403,    0,  403,    0,    0,  403,    0,    0,    0,
  565,  565,  403,    0,    0,  565,  339,    0,  565,  339,
  565,    0,  565,  565,  565,  565,    0,    0,    0,  981,
  565,    0,    0,    0,  565,    0,    0,    0,  565,    0,
    0,    0,    0,    0,    0,    0,  565,    0,    0,  565,
    0,  565,  565,    0,    0,    0,  565,  565,    0,  565,
  565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
    0,    0,    0,    0,    0,  565,  565,  565,    0,  565,
  565,    0,    0,    0,  565,  565,    0,  565,  565,  565,
  565,  565,  565,  565,  338,  565,  565,    0,  565,  565,
  565,  565,  565,  565,  565,  565,  565,  565,    0,  565,
  565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
  565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
  565,    0,    0,  565,    0,  565,    0,  565,    0,    0,
  565,   26,    0,    0,    0,   26,  565,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   26,    0,    0,  338,
    0,   26,    0,    0,    0,   26,    0,    0,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   26,   26,  338,    0,    0,   26,   26,    0,    0,    0,
    0,   26,    0,   26,   26,   26,   26,    0,    0,    0,
  904,   26,    0,    0,    0,   26,    0,   26,    0,  368,
    0,    0,    0,    0,    0,  368,  368,   26,    0,    0,
   26,    0,   26,  368,    0,  368,   26,  368,  368,  368,
  368,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  368,  338,    0,  338,   26,    0,  368,  368,
    0,    0,  338,    0,    0,   23,   26,   26,    0,    0,
    0,  338,  338,    0,  338,    0,    0,    0,  368,    0,
    0,    0,    0,    0,  368,    0,  368,    0,    0,  368,
    0,    0,    0,    0,    0,  981,  981,    0,    0,  338,
    0,    0,  338,  981,  981,  981,  981,  981,    0,  981,
  981,    0,  981,  981,  981,  981,  981,  981,  981,  981,
    0,    0,    0,    0,  981,    0,  981,  981,  981,  981,
  981,  981,    0,    0,  981,    0,    0,    0,  981,  981,
  368,  981,  981,  981,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  981,    0,  981,    0,  981,  981,    0,
    0,  981,    0,  981,  981,  981,  981,  981,  981,  981,
  981,  981,  981,  981,  981,    0,  981,    0,    0,  981,
  981,    0,    0,  981,  981,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  981,  981,
  981,  981,  981,    0,    0,  981,  981,    0,    0,    0,
  981,  981,    0,    0,  981,    0,    0,    0,    0,  981,
  981,  981,  981,  981,    0,    0,    0,  981,    0,  981,
    0,    0,    0,    0,    0,  981,  981,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  981,  981,  981,  981,    0,  981,  904,  904,    0,    0,
    0,    0,  981,    0,  904,  904,  904,  904,  904,    0,
  904,  904,    0,  904,  904,  904,  904,  904,  904,  904,
  864,    0,    0,    0,    0,  904,    0,  904,  904,  904,
  904,  904,  904,    0,    0,  904,    0,    0,    0,  904,
  904,    0,  904,  904,  904,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  904,    0,  904,    0,  904,  904,
    0,    0,  904,    0,  904,  904,  904,  904,  904,  904,
  904,  904,  904,  904,  904,  904,    0,  904,    0,    0,
  904,  904,    0,    0,  904,  904,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  904,
  904,  904,  904,  904,    0,    0,  904,  904,    0,    0,
    0,  904,  904,    0,    0,  904,    0,    0,    0,    0,
  904,  904,  904,  904,  904,    0,  368,    0,  904,    0,
  904,  368,  368,    0,    0,    0,  904,  904,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  368,    0,    0,    0,    0,    0,
    0,  904,  904,  904,  904,    0,  904,  368,  368,    0,
  358,    0,  368,  904,    0,  368,    0,  368,    0,  368,
  368,  368,  368,    0,    0,    0,    0,  368,    0,    0,
    0,  368,    0,    0,    0,  368,    0,    0,    0,    0,
    0,    0,    0,  368,    0,    0,  368,    0,  368,  368,
    0,    0,    0,  368,  368,    0,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,    0,    0,
    0,    0,  368,  368,    0,    0,  368,  368,    0,    0,
    0,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,    0,  368,  368,    0,    0,  368,  368,  368,  368,
  368,    0,    0,  368,  368,    0,    0,    0,  368,  368,
  368,  368,  368,  368,  368,  368,  864,    0,    0,    0,
    0,  864,  864,    0,    0,    0,    0,  368,    0,    0,
  368,    0,  368,    0,  368,    0,    0,  368,    0,    0,
    0,    0,    0,  368,  864,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  864,  864,    0,
  398,    0,  864,    0,    0,  864,    0,  864,    0,  864,
  864,  864,  864,    0,    0,    0,    0,  864,    0,    0,
    0,  864,    0,    0,    0,  864,    0,    0,    0,    0,
    0,    0,    0,  864,    0,    0,  864,    0,  864,  864,
    0,    0,    0,  864,  864,    0,  864,  864,  864,  864,
  864,  864,  864,  864,  864,  864,  864,    0,    0,    0,
    0,    0,  864,  864,    0,    0,  864,  864,    0,    0,
    0,  864,  864,  864,  864,  864,  864,    0,  864,  864,
  864,    0,  864,  864,    0,    0,  864,  864,  864,  864,
    0,    0,    0,  864,  864,    0,    0,    0,  864,  864,
  864,  864,  864,  864,  864,  864,  358,    0,    0,    0,
    0,  358,  358,    0,    0,    0,    0,  864,    0,    0,
  864,    0,  864,    0,  864,    0,    0,  864,    0,    0,
    0,    0,    0,  864,  358,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  358,  358,    0,
    0,    0,  358,    0,    0,  358,    0,  358,    0,  358,
  358,  358,  358,    0,    0,    0,    0,  358,    0,   33,
    0,  358,    0,    0,    0,  358,    0,    0,    0,    0,
    0,    0,    0,  358,    0,    0,  358,    0,  358,  358,
    0,    0,    0,  358,  358,    0,  358,  358,  358,  358,
  358,  358,  358,  358,  358,  358,  358,    0,    0,    0,
    0,    0,  358,  358,    0,    0,  358,  358,    0,    0,
    0,  358,  358,  358,  358,  358,  358,    0,  358,  358,
  358,    0,  358,  358,    0,    0,  358,  358,  358,  358,
    0,    0,    0,  358,  358,    0,    0,    0,  358,  358,
  358,  358,  358,  358,  358,  358,  398,    0,    0,    0,
    0,  398,  398,    0,    0,    0,    0,  358,    0,    0,
  358,   39,  358,    0,  358,    0,    0,  358,    0,    0,
    0,    0,    0,  358,  398,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  398,  398,    0,
    0,    0,  398,    0,    0,  398,    0,  398,    0,  398,
  398,  398,  398,    0,    0,    0,    0,  398,   38,    0,
    0,  398,    0,    0,    0,  398,    0,    0,    0,    0,
    0,    0,    0,  398,    0,    0,  398,    0,  398,  398,
    0,    0,    0,  398,  398,    0,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,    0,    0,    0,
    0,    0,  398,  398,    0,   27,  398,  398,    0,    0,
    0,  398,  398,    0,  398,  398,  398,    0,  398,  398,
  398,    0,  398,  398,    0,    0,  398,  398,  398,  398,
    0,    0,    0,  398,  398,    0,    0,    0,  398,  398,
  398,  398,  398,  398,  398,  398,    0,    0,    0,    0,
    0,    0,   37,    0,    0,    0,    0,  398,    0,    0,
  398,    0,  398,    0,    0,   33,   33,    0,    0,    0,
   33,    0,    0,  398,   33,    0,   33,    0,    0,   33,
    0,   33,   33,    0,   33,    0,   33,    0,   33,    0,
   33,   33,   33,   33,    0,    0,   33,   33,    0,    5,
    0,    0,   33,    0,   33,   33,   33,    0,    0,   33,
   33,   33,    0,   33,    0,    0,   33,    0,   33,   33,
   33,   33,    0,    0,    0,   33,   33,   33,    0,    0,
   33,   33,   33,    0,    0,    0,    0,    0,    0,   33,
   33,    0,   33,   33,    0,   33,   33,   33,    0,    0,
    0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1083,    0,    0,    0,    0,    0,   39,    0,
    0,   33,   39,    0,    0,    0,    0,    0,    0,    0,
   33,   33,   33,   39,    0,    0,    0,    0,   39,    0,
   33,    0,   39,    0,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   53,    0,   39,   39,    0,
    0,    0,   39,   39,    0,   38,    0,    0,   39,   38,
   39,   39,   39,   39,    0,    0,    0,    0,   39,    0,
   38,   33,   39,    0,   39,   38,    0,    0,    0,   38,
    0,    0,   38,    0,   39,    0,   39,   39,    7,   39,
    0,    0,    0,   39,   38,   38,    0,    0,    0,   38,
   38,    0,   27,    0,    0,   38,   27,   38,   38,   38,
   38,    0,    0,   39,    0,   38,    0,   27,    0,   38,
    0,   38,   27,    0,   39,    0,   27,    0,    0,   27,
    0,   38,    0,    0,   38,    0,   38,    0,    0,    0,
   38,   27,   27,    0,    0,    0,   27,   27,    0,   37,
    0, 1084,   27,   37,   27,   27,   27,   27,    0,    0,
   38,    0,   27,    0,   37,    0,   27,    0,   27,   37,
   38,   38,    0,   37,    0,    0,   37,    0,   27,    0,
    0,   27,    0,   27,    0,    0,    0,   27,   37,   37,
    0,    0,    0,   37,   37,    0,    5,    0,   54,   37,
   53,   37,   37,   37,   37,    0,    0,   27,    0,   37,
    0,   53,    0,   37,    0,   37,   53,   27,   27,    0,
   53,    0,    0,   53,    0,   37,    0,    0,   37,    0,
   37,    0,    0,    0,   37,   53,   53,    0,    0,    0,
   53,   53,    0,    0,    0,    0,   53,    0,   53,   53,
   53,   53,    0,    0,   37,    0,   53,    0,    0, 1083,
   53,    0,   53,   53,    0,   37,    0,    0,    0,    0,
    0,    0,   53,    0,   53,   53,    0,   53,    0,   53,
    0,   53,    0,   53,    0,    0,   53,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   53,   53,
    0,   53,   53,   53,   53,    0,   53,    0,    0,   53,
    0,   53,   53,   53,   53,    0,    0,   53,    0,   53,
    0,    0,   53,   53,    0,   53,   53,    0,    0,   53,
    0,    0,    0,    0,    0,   53,    0,    0,   53,    0,
   53,   53,   53,    0,   53,    7,   53,   53,    0,   54,
    0,    0,   53,    0,   53,   53,   53,   53,    0,    0,
   54,    0,   53,    0,   53,   54,   53,    0,   53,   54,
    0,    0,   54,    0,    0,    0,    0,    0,   53,    0,
    0,   53,    0,   53,   54,   54,    0,   53,    0,   54,
   54,    0,    0,    0,    0,   54,    0,   54,   54,   54,
   54,    0,    0,    0,    0,   54,    0,   53, 1084,   54,
    0,   54,   53,    0,    0,    0,    0,    0,    0,    0,
    0,   54,    0,   53,   54,    0,   54,    0,   53,    0,
   54,    0,   53,    0,    0,   53,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   53,   53,    0,
   54,    0,   53,   53,    0,   54,    0,    0,   53,   54,
   53,   53,   53,   53,    0,    0,    0,    0,   53,    0,
   54,    0,   53,    0,   53,   54,    0,    0,    0,   54,
    0,    0,   54,    0,   53,    0,    0,   53,    0,   53,
    0,    0,    0,   53,   54,   54,    0,    0,    0,   54,
   54,    0,    0,    0,    0,   54,    0,   54,   54,   54,
   54,    0,    0,   53,    0,   54,    0,    0,    0,   54,
    0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,    0,   56,   54,    0,   54,    0,    0,    0,
   54,   57,   24,   58,   25,    0,    0,   26,   59,    0,
   60,   61,   27,   62,   63,   64,   28,    0,    0,    0,
   54,    0,   65,    0,   66,   30,   67,   68,   69,   70,
    0,    0,   32,    0,    0,    0,   71,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   74,    0,   36,    0,   37,   75,    0,    0,   38,
    0,   76,   77,   78,   79,   80,   81,   39,   40,   82,
   83,   41,   84,    0,   85,    0,    0,   86,   87,    0,
    0,   88,   89,    0,  867,    0,    0,    0,    0,    0,
  867,    0,    0,    0,    0,    0,   90,   91,   92,   93,
   94,    0,    0,   95,   96,    0,    0,    0,   97,    0,
    0,    0,   98,    0,    0,    0,    0,   99,  100,  101,
  102,  103,    0,    0,    0,  104,  867,  105,    0,    0,
    0,    0,    0,  106,  107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  426,    0,    0,    0,    0,    0,  426,  108,  109,
  110,  111,    0,    0,    0,    0,    0,  867,    0,    0,
  200,    0,  867,    0,  867,  867,  867,  867,  867,  867,
  867,  867,  867,  867,  867,  867,    0,    0,    0,    0,
    0,  867,  867,  426,  867,  867,    0,    0,    0,  867,
  867,  867,  867,  867,  867,  867,  867,  867,  867,    0,
  867,  867,    0,  867,  867,  867,  867,  867,  867,  867,
  867,  867,  867,    0,  867,  867,  867,  867,  867,  867,
  867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
  867,  867,  867,  867,  867,  867,  867,    0,  867,    0,
  867,    0,  867,  867,  867,  867,    0,    0,  358,  426,
    0,  867,    0,    0,    0,    0,    0,  426,  358,  426,
  426,  426,  426,  426,    0,  426,    0,  426,  426,    0,
  426,  426,  426,  426,  426,    0,  426,  426,  426,  426,
  867,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
  426,  426,  426,    0,    0,    0,    0,  358,    0,  426,
    0,    0,  426,    0,    0,    0,    0,    0,  426,    0,
    0,  867,    0,    0,    0,    0,  867,    0,  867,  867,
  867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
    0,    0,    0,    0,    0,  867,  867,    0,  867,  867,
    0,    0,    0,  867,  867,  867,  867,  867,  867,  867,
  867,  867,  867,  698,  867,  867,    0,  867,  867,  867,
  867,  867,  867,  867,  867,  867,  867,    0,  867,  867,
  867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
  867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
  867,  368,    0,    0,  867,    0,  867,  368,    0,  867,
    0,    0,    0,    0,    0,  867,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  368,    0,    0,  698,    0,    0,    0,
    0,  698,    0,  698,  698,  698,  698,  698,  698,  698,
  698,  698,  698,  698,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  698,  698,    0,    0,    0,    0,  698,
    0,  698,    0,  698,  368,  698,  698,  698,    0,  368,
    0,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,    0,    0,    0,    0,    0,  368,  368,
    0,  368,  368,    0,    0,    0,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368, 1075,  368,  368,    0,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  698,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,    0,  368,    0,    0,  368,    0,  368,
  368,    0,  368,    0,    0,    0,    0,    0,  368,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  368,    0,    0, 1075,
    0,    0,    0,    0, 1075,    0, 1075, 1075, 1075, 1075,
 1075, 1075, 1075, 1075, 1075, 1075,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1075, 1075,    0,    0,
    0,    0, 1075,    0, 1075,    0, 1075,  368, 1075, 1075,
 1075,    0,  368,    0,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,    0,    0,    0,    0,
    0,  368,  368,    0,  368,  368,    0,    0,    0,    0,
  368,  368,  368,  368,  368,  368,  368,  368,  368,    0,
  368,  368,    0,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368, 1075,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,    0,  567,  675,    0,
  368,    0,  368,  567,    0,  368,    0,   24,    0,   25,
    0,  368,   26,    0,    0,    0,    0,   27,    0,    0,
    0,   28,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,  567,
    0,    0,   33,    0,    0,    0,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,    0,    0,    0,   38,    0,    0,    0,    0,    0,
    0,    0,   39,   40,    0,    0,   41,    0,    0,   85,
  567,    0,    0,    0,    0,  567,    0,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,    0,    0,
  693,    0,    0,    0,    0,  567,    0,  567,  567,    0,
    0,    0,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,    0,  567,  567,    0,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,    0,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,  567,  567,    0,
  563,    0,    0,    0,  387,  567,  563,    0,    0,    0,
    0,    0,    0,    0,  567,    0,    0,    0,    0,    0,
    0,    0,    0,  693,    0,    0,    0,    0,  693,    0,
  693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
  693,    0,  563,    0,    0,    0,    0,    0,    0,    0,
  693,  693,    0,    0,    0,    0,  693,    0,  693,    0,
  693,    0,  693,  693,  693,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  693,    0,
    0,    0,    0,  563,    0,    0,    0,    0,  563,  693,
  563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
  563,  693,    0,  694,    0,    0,    0,    0,  563,    0,
  563,  563,    0,    0,    0,  563,  563,  693,  563,  563,
  563,  563,  563,  563,  563,    0,  563,  563,    0,  563,
  563,  563,  563,  563,  563,  563,  563,  563,  563,    0,
  563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
  563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
  563,  563,    0,  571,    0,    0,    0,    0,  563,  571,
    0,  563,    0,    0,    0,    0,    0,  563,    0,    0,
    0,    0,    0,    0,    0,    0,  694,    0,    0,    0,
    0,  694,    0,  694,  694,  694,  694,  694,  694,  694,
  694,  694,  694,  694,    0,  571,    0,    0,    0,    0,
    0,    0,    0,  694,  694,    0,    0,    0,    0,  694,
    0,  694,    0,  694,    0,  694,  694,  694,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  694,    0,    0,    0,    0,  571,    0,    0,    0,
    0,  571,  694,  571,  571,  571,  571,  571,  571,  571,
  571,  571,  571,  571,  694,    0,    0,    0,    0,    0,
    0,  571,    0,  571,  571,    0,    0,    0,    0,  571,
  694,  571,  571,  571,  571,  571,  571,  571,    0,  571,
  571,    0,  571,  571,  571,  571,  571,  571,  571,  571,
  571,  571,    0,  571,  571,  571,  571,  571,  571,  571,
  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
  571,  571,  571,  571,  571,    0,  368, 1011,    0,    0,
    0,  571,  368,    0,  571,    0,   24,    0,   25,    0,
  571,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,  368,    0,
    0,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
    0,   39,   40,    0,    0,   41,    0,    0,   85,  368,
    0,    0,    0,    0,  368,    0,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,    0,    0,    0,
    0,    0,    0,    0,  368,    0,  368,  368,    0,    0,
    0,    0,  368,    0,  368,  368,  368,  368,  368,  368,
  368,    0,  368,  368,    0,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,    0,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,    0,  486,
 1183,    0,    0,  387,  368,  486,    0,  368,    0,   24,
    0,   25,    0,  368,   26,    0,    0,    0,    0,   27,
    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,  486,    0,    0,   33,    0,    0,    0,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,    0,    0,    0,   38,    0,    0,    0,
    0,    0,    0,    0,   39,   40,    0,    0,   41,    0,
    0,   85,  486,    0,    0,    0,    0,  486,    0,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
    0,    0,    0,    0,    0,    0,    0,  486,    0,  486,
  486,    0,    0,    0,    0,  486,    0,  486,  486,  486,
  486,  486,  486,  486,    0,  486,  486,    0,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,    0,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
  486,    0,  598,    0,  390,    0,  387,  486,  598,    0,
  486,    0,    0,    0,    0,    0,  486,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  390,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,    0,    0,    0,  598,  390,    0,    0,  257,    0,
  390,    0,  390,  390,  390,  390,    0,    0,    0,    0,
  390,    0,    0,    0,  390,  368,    0,    0,  390,    0,
    0,  368,    0,    0,    0,  867,  390,    0,    0,  390,
    0,  390,    0,    0,    0,  598,    0,    0,    0,    0,
  598,    0,  598,  598,  598,  598,  598,  598,  598,  598,
  598,  598,  598,    0,    0,  390,    0,  368,    0,    0,
    0,    0,  598,  598,    0,  390,    0,    0,  598,    0,
  598,    0,  598,  867,  598,  598,  598,    0,  598,  598,
    0,  598,  598,  598,  598,  598,  598,  598,  598,  598,
  598,    0,    0,    0,  598,  598,  598,  598,  598,  598,
  598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
  598,  598,  358,  598,    0,  390,  368,    0,  358,    0,
    0,    0,  368,  368,    0,    0,    0,    0,    0,  598,
    0,  368,  368,  368,  368,  368,  368,  368,  867,  368,
    0,  368,  368,    0,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  358,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,    0,    0,    0,
    0,  368,    0,  368,    0,    0,  368,    0,    0,    0,
    0,    0,  368,    0,    0,  358,    0,    0,    0,    0,
  358,    0,  358,  358,  358,  358,  358,  358,  358,  358,
  358,  358,  358,    0,    0,    0,    0,    0,    0,  358,
  426,  640,  358,  358,    0,    0,    0,  640,  358,  358,
  358,    0,  358,  426,  358,  358,  358,    0,  358,  358,
    0,    0,  358,  358,  358,  358,    0,    0,    0,  358,
  358,    0,  426,  426,  358,  358,  358,  358,  358,  358,
  358,  358,    0,  640,    0,    0,    0,    0,    0,    0,
    0,    0,  426,  358,    0,    0,    0,    0,  358,    0,
  426,    0,    0,  426,    0,    0,    0,    0,    0,  358,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  640,    0,    0,    0,    0,  640,
    0,  640,  640,  640,  640,  640,  640,  640,  640,  640,
  640,  640,    0,    0,    0,    0,    0,    0,    0,  427,
  644,  640,  640,    0,    0,    0,  644,  640,    0,  640,
  427,  640,  427,  640,  640,  640,    0,  640,  640,    0,
    0,  640,  640,  640,  640,    0,    0,    0,  640,  640,
    0,  427,  427,  640,  640,  640,  640,  640,  640,  640,
  640,    0,  644,    0,    0,    0,    0,    0,    0,    0,
    0,  427,  640,    0,    0,    0,    0,    0,    0,  427,
    0,    0,  427,    0,    0,    0,    0,    0,  640,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  644,    0,    0,    0,    0,  644,    0,
  644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
  644,    0,    0,    0,    0,    0,    0,    0,  430,  643,
  644,  644,    0,    0,    0,  643,  644,    0,  644,  430,
  644,  430,  644,  644,  644,    0,  644,  644,    0,    0,
  644,  644,  644,  644,    0,    0,    0,  644,  644,    0,
  430,  430,  644,  644,  644,  644,  644,  644,  644,  644,
    0,  643,    0,    0,    0,    0,    0,    0,    0,    0,
  430,  644,    0,    0,    0,    0,    0,    0,  430,    0,
    0,  430,    0,    0,    0,    0,    0,  644,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  643,    0,    0,    0,    0,  643,    0,  643,
  643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
    0,    0,    0,    0,    0,    0,    0,  440,  358,  643,
  643,    0,    0,    0,  358,  643,    0,  643,  440,  643,
  440,  643,  643,  643,    0,  643,  643,    0,    0,  643,
  643,  643,  643,    0,    0,    0,  643,  643,    0,  440,
  440,  643,  643,  643,  643,  643,  643,  643,  643,    0,
  358,    0,    0,    0,    0,    0,    0,    0,    0,  440,
  643,    0,    0,    0,    0,    0,    0,  440,    0,    0,
  440,    0,    0,    0,    0,    0,  643,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  358,    0,    0,    0,    0,  358,    0,  358,  358,
  358,  358,  358,  358,  358,  358,  358,  358,  358,    0,
    0,    0,    0,    0,    0,  358,  620,    0,  358,  358,
    0,    0,  620,    0,  358,  358,  358,    0,  358,    0,
  358,  358,  358,    0,  358,  358,    0,    0,  358,  358,
  358,  358,    0,    0,    0,  358,  358,    0,    0,    0,
  358,  358,  358,  358,  358,  358,  358,  358,  620,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  358,
    0,    0,    0,    0,  358,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  358,    0,    0,  858,    0,
    0,    0,    0,    0,  858,    0,    0,    0,    0,  620,
    0,    0,    0,    0,  620,    0,  620,  620,  620,  620,
  620,  620,  620,  620,  620,  620,  620,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  620,  620,    0,    0,
  858,    0,  620,    0,  620,    0,  620,    0,  620,  620,
  620,    0,  620,  620,    0,    0,  620,  620,  620,  620,
  620,  620,  620,  620,  620,    0,    0,    0,  620,  620,
  620,  620,  620,  620,  620,  620,    0,    0,    0,    0,
    0,  858,    0,    0,    0,    0,  858,  620,  858,  858,
  858,  858,  858,  858,  858,  858,  858,  858,  858,    0,
    0,    0,    0,  620,    0,  858,  627,    0,  858,  858,
    0,    0,  627,    0,  858,    0,  858,    0,  858,    0,
  858,  858,  858,    0,  858,  858,    0,    0,  858,  858,
  858,  858,    0,    0,    0,  858,  858,    0,    0,    0,
  858,  858,  858,  858,  858,  858,  858,  858,  627,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  858,
    0,    0,    0,    0,  858,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  858,    0,    0,  987,    0,
    0,    0,    0,    0,  987,    0,    0,    0,    0,  627,
    0,    0,    0,    0,  627,    0,  627,  627,  627,  627,
  627,  627,  627,  627,  627,  627,  627,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  627,  627,    0,    0,
  987,    0,  627,    0,  627,    0,  627,    0,  627,  627,
  627,    0,  627,  627,    0,    0,  627,  627,  627,  627,
    0,    0,    0,  627,  627,    0,    0,    0,  627,  627,
  627,  627,  627,  627,  627,  627,    0,    0,    0,    0,
    0,  987,    0,    0,    0,    0,  987,  627,  987,  987,
  987,  987,  987,  987,  987,  987,  987,  987,  987,    0,
    0,    0,    0,  627,    0,    0,  628,    0,  987,  987,
    0,    0,  628,    0,  987,    0,  987,    0,  987,    0,
  987,  987,  987,    0,  987,  987,    0,    0,  987,  987,
  987,  987,    0,    0,    0,  987,  987,    0,    0,    0,
  987,  987,  987,  987,  987,  987,  987,  987,  628,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  987,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  987,    0,    0,  629,    0,
    0,    0,    0,    0,  629,    0,    0,    0,    0,  628,
    0,    0,    0,    0,  628,    0,  628,  628,  628,  628,
  628,  628,  628,  628,  628,  628,  628,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  628,  628,    0,    0,
  629,    0,  628,    0,  628,    0,  628,    0,  628,  628,
  628,    0,  628,  628,    0,    0,  628,  628,  628,  628,
    0,    0,    0,  628,  628,    0,    0,    0,  628,  628,
  628,  628,  628,  628,  628,  628,    0,    0,    0,    0,
    0,  629,    0,    0,    0,    0,  629,  628,  629,  629,
  629,  629,  629,  629,  629,  629,  629,  629,  629,    0,
    0,    0,    0,  628,    0,    0,    0,    0,  629,  629,
    0,    0,    0,    0,  629,    0,  629,    0,  629,    0,
  629,  629,  629,    0,  629,  629,    0,    0,  629,  629,
  629,  629,    0,    0,    0,  629,  629,    0,    0,    0,
  629,  629,  629,  629,  629,  629,  629,  629,    0,  530,
    0,  662,    0,    0,    0,    0,    0,   57,   24,  629,
   25,    0,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,  629,    0,    0,   65,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   72,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   75,    0,    0,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,    0,   41,    0,    0,
    0,    0,    0,    0,  662,    0,    0,    0,    0,  662,
    0,  662,  662,  662,  662,  662,  662,  662,  662,  662,
  662,  662,   90,   91,   92,  262,  531,  663,    0,   95,
   96,  662,  662,    0,    0,    0,    0,  662,   98,  662,
    0,  662,    0,  662,  662,  662,    0,    0,    0,    0,
    0,  662,  662,  662,  662,    0,    0,    0,  662,  662,
    0,    0,    0,  662,  662,  662,  662,  662,  662,  662,
  662,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  662,    0,  108,  532,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  533,  534,    0,  662,  664,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  663,    0,    0,    0,    0,  663,    0,  663,  663,  663,
  663,  663,  663,  663,  663,  663,  663,  663,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  663,  663,    0,
    0,    0,    0,  663,    0,  663,    0,  663,    0,  663,
  663,  663,    0,    0,    0,    0,    0,  663,  663,  663,
  663,    0,    0,    0,  663,  663,    0,    0,    0,  663,
  663,  663,  663,  663,  663,  663,  663,    0,    0,    0,
    0,    0,  664,    0,    0,    0,    0,  664,  663,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  667,    0,    0,    0,  663,    0,    0,    0,    0,  664,
  664,    0,    0,    0,    0,  664,    0,  664,    0,  664,
    0,  664,  664,  664,    0,    0,    0,    0,    0,  664,
  664,  664,  664,    0,    0,    0,  664,  664,    0,    0,
    0,  664,  664,  664,  664,  664,  664,  664,  664,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  664,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  668,    0,    0,    0,  664,    0,    0,    0,
    0,    0,    0,  667,    0,    0,    0,    0,  667,    0,
  667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
  667,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  667,  667,    0,    0,    0,    0,  667,    0,  667,    0,
  667,    0,  667,  667,  667,    0,    0,    0,    0,    0,
  667,  667,  667,  667,    0,    0,    0,  667,  667,    0,
    0,    0,    0,    0,  667,  667,  667,  667,  667,  667,
    0,    0,    0,    0,    0,  668,    0,    0,    0,    0,
  668,  667,  668,  668,  668,  668,  668,  668,  668,  668,
  668,  668,  668,  669,    0,    0,    0,  667,    0,    0,
    0,    0,  668,  668,    0,    0,    0,    0,  668,    0,
  668,    0,  668,    0,  668,  668,  668,    0,    0,    0,
    0,    0,  668,  668,  668,  668,    0,    0,    0,  668,
  668,    0,    0,    0,    0,    0,  668,  668,  668,  668,
  668,  668,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  668,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  670,    0,    0,    0,  668,
    0,    0,    0,    0,    0,    0,  669,    0,    0,    0,
    0,  669,    0,  669,  669,  669,  669,  669,  669,  669,
  669,  669,  669,  669,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  669,  669,    0,    0,    0,    0,  669,
    0,  669,    0,  669,    0,  669,  669,  669,    0,    0,
    0,    0,    0,  669,  669,  669,  669,    0,    0,    0,
  669,  669,    0,    0,    0,    0,    0,  669,  669,  669,
  669,  669,  669,    0,    0,    0,    0,    0,  670,    0,
    0,    0,    0,  670,  669,  670,  670,  670,  670,  670,
  670,  670,  670,  670,  670,  670,  671,    0,    0,    0,
  669,    0,    0,    0,    0,  670,  670,    0,    0,    0,
    0,  670,    0,  670,    0,  670,    0,  670,  670,  670,
    0,    0,    0,    0,    0,  670,  670,  670,  670,    0,
    0,    0,  670,  670,    0,    0,    0,    0,    0,  670,
  670,  670,  670,  670,  670,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  368,  670,    0,    0,    0,
    0,  368,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  670,    0,    0,    0,    0,    0,    0,  671,
    0,    0,    0,    0,  671,    0,  671,  671,  671,  671,
  671,  671,  671,  671,  671,  671,  671,  368,    0,    0,
    0,    0,    0,    0,    0,    0,  671,  671,    0,    0,
    0,    0,  671,    0,  671,    0,  671,    0,  671,  671,
  671,    0,    0,    0,    0,    0,  671,  671,  671,  671,
    0,    0,    0,  671,  671,    0,    0,    0,    0,    0,
  671,  671,  671,  671,  671,  671,  677,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  671,    0,    0,
    0,    0,    0,  368,    0,    0,    0,    0,    0,    0,
    0,  368,    0,  671,  368,    0,  368,  368,    0,    0,
    0,  368,  368,    0,    0,  368,  368,  368,  368,  368,
  368,  368,  368,  368,    0,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  368,  368,    0,  678,    0,
    0,    0,    0,  368,    0,    0,  368,    0,    0,  677,
    0,    0,  368,    0,  677,    0,  677,  677,  677,  677,
  677,  677,  677,  677,  677,  677,  677,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  677,  677,    0,    0,
    0,    0,  677,    0,  677,    0,  677,    0,  677,  677,
  677,    0,    0,    0,    0,    0,    0,    0,  677,  677,
    0,    0,    0,  677,  677,    0,    0,    0,    0,    0,
  681,    0,  677,  677,  677,  677,    0,    0,    0,    0,
    0,  678,    0,    0,    0,    0,  678,  677,  678,  678,
  678,  678,  678,  678,  678,  678,  678,  678,  678,    0,
    0,    0,    0,  677,    0,    0,    0,    0,  678,  678,
    0,    0,    0,    0,  678,    0,  678,    0,  678,    0,
  678,  678,  678,    0,    0,    0,    0,    0,    0,    0,
  678,  678,    0,    0,    0,  678,  678,    0,    0,    0,
    0,    0,  682,    0,  678,  678,  678,  678,    0,    0,
    0,    0,    0,  681,    0,    0,    0,    0,  681,  678,
  681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
  681,    0,    0,    0,    0,  678,    0,    0,    0,    0,
  681,  681,    0,    0,    0,    0,  681,    0,  681,    0,
  681,    0,  681,  681,  681,    0,    0,    0,    0,    0,
    0,    0,  681,  681,    0,    0,    0,  681,  681,    0,
    0,    0,    0,    0,  684,    0,    0,    0,  681,  681,
    0,    0,    0,    0,    0,  682,    0,    0,    0,    0,
  682,  681,  682,  682,  682,  682,  682,  682,  682,  682,
  682,  682,  682,    0,    0,    0,    0,  681,    0,    0,
    0,    0,  682,  682,    0,    0,    0,    0,  682,    0,
  682,    0,  682,    0,  682,  682,  682,    0,    0,    0,
    0,    0,    0,    0,  682,  682,    0,    0,    0,  682,
  682,    0,    0,    0,    0,    0,  685,    0,    0,    0,
  682,  682,    0,    0,    0,    0,    0,  684,    0,    0,
    0,    0,  684,  682,  684,  684,  684,  684,  684,  684,
  684,  684,  684,  684,  684,    0,    0,    0,    0,  682,
    0,    0,    0,    0,  684,  684,    0,    0,    0,    0,
  684,    0,  684,    0,  684,    0,  684,  684,  684,    0,
    0,    0,    0,    0,    0,    0,    0,  684,    0,    0,
    0,  684,  684,    0,    0,    0,    0,    0,  687,    0,
    0,    0,  684,  684,    0,    0,    0,    0,    0,  685,
    0,    0,    0,    0,  685,  684,  685,  685,  685,  685,
  685,  685,  685,  685,  685,  685,  685,    0,    0,    0,
    0,  684,    0,    0,    0,    0,  685,  685,    0,    0,
    0,    0,  685,    0,  685,    0,  685,    0,  685,  685,
  685,    0,    0,    0,    0,    0,    0,    0,    0,  685,
    0,    0,    0,  685,  685,    0,    0,    0,    0,    0,
  688,    0,    0,    0,  685,  685,    0,    0,    0,    0,
    0,  687,    0,    0,    0,    0,  687,  685,  687,  687,
  687,  687,  687,  687,  687,  687,  687,  687,  687,    0,
    0,    0,    0,  685,    0,    0,    0,    0,  687,  687,
    0,    0,    0,    0,  687,    0,  687,    0,  687,    0,
  687,  687,  687,    0,    0,    0,    0,    0,    0,    0,
    0,  687,    0,    0,    0,    0,  687,    0,    0,    0,
    0,    0,  690,    0,    0,    0,  687,  687,    0,    0,
    0,    0,    0,  688,    0,    0,    0,    0,  688,  687,
  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
  688,    0,    0,    0,    0,  687,    0,    0,    0,    0,
  688,  688,    0,    0,    0,    0,  688,    0,  688,    0,
  688,    0,  688,  688,  688,    0,    0,    0,    0,    0,
    0,    0,    0,  688,    0,    0,    0,    0,  688,    0,
    0,    0,    0,    0,  691,    0,    0,    0,  688,  688,
    0,    0,    0,    0,    0,  690,    0,    0,    0,    0,
  690,  688,  690,  690,  690,  690,  690,  690,  690,  690,
  690,  690,  690,    0,    0,    0,    0,  688,    0,    0,
    0,    0,  690,  690,    0,    0,    0,    0,  690,    0,
  690,    0,  690,    0,  690,  690,  690,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  690,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  690,  690,    0,    0,    0,    0,    0,  691,    0,    0,
    0,    0,  691,  690,  691,  691,  691,  691,  691,  691,
  691,  691,  691,  691,  691,    0,    0,    0,    0,  690,
    0,    0,    0,    0,  691,  691,    0,    0,    0,    0,
  691,    0,  691,    0,  691,    0,  691,  691,  691,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  691,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  691,  691,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  691,    0,    0,  602,    0,
    0,    0,    0,    0,    0,    0,   57,   24,   58,   25,
 1212,  691,   26,   59,    0,   60,   61,   27,   62,   63,
   64,   28,    0,    0,    0,    0,    0,   65,    0,   66,
   30,   67,   68,   69,   70,    0,    0,   32,    0,    0,
    0,   71,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   74,    0,   36,    0,
   37,   75,    0,    0,   38,    0,   76,   77,   78,   79,
   80,   81,   39,   40,   82,   83,   41,   84,    0,   85,
    0,    0,   86,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,    0,    0,   97,    0,    0,    0,   98,    0,    0,
    0,    0,   99,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   56,    0,  108,  109,  110,  111,    0, 1213,   57,
   24,   58,   25,    0,    0,   26,   59,    0,   60,   61,
   27,   62,   63,   64,   28,    0,    0,    0,    0,    0,
   65,    0,   66,   30,   67,   68,   69,   70,    0,    0,
   32,    0,    0,    0,   71,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   74,
    0,   36,    0,   37,   75,    0,    0,   38,    0,   76,
   77,   78,   79,   80,   81,   39,   40,   82,   83,   41,
   84,    0,   85,    0,    0,   86,   87,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,   95,   96,    0,    0,    0,   97,    0,    0,    0,
   98,    0,    0,    0,    0,   99,  100,  101,  102,  103,
    0,    0,    0,  104,    0,  105,    0,    0,    0,    0,
    0,  106,  107,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  273,    0,    0,    0,  108,  109,  110,  111,
   57,   24,   58,   25,    0,    0,   26,   59,    0,   60,
   61,   27,   62,   63,   64,   28,    0,    0,    0,    0,
    0,   65,    0,   66,   30,   67,   68,   69,   70,    0,
    0,   32,    0,    0,    0,   71,   33,    0,   72,   73,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,    0,   36,    0,   37,   75,    0,    0,   38,    0,
   76,   77,   78,   79,   80,   81,   39,   40,   82,   83,
   41,   84,    0,   85,    0,    0,   86,   87,    0,    0,
   88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,   93,   94,
    0,    0,   95,   96,    0,    0,    0,   97,    0,    0,
    0,   98,    0,    0,    0,    0,   99,  100,  101,  102,
  103,    0,    0,    0,  104,    0,  105,    0,    0,    0,
    0,    0,  106,  107,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  602,    0,    0,    0,  108,  109,  110,
  111,   57,   24,   58,   25,    0,    0,   26,   59,    0,
   60,   61,   27,   62,   63,   64,   28,    0,    0,    0,
    0,    0,   65,    0,   66,   30,   67,   68,   69,   70,
    0,    0,   32,    0,    0,    0,   71,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   74,    0,   36,    0,   37,   75,    0,    0,   38,
    0,   76,   77,   78,   79,   80,   81,   39,   40,   82,
   83,   41,   84,    0,   85,    0,    0,   86,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
   94,    0,    0,   95,   96,    0,    0,    0,   97,    0,
    0,    0,   98,    0,    0,    0,    0,   99,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,    0,    0,
    0,    0,    0,  106,  107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1080,    0,    0,    0,  108,  109,
  110,  111, 1080, 1080, 1080, 1080,    0,    0, 1080, 1080,
    0, 1080, 1080, 1080, 1080, 1080, 1080, 1080,    0,    0,
    0,    0,    0, 1080,    0, 1080, 1080, 1080, 1080, 1080,
 1080,    0,    0, 1080,    0,    0,    0, 1080, 1080,    0,
 1080, 1080, 1080,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1080,    0, 1080,    0, 1080, 1080,    0,    0,
 1080,    0, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
 1080, 1080, 1080, 1080,    0, 1080,    0,    0, 1080, 1080,
    0,    0, 1080, 1080,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1080, 1080, 1080,
 1080, 1080,    0,    0, 1080, 1080,    0,    0,    0, 1080,
    0,    0,    0, 1080,    0,    0,    0,    0, 1080, 1080,
 1080, 1080, 1080,    0,    0,    0, 1080,    0, 1080,    0,
    0,    0,    0,    0, 1080, 1080,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  645,    0,    0,    0, 1080,
 1080, 1080, 1080,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
    0,   24,    0,   25,   65,    0,   26,   30,    0,    0,
    0,   27,    0,    0,   32,   28,    0,    0,    0,   33,
    0,   72,   73,   34,   30,  646,    0,    0,    0,    0,
    0,   32,  647,    0,    0,   36,   33,   37,   75,    0,
   34,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,   36,   41,   37,    0,    0,    0,   38,    0,
  648,    0,    0,   88,   89,    0,   39,   40,    0,    0,
   41,    0,    0,   85,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,   95,   96,    0,    0,    0,
    0,    0,    0,    0,   98,    0,    0,  649,    0,  298,
  100,  101,  102,  103,    0,    0,    0,  104,    0,  105,
    0,    0,    0,    0,    0,  106,  107,    0,    0,    0,
    0,    0,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
  108,  109,  110,  111,   65,    0,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,  331,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  815,    0,    0,   95,   96,    0,    0,    0,
  816, 1127,    0,    0,   98,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,  105,
    0,    0,    0,    0,    0,  106,  107,    0,    0,    0,
    0,    0,    0,   57,   24,    0,   25,    0,    0,   26,
  260,    0,    0,    0,   27,   62,   63,    0,   28,    0,
  108,  817,  110,  111,   65,    0,  818,   30,    0,    0,
    0,  819,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   72,   73,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   75,    0,
    0,   38,    0,    0,   77,    0,   79,    0,   81,   39,
   40,  261,    0,   41,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  815,    0,    0,   95,   96,    0,    0,    0,
  816,    0,    0,    0,   98,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,  105,
    0,    0,    0,    0,    0,  106,  107,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  833,
  108,  817,  110,  111,    0,    0,  818,   57,   24,    0,
   25,  819,    0,   26,  260,    0,    0,    0,   27,   62,
   63,    0,   28,    0,    0,  192,    0,  192,   65,    0,
  192,   30,    0,    0,    0,  192,    0,    0,   32,  192,
    0,    0,    0,   33,    0,   72,   73,   34,  192,    0,
    0,    0,    0,    0,    0,  192,    0,    0,    0,   36,
  192,   37,   75,    0,  192,   38,    0,    0,   77,    0,
   79,    0,   81,   39,   40,  261,  192,   41,  192,    0,
    0,    0,  192,    0,   87,    0,    0,   88,   89,    0,
  192,  192,    0,    0,  192,    0,    0,  192,    0,    0,
    0,    0,   90,   91,   92,   93,  309,    0,    0,   95,
   96,    0,    0,    0,  551,  834,    0,    0,   98,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,  105,    0,    0, 1105,    0,    0,  106,
  107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1039,    0,    0,    0,  108,  310,  110,  111,   57,   24,
    0,   25,    0,    0,   26,  260,    0,    0,    0,   27,
   62,   63,  192,   28,    0,    0,  192,    0,  192,   65,
    0,  192,   30,    0,    0,    0,  192,    0,    0,   32,
  192,    0,    0,    0,   33,    0,   72,   73,   34,  192,
  646,    0,    0,    0,    0,    0,  192,  647,    0,    0,
   36,  192,   37,   75,    0,  192,   38,    0,    0,   77,
    0,   79,    0,   81,   39,   40,  261,  192,   41,  192,
    0,    0,    0,  192,    0,  648,    0,    0,   88,   89,
    0,  192,  192,    0,    0,  192,    0,    0,  192,    0,
    0,    0,    0,   90,   91,   92,   93,   94,    0,    0,
   95,   96,    0,    0,    0,    0,    0,    0,    0,   98,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,  105, 1105,    0,    0,    0,    0,
  106,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  833,    0,    0,    0,  108,  109,  110,  111,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,  192,   28,    0,    0,   24,    0,   25,
   65,    0,   26,   30,    0,    0,    0,   27,    0,    0,
   32,   28,    0,    0,    0,   33,    0,   72,   73,   34,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,   36,   33,   37,   75, 1042,   34,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,   36,   41,
   37,    0,    0,    0,   38,    0,   87,    0,    0,   88,
   89,    0,   39,   40,    0,    0,   41,    0,    0,   85,
    0,    0,    0,    0,   90,   91,   92,   93,  309,    0,
    0,   95,   96,    0,    0,    0,  551,    0,    0,    0,
   98,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,  105,    0,    0,    0,    0,
    0,  106,  107,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  795,    0,    0,    0,  108,  310,  110,  111,
   57,   24,    0,   25,    0,    0,   26,  260,    0,    0,
    0,   27,   62,   63,  387,   28,    0,    0,   24,    0,
   25,   65,    0,   26,   30,    0,    0,    0,   27,    0,
    0,   32,   28,    0,    0,    0,   33,    0,   72,   73,
   34,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,   36,   33,   37,   75,    0,   34,   38,    0,
    0,   77,    0,   79,    0,   81,   39,   40,  261,   36,
   41,   37,    0,   85,    0,   38,    0,   87,    0,    0,
   88,   89,    0,   39,   40,    0,    0,   41,    0,    0,
  618,    0,    0,    0,    0,   90,   91,   92,   93,  309,
    0,    0,   95,   96,    0,    0,    0,    0,    0,    0,
    0,   98,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,  105,    0,    0,    0,
    0,    0,  106,  107,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  833,    0,    0,    0,  108,  310,  110,
  111,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,  387,   28,    0,    0,    0,
    0,    0,   65,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
  309,    0,    0,   95,   96,    0,    0,    0,  551,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,    0,    0,
    0,    0,    0,  106,  107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  351,    0,  108,  310,
  110,  111,  352,    0,   57,   24,    0,   25,    0,    0,
   26,  260,    0,    0,    0,   27,   62,   63,    0,   28,
    0,    0,    0,    0,    0,   65,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,  353,    0,
   33,    0,   72,   73,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   75,
    0,    0,   38,    0,    0,   77,    0,   79,    0,   81,
   39,   40,  261,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,  354,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
   91,   92,  262,  355,    0,    0,   95,   96,    0,    0,
    0,    0,    0,    0,    0,   98,    0,  356,    0,    0,
    0,  100,  101,  102,  103,  992,    0,    0,  104,    0,
  105,  825,    0,    0,    0,    0,  106,  107,    0,   57,
   24,    0,   25,    0,    0,   26,  260,    0,    0,    0,
   27,   62,   63,    0,   28,    0,    0,    0,    0,    0,
   65,  108,  264,   30,  111,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   72,   73,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   75,    0,    0,   38,    0,    0,
   77,    0,   79,    0,   81,   39,   40,  261,    0,   41,
    0,    0,    0,    0,    0,    0,   87,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,  309,    0,
    0,   95,   96,    0,    0,    0,    0,  993,    0,    0,
   98,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,  105,    0,    0,    0,    0,
    0,  106,  107,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1060,    0,    0,    0,  108,  310,  110,  111,
   57,   24,    0,   25,    0,    0,   26,  260,    0,    0,
    0,   27,   62,   63,    0,   28,    0,    0,   24,    0,
   25,   65,    0,   26,   30,    0,    0,    0,   27,    0,
    0,   32,   28,    0,    0,    0,   33,    0,   72,   73,
   34,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,   36,   33,   37,   75,    0,   34,   38,    0,
    0,   77,    0,   79,    0,   81,   39,   40,  261,   36,
   41,   37,    0,    0,    0,   38,    0,   87,    0,    0,
   88,   89,    0,   39,   40,    0,    0,   41,    0,    0,
  568,    0,    0,    0,    0,   90,   91,   92,   93,  309,
    0,    0,   95,   96,    0,    0,    0,    0, 1061,    0,
    0,   98,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,  105,    0,    0,    0,
    0,    0,  106,  107,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  308,    0,    0,    0,  108,  310,  110,
  111,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,  387,   28,    0,    0,  547,
    0,  547,   65,    0,  547,   30,    0,    0,    0,  547,
    0,    0,   32,  547,    0,    0,    0,   33,    0,   72,
   73,   34,  547,    0,    0,    0,    0,    0,    0,  547,
    0,    0,    0,   36,  547,   37,   75,    0,  547,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
  547,   41,  547,    0,    0,    0,  547,    0,   87,    0,
    0,   88,   89,    0,  547,  547,    0,    0,  547,    0,
    0,  547,    0,    0,    0,    0,   90,   91,   92,   93,
  309,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,    0,    0,
    0,    0,    0,  106,  107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  317,    0,    0,    0,  108,  310,
  110,  111,   57,   24,    0,   25,    0,    0,   26,  260,
    0,    0,    0,   27,   62,   63,  547,   28,    0,    0,
    0,    0,    0,   65,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   72,   73,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   75,    0,    0,
   38,    0,    0,   77,    0,   79,    0,   81,   39,   40,
  261,    0,   41,    0,    0,    0,    0,    0,    0,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,  309,    0,    0,   95,   96,    0,    0,    0,    0,
    0,    0,    0,   98,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,  105,    0,
    0,    0,    0,    0,  106,  107,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  351,    0,  108,
  310,  110,  111,  352,    0,   57,   24,    0,   25,    0,
    0,   26,  260,    0,    0,    0,   27,   62,   63,    0,
   28,    0,    0,    0,    0,    0,   65,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,  353,
    0,   33,    0,   72,   73,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   75,    0,    0,   38,    0,    0,   77,    0,   79,    0,
   81,   39,   40,  261,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,  354,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,  262,  355,    0,    0,   95,   96,    0,
    0,    0,    0,    0,    0,    0,   98,    0,  356,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,  105,  643,    0,    0,    0,    0,  106,  107,    0,
   57,   24,    0,   25,    0,    0,   26,  260,    0,    0,
    0,   27,   62,   63,    0,   28,    0,    0,    0,    0,
    0,   65,  108,  264,   30,  111,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   72,   73,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   75,    0,    0,   38,    0,
    0,   77,    0,   79,    0,   81,   39,   40,  261,    0,
   41,    0,    0,    0,    0,    0,    0,   87,    0,    0,
   88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,   93,   94,
    0,    0,   95,   96,    0,    0,    0,    0,    0,    0,
    0,   98,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,  105,    0,    0,    0,
    0,    0,  106,  107,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  825,    0,    0,    0,  108,  109,  110,
  111,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,  193,
    0,  193,   65,    0,  193,   30,    0,    0,    0,  193,
    0,    0,   32,  193,    0,    0,    0,   33,    0,   72,
   73,   34,  193,    0,    0,    0,    0,    0,    0,  193,
    0,    0,    0,   36,  193,   37,   75,    0,  193,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
  193,   41,  193,    0,    0,    0,  193,    0,   87,    0,
    0,   88,   89,    0,  193,  193,    0,    0,  193,    0,
    0,  193,    0,    0,    0,    0,   90,   91,   92,   93,
  309,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,    0,    0,
    0,    0,    0,  106,  107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1174,    0,    0,    0,  108,  310,
  110,  111,   57,   24,    0,   25,    0,    0,   26,  260,
    0,    0,    0,   27,   62,   63,  193,   28,    0,    0,
  192,    0,  192,   65,    0,  192,   30,    0,    0,    0,
  192,    0,    0,   32,  192,    0,    0,    0,   33,    0,
   72,   73,   34,  192,    0,    0,    0,    0,    0,    0,
  192,    0,    0,    0,   36,  192,   37,   75,    0,  192,
   38,    0,    0,   77,    0,   79,    0,   81,   39,   40,
  261,  192,   41,  192,    0,    0,    0,  192,    0,   87,
    0,    0,   88,   89,    0,  192,  192,    0,    0,  192,
    0,    0,  192,    0,    0,    0,    0,   90,   91,   92,
   93,   94,    0,    0,   95,   96,    0,    0,    0,    0,
    0,    0,    0,   98,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,  105,    0,
    0,    0,    0,    0,  106,  107,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,    0,  108,
 1175,  110,  111,   86,   86,    0,   86,    0,    0,   86,
   86,    0,    0,    0,   86,   86,   86,  192,   86,    0,
    0,    0,    0,    0,   86,    0,    0,   86,    0,    0,
    0,    0,    0,    0,   86,    0,    0,    0,    0,   86,
    0,   86,   86,   86,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   86,    0,   86,   86,    0,
    0,   86,    0,    0,   86,    0,   86,    0,   86,   86,
   86,   86,    0,   86,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   86,   86,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   86,   86,
   86,   86,   86,    0,    0,   86,   86,    0,    0,    0,
    0,    0,    0,    0,   86,    0,    0,    0,    0,    0,
   86,   86,   86,   86,    0,    0,    0,   86,    0,   86,
    0,    0,    0,    0,    0,   86,   86,    0,    0,    0,
    0,  205,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  206,    0,    0,    0,  351,    0,
   86,   86,   86,   86,  352,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  207,    0,    0,    0,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
  353,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,  208,  209,  210,
  211,    0,  212,  213,  214,  215,  216,  217,  218,  219,
    0,    0,  220,  221,  222,  223,  224,  225,  226,  227,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,  356,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  351,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,   33,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,   33,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
   33,   41,    0,    0,    0,   33,    0,    0,    0,    0,
   33,    0,   33,   33,   33,   33,    0,    0,   33,    0,
   33,    0,    0,    0,   33,    0,   90,   91,   92,  262,
  355,    0,    0,   95,   96,    0,   33,    0,    0,   33,
    0,   33,   98,    0,  356,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  363,    0,
    0,    0,    0,  106,  107,   33,   57,   24,    0,   25,
    0,    0,   26,  260,    0,   33,   33,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,   33,
    0,   33,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,   33,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,   33,   41,    0,    0,    0,
   33,    0,    0,    0,    0,   33,    0,   33,   33,   33,
   33,    0,    0,    0,    0,   33,    0,    0,    0,   33,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,   33,    0,    0,   33,    0,   33,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  365,    0,    0,    0,    0,  106,  107,
   33,   57,   24,    0,   25,    0,    0,   26,  260,    0,
   33,   33,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,   53,    0,   53,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,   53,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
   53,   41,    0,    0,    0,   53,    0,    0,    0,    0,
   53,    0,   53,   53,   53,   53,    0,    0,    0,    0,
   53,    0,    0,    0,   53,    0,   90,   91,   92,  262,
  355,    0,    0,   95,   96,    0,   53,    0,    0,   53,
    0,   53,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  367,    0,
    0,    0,    0,  106,  107,   53,   57,   24,    0,   25,
    0,    0,   26,  260,    0,  327,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,  482,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,  483,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,  484,   41,    0,    0,  485,
  486,    0,    0,    0,    0,  487,    0,  488,  489,  490,
  491,    0,    0,    0,    0,  492,    0,    0,    0,  493,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,  494,    0,    0,  495,    0,  496,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  369,    0,    0,    0,    0,  106,  107,
  497,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,  482,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,  483,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
  484,   41,    0,    0,    0,  486,    0,    0,    0,    0,
  487,    0,  488,  489,  490,  491,    0,    0,    0,    0,
  492,    0,    0,    0,  493,    0,   90,   91,   92,  262,
  355,    0,    0,   95,   96,    0,  494,    0,    0,  495,
    0,  496,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  371,    0,
    0,    0,    0,  106,  107,  497,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  373,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  355,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  375,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  377,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  355,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  669,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  671,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  355,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  673,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  691,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  355,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  693,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  695,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  696,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  698,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  696,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  700,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  696,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  702,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  696,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  704,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  696,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  706,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  696,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  708,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  696,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  710,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  696,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  712,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  696,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  714,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  696,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  716,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  696,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  718,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  696,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  720,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  696,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,  105,  888,    0,
    0,    0,    0,  106,  107,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,    0,    0,    0,    0,   65,  108,  264,
   30,  111,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  355,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,  677,    0,    0,    0,    0,  106,  107,
    0,   57,   24,    0,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,  108,  264,   30,  111,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,   85,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  263,    0,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,    0,  678,
  679,    0,    0,  213,    0,    0,    0,  680,  213,    0,
    0,    0,  213,    0,  213,    0,    0,  213,    0,  213,
  213,    0,  213,    0,  213,    0,  213,    0,  213,  213,
  213,  213,    0,    0,  213,  213,    0,    0,  108,  264,
  213,  681,  213,  213,  213,    0,    0,  213,    0,  213,
    0,  213,    0,    0,  213,    0,  213,  213,  213,  213,
    0,    0,    0,  213,  213,  213,    0,    0,  213,  213,
  213,    0,    0,    0,    0,    0,    0,  213,  213,    0,
  213,  213,    0,  213,  213,  213,    0,    0,    0,  213,
    0,    0,  530,    0,    0,    0,    0,    0,    0,  368,
   57,   24,    0,   25,    0,    0,   26,  260,    0,  213,
    0,   27,   62,   63,    0,   28,    0,    0,  213,  213,
  213,   65,    0,    0,   30,    0,    0,    0,  213,    0,
    0,   32,    0,    0,    0,  368,   33,    0,   72,   73,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   75,    0,    0,   38,    0,
    0,   77,    0,   79,    0,   81,   39,   40,  261,  213,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,  262,  531,
    0,  368,   95,   96,    0,    0,    0,    0,    0,    0,
    0,   98,  368,  368,  368,  368,  867,    0,    0,  368,
  368,    0,    0,  368,  368,  368,  368,  368,  368,  368,
  368,  368,    0,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
  368,  368,  368,  368,  368,    0,    0,  108,  532,    0,
    0,  368,    0,   54,  368,   54,    0,   54,    0,   54,
    0,    0,   54,    0,   54,   54,    0,   54,    0,   54,
    0,   54,    0,   54,   54,   54,   54,    0,    0,   54,
   54,    0,    0,    0,    0,   54,   54,   54,   54,   54,
    0,    0,   54,    0,   54,    0,   54,    0,   54,   54,
    0,   54,   54,   54,   54,    0,    0,   54,   54,   54,
   54,    0,    0,   54,   54,   54,    0,    0,    0,    0,
    0,    0,   54,   54,    0,   54,   54,    0,   54,   54,
   54,    0,    0,    0,   54,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   54,    0,    0,    0,    0,    0,
   54,   54,   53,    0,    0,    0,   53,    0,   53,    0,
    0,   53,    0,   53,   53,    0,   53,    0,   53,    0,
   53,    0,   53,   53,   53,   53,    0,    0,   53,   53,
    0,    0,    0,    0,   53,    0,   53,   53,   53,    0,
    0,   53,    0,   53,    0,   53,    0,    0,   53,    0,
   53,   53,   53,   53,   54,    0,    0,   53,   53,   53,
    0,    0,   53,   53,   53,    0,    0,    0,    0,    0,
    0,   53,   53,    0,   53,   53,    0,   53,   53,   53,
    0,    0,    0,   53,   53,    0,    0,    0,   53,    0,
   53,    0,    0,   53,    0,   53,   53,    0,   53,    0,
   53,    0,   53,   53,   53,   53,   53,   53,    0,    0,
   53,   53,    0,   89,    0,    0,   53,    0,   53,   53,
   53,    0,   53,   53,    0,   53,    0,   53,    0,    0,
   53,    0,   53,   53,   53,   53,    0,    0,    0,   53,
   53,   53,    0,    0,   53,   53,   53,    0,    0,    0,
    0,    0,    0,   53,   53,    0,   53,   53,    0,   53,
   53,   53,    0,   53,    0,   53,   54,    0,    0,    0,
   54,    0,   54,    0,    0,   54,    0,   54,   54,    0,
   54,    0,   54,    0,   54,   53,   54,   54,   54,   54,
    0,    0,   54,   54,    0,   90,    0,    0,   54,    0,
   54,   54,   54,    0,   53,   54,    0,   54,    0,   54,
    0,    0,   54,    0,   54,   54,   54,   54,    0,    0,
    0,   54,   54,   54,    0,    0,   54,   54,   54,    0,
    0,    0,    0,    0,    0,   54,   54,    0,   54,   54,
    0,   54,   54,   54,    0,   53,    0,   54,   53,    0,
    0,    0,   53,    0,   53,    0,    0,   53,    0,   53,
   53,    0,   53,    0,   53,    0,   53,   54,   53,   53,
   53,   53,    0,    0,   53,   53,    0,    0,    0,    0,
   53,    0,   53,   53,   53,    0,   54,   53,    0,   53,
    0,   53,    0,    0,   53,    0,   53,   53,   53,   53,
    0,    0,    0,   53,   53,   53,    0,    0,   53,   53,
   53,    0,    0,    0,    0,    0,    0,   53,   53,    0,
   53,   53,    0,   53,   53,   53,    0,   54,    0,   53,
   53,    0,    0,    0,   53,    0,   53,    0,    0,   53,
    0,   53,   53,    0,   53,    0,   53,    0,   53,   53,
   53,   53,   53,   53,    0,    0,   53,   53,    0,  241,
    0,    0,   53,    0,   53,   53,   53,    0,    0,   53,
    0,   53,  389,   53,    0,    0,   53,    0,   53,   53,
   53,   53,    0,    0,    0,   53,   53,   53,    0,    0,
   53,   53,   53,    0,    0,  389,    0,    0,    0,   53,
   53,    0,   53,   53,  482,   53,   53,   53,  389,   53,
    0,   53,    0,  389,    0,    0,  256,    0,  389,    0,
  389,  389,  389,  389,    0,    0,    0,  483,  389,    0,
    0,   53,  389,    0,    0,    0,  389,    0,    0,  482,
  484,  242,    0,    0,  389,  486,    0,  389,    0,  389,
  487,    0,  488,  489,  490,  491,    0,    0,    0,    0,
  492,    0,  483,    0,  493,    0,    0,    0, 1491,    0,
    0,    0,    0,  389,    0,  484,  494,    0,    0,  495,
  486,  496,    0,  389,    0,  487,    0,  488,  489,  490,
  491,   53,    0,    0,    0,  492,    0,    0,    0,  493,
    0,    0,    0, 1491,    0,  497,   57,   24,    0,   25,
    0,  494,   26,  260,  495, 1492,  496,   27,   62,   63,
    0,   28,    0,    0,  202,    0,  202,   65,    0,  202,
   30,    0,    0,  389,  202,    0,    0,   32,  202,    0,
  497,    0,   33,    0,   72,   73,   34,  202,  646,    0,
    0,    0,    0,    0,  202,  647,    0,    0,   36,  202,
   37,   75,    0,  202,   38, 1493,    0,   77,    0,   79,
    0,   81,   39,   40,  261,  202,   41,  202,    0,    0,
    0,  202,    0,  648,    0,    0,   88,   89,    0,  202,
  202,    0,    0,  202,    0,    0,  202,    0,    0,    0,
 1493,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98, 1037,    0,
  649,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  108,  109,  110,  111,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,  202,   33,    0,   72,   73,   34,    0,  646,    0,
    0,    0,    0,    0,    0,  647,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,  648,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
  649,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  108,  109,  110,  111,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,   85,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,  309,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  108,  310,  110,  111,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,   85,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,  309,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,  903,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  108,  310,  110,  111,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,  309,    0,    0,   95,   96,
    0,    0,    0,  551,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  108,  310,  110,  111,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,  309,    0,    0,   95,   96,
    0,    0,    0,  545,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  108,  310,  110,  111,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,  309,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  108,  310,  110,  111,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,    0,    0,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,  722,  722,    0,  722,
    0,    0,  722,  722,    0,    0,    0,  722,  722,  722,
    0,  722,    0,  108,  109,  110,  111,  722,    0,    0,
  722,    0,    0,    0,    0,    0,    0,  722,    0,    0,
    0,    0,  722,    0,  722,  722,  722,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  722,    0,
  722,  722,    0,    0,  722,    0,    0,  722,    0,  722,
    0,  722,  722,  722,  722,    0,  722,    0,    0,    0,
    0,    0,    0,  722,    0,    0,  722,  722,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  722,  722,  722,  722,  722,    0,    0,  722,  722,
    0,    0,    0,    0,    0,    0,    0,  722,    0,    0,
    0,    0,    0,  722,  722,  722,  722,    0,    0,    0,
  722,    0,  722,    0,    0,    0,    0,    0,  722,  722,
    0,    0,    0,    0,    0,    0,  149,  149,    0,  149,
    0,    0,  149,  149,    0,    0,    0,  149,  149,  149,
    0,  149,    0,  722,  722,  722,  722,  149,    0,    0,
  149,    0,    0,    0,    0,    0,    0,  149,    0,    0,
    0,    0,  149,    0,  149,  149,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  149,    0,
  149,  149,    0,    0,  149,    0,    0,  149,    0,  149,
    0,  149,  149,  149,  149,    0,  149,    0,    0,    0,
    0,    0,    0,  149,    0,    0,  149,  149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  149,  149,  149,  149,  149,    0,    0,  149,  149,
    0,    0,    0,    0,    0,    0,    0,  149,    0,    0,
    0,    0,    0,  149,  149,  149,  149,    0,    0,    0,
  149,    0,  149,    0,    0,    0,    0,    0,  149,  149,
    0,    0,    0,    0,    0,    0,   57,   24,    0,   25,
    0,    0,   26,  260,    0,    0,    0,   27,   62,   63,
    0,   28,    0,  149,  149,  149,  149,   65,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   72,   73,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   75,    0,    0,   38,    0,    0,   77,    0,   79,
    0,   81,   39,   40,  261,    0,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,  262,  696,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,  105,    0,   57,   24,    0,   25,  106,  107,
   26,  260,    0,    0,    0,   27,   62,   63,    0,   28,
    0,    0,    0,    0,    0,   65,    0,    0,   30,    0,
    0,    0,    0,  108,  264,   32,  111,    0,    0,    0,
   33,    0,   72,   73,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   75,
    0,    0,   38,    0,    0,   77,    0,   79,    0,   81,
   39,   40,  261,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
   91,   92,  262,  355,    0,    0,   95,   96,    0,    0,
    0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
  105,    0,   57,   24,    0,   25,  106,  107,   26,  260,
    0,    0,    0,   27,   62,   63,    0,   28,    0,    0,
    0,    0,    0,   65,    0,    0,   30,    0,    0,    0,
    0,  108,  264,   32,  111,    0,    0,    0,   33,    0,
   72,   73,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   75,    0,    0,
   38,    0,    0,   77,    0,   79,    0,   81,   39,   40,
  261,    0,   41,    0,    0,   85,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
  262,  263,    0,    0,   95,   96,    0,    0,    0,    0,
    0,   57,   24,   98,   25,    0,    0,   26,  260,    0,
  678,  679,   27,   62,   63,    0,   28,    0,  680,    0,
    0,    0,   65,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,   53,    0,    0,   33,    0,   72,
   73,   34,    0,    0,    0,    0,    0,    0,    0,  108,
 1053,    0,  681,   36,    0,   37,   75,   53,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
   53,   41,    0,    0,   85,   53,    0,    0,    0,    0,
   53,    0,   53,   53,   53,   53,    0,    0,    0,    0,
   53,    0,    0,    0,   53,    0,   90,   91,   92,  262,
  263,    0,    0,   95,   96,    0,   53,    0,    0,   53,
    0,   53,   98,    0,  768,    0,  768,    0,  768,  678,
  679,  768,    0,  768,  768,    0,  768,  680,  768,    0,
  768,    0,  768,  768,  768,   53,    0,    0,  768,  768,
    0,   53,   53,    0,  768,  223,  768,  768,    0,    0,
    0,  768,    0,    0,    0,  768,    0,    0,  108,  264,
    0,  681,    0,    0,    0,    0,  768,  768,    0,  768,
    0,    0,    0,  768,  768,    0,    0,    0,    0,    0,
    0,  768,  768,    0,    0,  768,    0,    0,  768,    0,
    0,   57,   24,  768,   25,    0,    0,   26,  260,    0,
    0,    0,   27,   62,   63,    0,   28,    0,    0,    0,
    0,    0,   65,    0,    0,   30,    0,    0,    0,  768,
  768,    0,   32,    0,    0,    0,    0,   33,    0,   72,
   73,   34,  768,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   75,    0,    0,   38,
    0,    0,   77,    0,   79,    0,   81,   39,   40,  261,
    0,   41,    0,    0,   85,    0,    0,    0,    0,    0,
    0,    0,    0,  768,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,  262,
  263,    0,    0,   95,   96,    0,    0,    0,    0,  767,
    0,  767,   98,    0,  767,    0,  767,  767,    0,  767,
    0,  767,    0,  767,    0,  767,  767,  767,    0,    0,
    0,  767,  767,    0,    0,    0,    0,  767,    0,  767,
  767,    0,    0,    0,  767,    0,    0,    0,  767,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  264,
  767,    0,  767,    0,    0,    0,  767,  767,    0,    0,
    0,    0,    0,    0,  767,  767,    0,  767,  767,  767,
    0,  767,  767,    0,  767,  767,  767,  767,    0,  767,
    0,  767,    0,  767,  767,  767,    0,    0,    0,  767,
  767,    0,    0,    0,    0,  767,    0,  767,  767,    0,
    0,    0,  767,    0,    0,    0,  767,    0,    0,    0,
    0,    0,    0,    0,    0,  767,    0,    0,  767,    0,
  767,    0,    0,    0,  767,  767,    0,    0,    0,    0,
    0,    0,  767,  767,    0,   24,  767,   25,    0,  767,
   26,    0,    0, 1456,  767,   27,    0,  770,    0,   28,
    0,  771, 1457, 1458,    0,    0,  767, 1459,   30,    0,
    0,    0,    0, 1460,    0,   32,    0,    0,    0,    0,
   33,    0,    0,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,    0,
    0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
   39,   40,    0,   24,   41,   25,    0, 1461,   26,    0,
    0, 1456, 1462,   27,    0,  770,    0,   28,    0,  771,
 1457, 1458,    0,    0,  767, 1459,   30,    0,    0,    0,
    0, 1460,    0,   32,    0,    0,    0,    0,   33,    0,
    0,    0,   34,   53,    0,   53,    0,    0,   53,    0,
    0, 1463,    0,   53,   36,    0,   37,   53,    0,    0,
   38,    0,    0,    0,    0,    0,   53,    0,   39,   40,
    0,    0,   41,   53,    0, 1461,    0,    0,   53,    0,
 1462,    0,   53,   53,   53,   53,   53,    0,   53,    0,
    0,   53, 1464,   53,   53,    0,   53,   53,    0,    0,
   53,    0,    0,   53,    0,    0,   53,    0,   53,   53,
    0,    0,   53,   53,    0,   53,    0,    0,   53,    0,
    0,    0,   53,    0,   53,    0,   53,    0,    0,    0,
    0,   53,    0,    0,   53,    0,   53,    0,    0,    0,
   53,    0,    0,   53,    0,    0,    0,    0,   53,   53,
    0,    0,   53,    0,  172,   53,   24,    0,   25,    0,
 1464,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,  172,    0,    0,   34,   54,  615,   54,    0,
   53,   54,    0,    0,  616,    0,   54,   36,    0,   37,
   54,    0,    0,   38,    0,    0,  617,    0,    0,   54,
    0,   39,   40,    0,    0,   41,   54,    0,  618,    0,
    0,   54,    0,    0,    0,   54,   53,   54,   53,   54,
   53,   53,    0,    0,   54,    0,   53,   54,    0,   54,
   53,    0,    0,   54,  619,    0,   54,    0,    0,   53,
    0,   54,   54,    0,    0,   54,   53,    0,   54,    0,
    0,   53,    0,    0,    0,   53,   24,   53,   25,   53,
    0,   26,    0,    0,   53,    0,   27,   53,    0,   53,
   28,    0,    0,   53,   29,    0,   53,    0,    0,   30,
    0,   53,   53,    0,   31,   53,   32,    0,   53,    0,
    0,   33,    0,  620,    0,   34,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
    0,   39,   40,    0,   24,   41,   25,    0,   42,   26,
    0, 1389,    0,   54,   27,    0,    0,    0,   28,    0,
    0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0, 1390,    0,   34,    0,    0,    0,    0,   39,    0,
    0,    0,    0,   53,    0,   36,    0,   37,    0,   39,
    0,   38, 1391,    0,   39,    0,    0,    0,   39,   39,
   40,   39,    0,   41,    0,    0,   85,    0,    0,    0,
    0,    0,    0,   39,   39,    0,    0,    0,   39,   39,
    0,   37,    0,   43,   39,    0,   39,   39,   39,   39,
    0,    0,   37,    0,   39,    0,    0,   37,   39,    0,
   39,   37,    0,    0,   37,    0,    0,    0,    0,    0,
   39,    0,   39,   39,    0,   39,   37,   37,    0,   39,
    0,   37,   37,    0,   53,    0,    0,   37,    0,   37,
   37,   37,   37,    0,    0,   53,    0,   37,    0,   39,
   53,   37,    0,   37,   53,    0,    0,   53,    0,   39,
   39,  387,    0,   37,    0,    0,   37,    0,   37,   53,
   53,    0,   37,    0,   53,   53,    0,   53,    0,    0,
   53,    0,   53,   53,   53,   53,    0,    0,   53,    0,
   53,    0,   37,   53,   53,    0,   53,   53,    0,    0,
   53,    0,   37,   37,    0,    0,   53,    0,    0,   53,
    0,   53,   53,   53,    0,   53,    0,   53,   53,   53,
    0,    0,    0,   53,    0,   53,   53,   53,   53,    0,
    0,    0,    0,   53,    0,   53,    0,   53,    0,   53,
    0,    0,   53,    0,    0,   41,    0,    0,    0,   53,
    0,    0,   53,    0,   53,   53,    0,   53,   53,    0,
   53,    0,    0,    0,    0,   53,    0,   53,   53,   53,
   53,    0,    0,    0,    0,   53,    0,    0,   53,   53,
   53,    0,    0,    0,    0,    0,    0,    0,   42,    0,
    0,   53,    0,   53,   53,    0,   53,    0,   53,    0,
    0,    0,    0,   53,    0,   53,   53,   53,   53,    0,
    0,    0,    0,   53,    0,    0,    0,   53,    0,    0,
   53,    0,    0,    0,    0,    0,   53,   53,    0,   53,
  225,    0,   53,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   53,    0,
    0,    0,    0,    0,   53,   53,
  };
  protected static readonly short [] yyCheck = {            17,
  306,   17,  307,   18,   52,   17,   17,    4,   52,  549,
  240,  196,  361,  551,  321,  238,  296,  195,   60,  499,
  330,  521,   69,  422,  392,  345,  305,  305,  604,  165,
  199,  253,  392,  611,  422,  119,  121,  121,  303, 1042,
  403,   88,   89,  806,  838,  808,   93,   78,   59, 1293,
    0,  386, 1250,  995,  622,  631,   74,  422,  402,  256,
   78,   45,  340,  647,   48,    0,  256,  256,  115,   80,
 1363,   82,  268,  256, 1047,  256,  256,   95,   17,  386,
   98,  256,  256,    6,  256,  256, 1372, 1527,  268,  852,
 1334,   17,  855,  282,  256,  256, 1287,   60,  145, 1397,
   62,  256,  256, 1347,   66,   67,   68, 1245,   70,   71,
  256,  256,  256,   75,   76,  325,  372,   17, 1416,   81,
   82,  256,   84,  375,   86,  314,  256,   17,  268,   91,
   92,  343,  405,  371,  256,  256,  504,  257,  256,  256,
   17,  256,  380,   17,  417,  256, 1439,  165,  196,  165,
 1288,  256,  196,  165,  165,  256,  339,    0,  120,  371,
 1351,  344,  371,  346,  294,  443,  349,  350,  339,  352,
  353,  380,  424,  344,  256,  346,  744,  433,  349,  350,
  402,  352,  353,   17, 1470,  375,  256,   17,  256,   17,
  238,   17, 1478,  256,  238,  378,   17,  378,  395,  371,
  374,  376,  376,  375,  378,  252,  253,  378,  363,  371,
  371,  373,  422,  256,  375,  583, 1656,   17,  363,  266,
  374,  418,  376,  583,  378,  545,  165, 1200,  425,  597,
  426,  375,  372,  422,  424,  253,  371,  467,  373,  165,
  375,  259,  548,  466,  228,  329,  426,  332,  332, 1535,
  433,  293,  424,  358,  256,  604,  303,  592,  342,  433,
   60,  303,  433,  424,   64,  165, 1208,  422,  636,  380,
  385,  809,  373,  641,  642,  165,  422,  422,  296,  433,
  424,  641,  631,  301,  302,  592,  426,  334,  165,  424,
  868,  165,  427, 1591,  638,  365,  256,  344,  316,  261,
  422,  422,  335,  265,  422,  422,  324,  257,  326,  356,
  479,  234,  330,  256,  325,  622,  256,  385,  256,  903,
 1618,  256,  385,  428,  429,  430,  431,  363,  346,  347,
  293,  165, 1630,  277, 1632,  165,  379,  165,  294,  165,
  422,  343,  256,  305,  165,  361,  256,  394,  372,  361,
  306,  398,  256,  268,  256,  402,  403, 1120,  256,  390,
 1247,  276,  294,  326,  371,  165,  373,  256,  256,  371,
  256,  256,  390,  375,  306,  377,  378,  256,  380, 1173,
  422,  256, 1520,  385,  402,  403,  422, 1585,  294,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  433,  448,  449, 1290,  339,  452,  974, 1651,  343,  433,
  745, 1549, 1550,  351,  257, 1553,  638,  419,  466,  363,
  380,  439,  466,  256,   88,   89,  474,  256, 1566,  272,
  474, 1569,  256,  373,  277,  378,  371,  744,  281, 1683,
  375, 1204,  377,  378,  379,  380, 1584,  111,  363,  363,
  385,  357,  256,  296,  376,  818, 1459,  363,  256,  422,
  374,  371,  376,  770,  378,  256,  422,  373,  372, 1007,
 1608,  377,  256,  520,  378,  522,  256,  379,  422,  423,
  323,  379,  371,  793,  390,  985,  470,  471,  856,  375,
  378,  380,  476,  293,  379,  358,  856,  376,  325,  342,
 1263,  376,  549,  514,  256,  256,  262,  422,  422, 1272,
  339,  433,  266,  256,  372,  344,  422,  346,   88,   89,
  349,  350,  752,  352,  353,  924,  326,  895,  575,  547,
  335,  549,  263,  551,  343,  199,  924,  256, 1301,  203,
  204,  111,  298,  376,  363,  264,  811,  910,  256,  363,
  395,  886,  376,  564,  516,  785,  778,  341,  521,  924,
  314,  361,  305,  581,  380,  256,  266,  585, 1146,  257,
  321,  740,  376,  418,  621,  433, 1114,  305,  376,  886,
  598,  256,  600,  374,  315,  596,  395,  378,  604,  373,
  637,  638,  604,  373,  263,  422,  305,  682,  682,  372,
  611,  563,  372,  422,  433,  269,  325,  277,  422,  418,
  380,  281,  256,  432,  314,  631,  425,  433,  432,  631,
  638,  373,  422,  432,  372,  379,  382,  383,  646,  647,
  378,  295,  340,  203,  204,  372,  372,  385,  973,  365,
  687,  378,  372,  307,  376, 1223,  315,  376,  339,  375,
  256,  315,  375,  344,  376,  346,  269,  321,  349,  350,
  433,  352,  353,  433,  339,  971,  377,  974,  373,  344,
  256,  346,  342,  286,  349,  350,  422,  352,  353,  379,
  727, 1001,  729,  646,  647,  433,  376,  823,  352,  353,
  375,  738, 1268, 1379,  916,  339,  433,  433,  424,  269,
  344,  433,  346,  433,  433,  349,  350,  725,  352,  353,
  272,  433,  730,  731,  373,  733,  427,  381,  377,  305,
  256,  521,  386, 1620, 1621,  295, 1004, 1006,  272, 1379,
  272,  778,  422,  339,  296,  256,  256, 1042,  344,  380,
  346, 1427,  433,  349,  350,  315,  352,  353,  269,  796,
 1378, 1379,  296,  378,  296,  372, 1155,  421,  433, 1158,
  778,  323, 1161,  377,  811,  286,  380, 1155,  427,  811,
 1158,  818, 1400, 1161,  341,  793,  380, 1427,  372,  323,
 1677,  323,  352,  353,  448,  449, 1115,  956,  357,  433,
 1155,  809,  371, 1158, 1379,  420, 1161, 1379,  816, 1427,
  818,  256, 1302,  339,  604,  422,  373, 1117,  344,  339,
  346,  381, 1141,  349,  350,  479,  352,  353, 1379,  339,
  378,  390, 1450,  357,  344, 1131,  346,  433,  422,  349,
  350,  631,  352,  353,  845, 1375,  847,  390,  885,  364,
  858,  371, 1427,  377,  862, 1427,  646,  647,  771,  379,
  375,  421,  377, 1379,  872,  866,  390,  868, 1379, 1081,
  907,  388,  420,  910, 1379,  379, 1427,  343, 1217,  916,
   17,  396,  397,    6,  373,  393,  923,  377,  448,  449,
  380,  395,  924,  339,   17,  903,  385, 1012,  343,   21,
  372,  416,  910,  343, 1072,  371,  378,  433,  916,  424,
  918, 1427,  427,  951,  418,  339, 1427,  951,  343, 1078,
  928,  425, 1427,   60,  385,  371,  371,   64,  432, 1268,
  375,   53,  377,  378,  395,  380,  357,   60,  592, 1054,
  385,   64, 1212,  272,  375,  385,  377,  371,  277,  339,
  903,  375,  281,  343, 1250,  395,  377,  418,  343,  395,
  385,  969, 1482,  971,  425,   88,   89,  296,  622,  390,
  395,  924,  339,  343,  343, 1012, 1496,  339,  418,  987,
  339,  371,  418, 1253,  992,  425,  371,  995,  111,  425,
  380, 1465,  432,  418,  323,  380,  432, 1005, 1518, 1007,
  425,  371,  371, 1477,  371,  357,  389,  432, 1045,  371,
  380,  380,  371,  342,  357,  343,  806, 1054,  808,  371,
  363,  398,  399,  375, 1363, 1465, 1496,  681,  165, 1299,
  373, 1243,  371,  376,  377,  378,  377, 1477,  390,  380,
  395,  380,  165,  371, 1081, 1573,  372,  390,  961,  306,
  376,  308,  306,  375,  380, 1063,  313, 1065, 1010,  313,
 1068, 1098,  852,  418,  404,  855,  372, 1104,  325,  372,
  425,  325,  378, 1081,  371,  378,  394,  386,  387,  422,
  203,  204,  385,  380,  374,  375,  740,  418,  378,  371,
  744,  400,  401,  375,  425,  377,  378,  372,  380, 1319,
 1439,  376, 1315,  385,  306,  380, 1114, 1635,  373, 1117,
 1285,  313,  378,  903,  380, 1385,  770, 1440,  374,  385,
 1157,  681,  378, 1155, 1447,  419, 1158,  372,  364, 1161,
 1138,  376,  372,  378,  924, 1493,  372,  419,  378,  375,
 1148,  377,  378, 1440, 1672, 1146,  269,  374,  422,  385,
 1447,  378, 1510,  422,  374, 1163,  293, 1165,  378, 1167,
  396,  397, 1170,  277, 1459,  374,  256, 1697, 1698,  378,
  293, 1529,  295, 1531,  374, 1088,  376, 1090,  378, 1092,
  416,  377,  374,  375,  307,  377,  378,  379,  424,  326,
  844,  427,  315, 1155, 1181,  374, 1158,  433,  321,  378,
 1208,  371, 1155,  326, 1212, 1158, 1243,  380, 1161,  863,
  376, 1217,  378,  374,  380, 1217,  375,  378,  377, 1227,
 1228,  374, 1223,  364,  361,  378,  402,  403,  882,  352,
  353,  372,  886,  380,  375, 1243,  377,  378,  361, 1244,
  256,  376, 1250,  378,  376, 1253,  378, 1285,  380, 1287,
  374, 1285,  376, 1287,  378,  396,  397,  375,  381,  380,
  372,  379, 1268,  386,  376,  374, 1268,  377, 1276,  378,
   88,   89,  372,  256, 1282,  416,  376, 1315,  372,  372,
  373, 1315,  376,  424,  844,  422,  427,  294,  376, 1585,
  378, 1299,  433,  111,  427,  428,  429,  430,  421,  422,
  378,  379,  956,  863, 1312, 1313,  390,  391,  392,  378,
  374,  380,  376, 1351,  366,  367,  378, 1351,  380,  380,
  974,  975,  882,  354,  355,  448,  449,  374,  294,  376,
 1120,  374,  374,  376,  376,  376,  422,  378, 1375,  343,
 1378, 1379,  354,  355, 1378, 1379,  376,  374,  378,  376,
  374,  261,  376,  378,  376,  380, 1364, 1363,  378,  380,
  380, 1363, 1400,  372,  373, 1155, 1400, 1375, 1158,  422,
  378, 1161,  380,  373,  284, 1383,  378, 1385,  380,  418,
  419,  368,  369,  356,  521,  203,  204,  297, 1042, 1427,
  366,  367,  302, 1427, 1431,  366,  367,  307,  521,  309,
  310,  311,  312,  368,  369,  423,  424,  317,  425,  426,
  379,  321, 1450, 1709, 1204,  975, 1450,  431,  432,  418,
  376,  376,  380,  333, 1078,  385,  336, 1217,  338,  372,
  378,  376, 1086, 1439,  385,  433,  376, 1439,  422,  294,
  294,  378, 1443,  376,  376,  256,  376,  378,  256,  375,
  432,  269,  362,  380,  432,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  294,  294,  604,  385,  592,
  422,  376,  378, 1263,  377,  379,  378,  295, 1268,  377,
  422,  604, 1272,  376,  385,  380,  378,  378,  378,  307,
  378,  427,  433,  376,  631,  371, 1504,  315,  378,  622,
 1501,  378,  376,  421,  379,  343,  378,  376,  631,  646,
  647, 1301,  422,  294,  294,  378,  374,  379,  375,  371,
  256,  256,  422,  646,  647, 1563, 1086,  378,  422, 1563,
  256,  256,  385,  280,  352,  353,  256,  371,  343,  372,
  376,  376, 1580,   88,   89,  385, 1580,  725,  380,  298,
  376,  378,  730,  731,  374, 1593, 1594,  380,  681, 1593,
 1594,  375,  378,  381,  376, 1573,  111,  380,  378,  376,
 1571,  374,  376, 1363,  421,  347,  385, 1585,  427,  385,
  371,  256, 1620, 1621,  385,  385, 1620, 1621,  256,  376,
  372,  376,  347,  379, 1602,  378,  374,  376,  375,  374,
  374,  339,  371,  421,  348,  372,   94,  422,  378,  348,
  376,  375,  100,  101,  102,  103,  104,  105,  106,  107,
  422,  744,  256,  385,  372,  371,  371, 1635,  380,  371,
  448,  449,  372,  356,  375, 1289,  337,  380,  305, 1677,
  372,  378,  376, 1677,  372,  376,  422,  770,  372, 1439,
  380,  422,  373,  375,  199,  371,  375,  422,  203,  204,
 1697, 1698,  375,  422, 1672,  375,  377,  385,  375,  806,
  343,  808,  371,  375,  380,  373,  385,  377,  375, 1680,
 1681,  376,  376,  806,  377,  808, 1687, 1688,  378, 1697,
 1698,  378,  378,  256,  256,  378,  380,  376,  376,  380,
 1354, 1709,  374,  265,  380,  267,  376,  422,  270,  380,
  422,  376,  376,  275,  422,  852,  385,  279,  855,  422,
  372,  844,  385, 1377,  269,  374,  288,  372,  376,  852,
  315,  263,  855,  295,  375,  375,  372,  376,  300,  385,
  863,  376,  304,  380,    0,  422,    0,  371,  380,  372,
  295,  380,    0,  380,  316,  376,  318,  372,  376,  882,
  322,  371,  307,  886,  376,  422,  903,  374,  330,  331,
  315,  380,  334,  372,  376,  337,  321,  372,  376,  380,
  903,  374,  371,  380, 1438,  372, 1440,  924,  376,  422,
  380,  969,  422, 1447,  376,  376,  380,  372,  376,  372,
  371,  924, 1456, 1457,  372, 1459,  380,  352,  353,  315,
  377, 1465,  372,  263,  380,  380,  380, 1377,   51,  380,
    5,  309,  380, 1477,  380,  380,  380, 1005, 1482,   12,
 1484, 1078, 1243, 1487, 1243, 1400,  381,  956, 1450, 1455,
 1295,  386, 1496, 1625, 1641, 1588, 1576,  256, 1605, 1501,
  978,  974,  975,  978, 1571,  784,  265,  345,  267, 1482,
  422,  270,  978,  681, 1518,  973,  275,  355, 1415, 1427,
  279, 1681, 1502, 1688, 1682, 1598,  421, 1351, 1438,  288,
 1594, 1531,  256, 1593,  951, 1063,  295, 1065,  321, 1354,
 1068,  300,  816,  916, 1001,  304, 1456, 1457, 1131,  778,
   72,  348,  811,  448,  449,  422,  422,  316,  600,  318,
 1161, 1157,  433,  322,  647,  434,  436,  435,  886, 1042,
 1438,  330,  331,  437, 1484,  334,  438, 1487,  337, 1249,
  418,  419,  420,  592,  479,  423,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
  438, 1331,  165, 1217, 1116, 1228, 1141, 1100, 1202, 1217,
 1215,  565, 1016, 1086, 1302,  339, 1271,  457,  736, 1433,
  344,  457,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356, 1120,  946, 1163, 1313, 1165,   -1, 1167,
  953,   -1,  366,  367,   -1,   -1,   -1, 1120,  372,    0,
  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,
   -1,   -1,   -1,  422,  388,  389,   -1,   -1, 1155,  393,
  394, 1158,   -1,   -1, 1161,   -1,  844,   -1,  402,  403,
  404,  405, 1155,   -1,   -1, 1158,   -1,  261, 1161,   -1,
   -1,   -1,   -1,  417,   -1,  863,   -1,  592,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  545,   -1,  433,
  284,   -1,   -1,   -1,  882,   -1,   -1, 1204,   -1,  261,
   -1,   -1,   -1,  297,   -1,   -1,   -1,  622,  302,   -1,
 1217, 1204,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  315,  284,  317, 1217,   -1,   -1,  321, 1276,   -1,
   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,  333,
  302,   -1,  336,  305,  338,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317, 1263,   -1,   -1,  321,
   -1, 1268,   -1,  325, 1312, 1272,  681,   -1,  362,  627,
 1263,  333,   -1,   -1,  336, 1268,  338,   -1,  372, 1272,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  975,   -1,   -1,
   -1,   -1,   -1,   -1, 1301,  357, 1289,    0,   -1,   -1,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1301,   -1,
  372,  373,   -1,  375,   -1,  377, 1364,   -1,   -1,   -1,
  678,  679,   -1,   -1,   -1,  740,   -1,   -1,  390,  744,
   -1,   -1,   -1,   -1,   -1, 1383,   -1,   -1,  696,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1, 1042,  770, 1363,   -1,   -1,    0,
  422, 1354,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
 1363,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356, 1377,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,  366,  367,   -1,   -1,   -1, 1086,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  394,   -1,   -1,   -1,   -1,   -1,  298,   -1,  844,
   -1,   -1, 1439,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1, 1438, 1439, 1440,  863,   -1,
   -1,   -1,   -1,   -1, 1447,   -1,   -1,  815,   -1,   -1,
  433,   -1,   -1, 1456, 1457,   -1, 1459,  882,  339,   -1,
   -1,  886,  343,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1, 1484,  363,    0, 1487,  366,  367,   -1,   -1,   -1,
  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,  390,
   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,  956,   -1,   -1,   -1,   -1,  417,   -1,   -1,  420,
   -1,  422,   -1,  424,  257,   -1,  427,   -1,  261,  974,
  975,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,  272,
   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  301,  302,
  261, 1289,  263,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,  256,   -1,   -1,  321,   -1,
  323,  262,   -1,  284,   -1,   -1,   -1, 1042,   -1,   -1,
  333,   -1,  335,  336,   -1,  338,  297,   -1,   -1,  342,
   -1,  302,   -1, 1001,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  315,   -1,  317,  298,   -1,  362,
  321,   -1,   -1, 1078,    0,   -1, 1354,   -1,   -1,  372,
  373, 1086,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1377,
   -1, 1049,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,  362,  343,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
  371,  372,  373,  374,  375,  376,   -1,  378,  379,  380,
   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,  256,
 1438,   -1,  393,  394,  261,  262,   -1,  398,  399,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1, 1456, 1457,
   -1, 1459,   -1,   -1,   -1,   -1,  417,  284,   -1,  420,
   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,   -1,
  297,  298,  433,   -1,   -1,  302, 1484,   -1,  305, 1487,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,    0,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  339,   -1,   -1,   -1,  343,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,  362,  363,  364,   -1,  366,
  367,   -1,   -1,   -1,  371,  372,   -1,  374,  375,  376,
  377,  378,  379,  380, 1289,  382,  383,   -1,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,   -1,  420,   -1,  422,   -1,  424,   -1,   -1,
  427,  257,   -1,   -1,   -1,  261,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1, 1354,
   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297, 1377,   -1,   -1,  301,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
    0,  317,   -1,   -1,   -1,  321,   -1,  323,   -1,  357,
   -1,   -1,   -1,   -1,   -1,  363,  364,  333,   -1,   -1,
  336,   -1,  338,  371,   -1,  373,  342,  375,  376,  377,
  378,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  390, 1438,   -1, 1440,  362,   -1,  396,  397,
   -1,   -1, 1447,   -1,   -1,  371,  372,  373,   -1,   -1,
   -1, 1456, 1457,   -1, 1459,   -1,   -1,   -1,  416,   -1,
   -1,   -1,   -1,   -1,  422,   -1,  424,   -1,   -1,  427,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1, 1484,
   -1,   -1, 1487,  264,  265,  266,  267,  268,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,  280,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
    0,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
  371,  372,   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  421,  422,  423,  424,   -1,  426,  256,  257,   -1,   -1,
   -1,   -1,  433,   -1,  264,  265,  266,  267,  268,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
    0,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,
  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,
  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,   -1,   -1,  375,   -1,   -1,   -1,   -1,
  380,  381,  382,  383,  384,   -1,  256,   -1,  388,   -1,
  390,  261,  262,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  421,  422,  423,  424,   -1,  426,  297,  298,   -1,
    0,   -1,  302,  433,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,  343,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
  390,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,
   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
    0,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,  343,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,
   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,    0,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,  343,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,    0,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,
   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,    0,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,  343,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,    0,  366,  367,   -1,   -1,
   -1,  371,  372,   -1,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  433,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,    0,
   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  362,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,  372,  373,  272,   -1,   -1,   -1,   -1,  277,   -1,
  381,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,  257,   -1,   -1,  307,  261,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
  272,  422,  321,   -1,  323,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,   -1,  333,   -1,  335,  336,    0,  338,
   -1,   -1,   -1,  342,  296,  297,   -1,   -1,   -1,  301,
  302,   -1,  257,   -1,   -1,  307,  261,  309,  310,  311,
  312,   -1,   -1,  362,   -1,  317,   -1,  272,   -1,  321,
   -1,  323,  277,   -1,  373,   -1,  281,   -1,   -1,  284,
   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,
  342,  296,  297,   -1,   -1,   -1,  301,  302,   -1,  257,
   -1,    0,  307,  261,  309,  310,  311,  312,   -1,   -1,
  362,   -1,  317,   -1,  272,   -1,  321,   -1,  323,  277,
  372,  373,   -1,  281,   -1,   -1,  284,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,   -1,   -1,  342,  296,  297,
   -1,   -1,   -1,  301,  302,   -1,  257,   -1,    0,  307,
  261,  309,  310,  311,  312,   -1,   -1,  362,   -1,  317,
   -1,  272,   -1,  321,   -1,  323,  277,  372,  373,   -1,
  281,   -1,   -1,  284,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,   -1,  342,  296,  297,   -1,   -1,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  362,   -1,  317,   -1,   -1,  257,
  321,   -1,  323,  261,   -1,  373,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,  272,  336,   -1,  338,   -1,  277,
   -1,  342,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,  362,  257,  301,  302,   -1,  261,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,
   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  296,  297,   -1,  342,  257,  301,  302,   -1,  261,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  272,   -1,  317,   -1,  362,  277,  321,   -1,  323,  281,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  296,  297,   -1,  342,   -1,  301,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,  362,  257,  321,
   -1,  323,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,  272,  336,   -1,  338,   -1,  277,   -1,
  342,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
  362,   -1,  301,  302,   -1,  257,   -1,   -1,  307,  261,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
  272,   -1,  321,   -1,  323,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,   -1,  333,   -1,   -1,  336,   -1,  338,
   -1,   -1,   -1,  342,  296,  297,   -1,   -1,   -1,  301,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  362,   -1,  317,   -1,   -1,   -1,  321,
   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,  256,  336,   -1,  338,   -1,   -1,   -1,
  342,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,
  362,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,  344,  345,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,  384,   -1,   -1,   -1,  388,  298,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,  421,  422,
  423,  424,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
  433,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
   -1,  363,  364,  298,  366,  367,   -1,   -1,   -1,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  380,   -1,
  382,  383,   -1,  385,  386,  387,  388,  389,  390,  391,
  392,  393,  394,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  418,   -1,  256,   -1,
  422,   -1,  424,  425,  262,  427,   -1,   -1,  363,  364,
   -1,  433,   -1,   -1,   -1,   -1,   -1,  372,  373,  374,
  375,  376,  377,  378,   -1,  380,   -1,  382,  383,   -1,
  385,  386,  387,  388,  389,   -1,  391,  392,  393,  394,
  298,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,   -1,   -1,   -1,   -1,  422,   -1,  424,
   -1,   -1,  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,  366,  367,
   -1,   -1,   -1,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  380,  256,  382,  383,   -1,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  256,   -1,   -1,  422,   -1,  424,  262,   -1,  427,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,
   -1,  374,   -1,  376,  339,  378,  379,  380,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,   -1,   -1,   -1,   -1,   -1,  363,  364,
   -1,  366,  367,   -1,   -1,   -1,  371,  372,  373,  374,
  375,  376,  377,  378,  379,  380,  256,  382,  383,   -1,
  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
  433,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,   -1,  256,   -1,   -1,  422,   -1,  424,
  262,   -1,  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,  372,   -1,  374,   -1,  376,  339,  378,  379,
  380,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
   -1,  363,  364,   -1,  366,  367,   -1,   -1,   -1,   -1,
  372,  373,  374,  375,  376,  377,  378,  379,  380,   -1,
  382,  383,   -1,  385,  386,  387,  388,  389,  390,  391,
  392,  393,  394,  433,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,   -1,  256,  256,   -1,
  422,   -1,  424,  262,   -1,  427,   -1,  265,   -1,  267,
   -1,  433,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,
   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
  256,   -1,   -1,   -1,   -1,  364,   -1,  366,  367,   -1,
   -1,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,   -1,  385,  386,  387,  388,
  389,  390,  391,  392,  393,  394,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,   -1,
  256,   -1,   -1,   -1,  422,  424,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,  367,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  394,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  405,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  417,   -1,  256,   -1,   -1,   -1,   -1,  364,   -1,
  366,  367,   -1,   -1,   -1,  371,  372,  433,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,   -1,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,   -1,  256,   -1,   -1,   -1,   -1,  424,  262,
   -1,  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,  298,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  394,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  405,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  417,   -1,   -1,   -1,   -1,   -1,
   -1,  364,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,
  433,  374,  375,  376,  377,  378,  379,  380,   -1,  382,
  383,   -1,  385,  386,  387,  388,  389,  390,  391,  392,
  393,  394,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,   -1,  256,  256,   -1,   -1,
   -1,  424,  262,   -1,  427,   -1,  265,   -1,  267,   -1,
  433,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  364,   -1,  366,  367,   -1,   -1,
   -1,   -1,  372,   -1,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,  256,
  256,   -1,   -1,  422,  424,  262,   -1,  427,   -1,  265,
   -1,  267,   -1,  433,  270,   -1,   -1,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,  366,
  367,   -1,   -1,   -1,   -1,  372,   -1,  374,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,   -1,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,  256,   -1,  261,   -1,  422,  424,  262,   -1,
  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  297,   -1,   -1,   -1,  298,  302,   -1,   -1,  305,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,  256,   -1,   -1,  325,   -1,
   -1,  262,   -1,   -1,   -1,  266,  333,   -1,   -1,  336,
   -1,  338,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,  362,   -1,  298,   -1,   -1,
   -1,   -1,  366,  367,   -1,  372,   -1,   -1,  372,   -1,
  374,   -1,  376,  314,  378,  379,  380,   -1,  382,  383,
   -1,  385,  386,  387,  388,  389,  390,  391,  392,  393,
  394,   -1,   -1,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  256,  417,   -1,  422,  357,   -1,  262,   -1,
   -1,   -1,  363,  364,   -1,   -1,   -1,   -1,   -1,  433,
   -1,  372,  373,  374,  375,  376,  377,  378,  379,  380,
   -1,  382,  383,   -1,  385,  386,  387,  388,  389,  390,
  391,  392,  393,  394,  298,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,   -1,   -1,   -1,
   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,   -1,
   -1,   -1,  433,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,
  364,  256,  366,  367,   -1,   -1,   -1,  262,  372,  373,
  374,   -1,  376,  377,  378,  379,  380,   -1,  382,  383,
   -1,   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,
  394,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  416,  417,   -1,   -1,   -1,   -1,  422,   -1,
  424,   -1,   -1,  427,   -1,   -1,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,
  256,  366,  367,   -1,   -1,   -1,  262,  372,   -1,  374,
  375,  376,  377,  378,  379,  380,   -1,  382,  383,   -1,
   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  416,  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,
   -1,   -1,  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,  256,
  366,  367,   -1,   -1,   -1,  262,  372,   -1,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,   -1,   -1,
  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  416,  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,
   -1,  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,  256,  366,
  367,   -1,   -1,   -1,  262,  372,   -1,  374,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,
  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  416,
  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,
  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,  363,  256,   -1,  366,  367,
   -1,   -1,  262,   -1,  372,  373,  374,   -1,  376,   -1,
  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,
  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
  398,  399,  400,  401,  402,  403,  404,  405,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,
   -1,   -1,   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,
  298,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  433,   -1,  363,  256,   -1,  366,  367,
   -1,   -1,  262,   -1,  372,   -1,  374,   -1,  376,   -1,
  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,
  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
  398,  399,  400,  401,  402,  403,  404,  405,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,
   -1,   -1,   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,
  298,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  433,   -1,   -1,  256,   -1,  366,  367,
   -1,   -1,  262,   -1,  372,   -1,  374,   -1,  376,   -1,
  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,
  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
  398,  399,  400,  401,  402,  403,  404,  405,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,
  298,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,
  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,
  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
  398,  399,  400,  401,  402,  403,  404,  405,   -1,  256,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  264,  265,  417,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  433,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  359,  360,  361,  362,  363,  256,   -1,  366,
  367,  366,  367,   -1,   -1,   -1,   -1,  372,  375,  374,
   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,
   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,  398,  399,  400,  401,  402,  403,  404,
  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  417,   -1,  421,  422,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  432,  433,   -1,  433,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,
   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,
  379,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  256,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,
   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,  386,
  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  417,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,  367,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,
  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,  400,  401,  402,  403,  404,  405,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  417,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  256,   -1,   -1,   -1,  433,   -1,   -1,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,   -1,
  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,
   -1,   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,
  394,   -1,   -1,   -1,   -1,   -1,  400,  401,  402,  403,
  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  417,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
   -1,   -1,   -1,  386,  387,  388,  389,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,  400,  401,  402,
  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  256,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,
   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,   -1,   -1,   -1,  386,  387,  388,  389,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  417,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  298,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,
   -1,   -1,   -1,  364,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,  433,  375,   -1,  377,  378,   -1,   -1,
   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,  390,
  391,  392,  393,  394,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  416,  417,   -1,  256,   -1,
   -1,   -1,   -1,  424,   -1,   -1,  427,   -1,   -1,  339,
   -1,   -1,  433,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,
  256,   -1,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,
  378,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,  256,   -1,  402,  403,  404,  405,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  417,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
  366,  367,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  404,  405,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  417,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  433,   -1,   -1,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,   -1,
  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,  393,
  394,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  404,  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  417,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  433,   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  404,  405,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,
  378,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  389,   -1,   -1,   -1,   -1,  394,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  404,  405,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  417,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
  366,  367,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,  394,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  404,  405,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  417,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  433,   -1,   -1,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,   -1,
  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  404,  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  417,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,  267,
  268,  433,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,  380,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,  421,  422,  423,  424,   -1,  426,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,  366,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
  375,   -1,   -1,   -1,   -1,  380,  381,  382,  383,  384,
   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  421,  422,  423,  424,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,  423,
  424,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,
  423,  424,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,
  422,  423,  424,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,
   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  288,  306,   -1,   -1,   -1,   -1,
   -1,  295,  313,   -1,   -1,  316,  300,  318,  319,   -1,
  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,
  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,  378,   -1,  363,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  422,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
  371,  372,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,  427,  288,   -1,   -1,
   -1,  432,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  421,  422,  423,  424,   -1,   -1,  427,  264,  265,   -1,
  267,  432,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,  371,  372,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,   -1,   -1,  376,   -1,   -1,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  421,  422,  423,  424,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  422,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
  306,   -1,   -1,   -1,   -1,   -1,  295,  313,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,
   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,
   -1,   -1,  388,   -1,  390,  374,   -1,   -1,   -1,   -1,
  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  421,  422,  423,  424,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  422,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,  320,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,
  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,  366,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,
   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  421,  422,  423,  424,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  422,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,  337,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,  423,
  424,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  422,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  421,  422,
  423,  424,  262,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,  298,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,  377,   -1,   -1,
   -1,  381,  382,  383,  384,  385,   -1,   -1,  388,   -1,
  390,  256,   -1,   -1,   -1,   -1,  396,  397,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  421,  422,  288,  424,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,  366,  367,   -1,   -1,   -1,   -1,  372,   -1,   -1,
  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,
   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  421,  422,  423,  424,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,  423,
  424,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  422,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,
  423,  424,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  422,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  421,
  422,  423,  424,  262,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,  298,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  343,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,  377,   -1,
   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,  423,
  424,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,
  423,  424,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  422,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,
   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,
  422,  423,  424,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  422,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,  256,   -1,
  421,  422,  423,  424,  262,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  327,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
  298,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,  381,  382,  383,
  384,   -1,  386,  387,  388,  389,  390,  391,  392,  393,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,  377,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,  261,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,  284,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  297,  334,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  315,   -1,
  317,   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,  333,   -1,   -1,  336,
   -1,  338,  375,   -1,  377,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,  362,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,  372,  373,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,  261,
   -1,  263,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,  284,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  297,  334,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,  333,   -1,   -1,  336,   -1,  338,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
  362,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
  372,  373,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,  261,   -1,  263,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,  284,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  297,  334,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,  333,   -1,   -1,  336,
   -1,  338,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,  362,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,  372,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,  261,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,  284,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  297,  334,   -1,   -1,  301,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,  333,   -1,   -1,  336,   -1,  338,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
  362,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,  261,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,  284,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  297,  334,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,  333,   -1,   -1,  336,
   -1,  338,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,  362,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,  256,   -1,   -1,   -1,  390,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,  421,  422,
  293,  424,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,  262,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,  362,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  371,  372,
  373,  285,   -1,   -1,  288,   -1,   -1,   -1,  381,   -1,
   -1,  295,   -1,   -1,   -1,  298,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  422,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,  364,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,  375,  376,  377,  378,  379,   -1,   -1,  382,
  383,   -1,   -1,  386,  387,  388,  389,  390,  391,  392,
  393,  394,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,   -1,   -1,  421,  422,   -1,
   -1,  424,   -1,  261,  427,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,  294,  295,  296,  297,
   -1,   -1,  300,   -1,  302,   -1,  304,   -1,  306,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  315,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,   -1,   -1,
  368,  369,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,  422,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,  338,
   -1,   -1,   -1,  342,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,   -1,
  277,   -1,  279,  362,  281,  282,  283,  284,   -1,   -1,
  287,  288,   -1,  372,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,  381,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,  422,   -1,  342,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,  362,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,  372,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,  381,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,   -1,  422,   -1,  342,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,  362,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,  381,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,   -1,  336,  337,  338,   -1,  422,   -1,  342,
  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,  362,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,  372,
   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,
   -1,  302,  261,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,  284,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,  261,  336,  337,  338,  297,  422,
   -1,  342,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  284,  317,   -1,
   -1,  362,  321,   -1,   -1,   -1,  325,   -1,   -1,  261,
  297,  372,   -1,   -1,  333,  302,   -1,  336,   -1,  338,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,  284,   -1,  321,   -1,   -1,   -1,  325,   -1,
   -1,   -1,   -1,  362,   -1,  297,  333,   -1,   -1,  336,
  302,  338,   -1,  372,   -1,  307,   -1,  309,  310,  311,
  312,  422,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  362,  264,  265,   -1,  267,
   -1,  333,  270,  271,  336,  372,  338,  275,  276,  277,
   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,
  288,   -1,   -1,  422,  275,   -1,   -1,  295,  279,   -1,
  362,   -1,  300,   -1,  302,  303,  304,  288,  306,   -1,
   -1,   -1,   -1,   -1,  295,  313,   -1,   -1,  316,  300,
  318,  319,   -1,  304,  322,  422,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  316,  334,  318,   -1,   -1,
   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
  422,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,   -1,
  378,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  422,  300,   -1,  302,  303,  304,   -1,  306,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
  378,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,  264,  265,   -1,  267,  396,  397,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  421,  422,  295,  424,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,  264,  265,   -1,  267,  396,  397,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  421,  422,  295,  424,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,  264,  265,  375,  267,   -1,   -1,  270,  271,   -1,
  382,  383,  275,  276,  277,   -1,  279,   -1,  390,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,  261,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,
  422,   -1,  424,  316,   -1,  318,  319,  284,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  297,  334,   -1,   -1,  337,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,  333,   -1,   -1,  336,
   -1,  338,  375,   -1,  263,   -1,  265,   -1,  267,  382,
  383,  270,   -1,  272,  273,   -1,  275,  390,  277,   -1,
  279,   -1,  281,  282,  283,  362,   -1,   -1,  287,  288,
   -1,  368,  369,   -1,  293,  372,  295,  296,   -1,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,  421,  422,
   -1,  424,   -1,   -1,   -1,   -1,  315,  316,   -1,  318,
   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,  264,  265,  342,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,  368,
  369,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  381,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  265,
   -1,  267,  375,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,  422,
  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,  267,
   -1,  337,  270,   -1,  272,  273,  342,  275,   -1,  277,
   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,  316,   -1,
  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  265,  334,  267,   -1,  337,
  270,   -1,   -1,  273,  342,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,   -1,   -1,  422,  287,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  265,  334,  267,   -1,  337,  270,   -1,
   -1,  273,  342,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,   -1,   -1,  422,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,  265,   -1,  267,   -1,   -1,  270,   -1,
   -1,  381,   -1,  275,  316,   -1,  318,  279,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,  288,   -1,  330,  331,
   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,   -1,
  342,   -1,  304,  265,  306,  267,  308,   -1,  270,   -1,
   -1,  313,  422,  275,  316,   -1,  318,  279,   -1,   -1,
  322,   -1,   -1,  325,   -1,   -1,  288,   -1,  330,  331,
   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,  306,   -1,  308,   -1,   -1,   -1,
   -1,  313,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,  376,  337,  265,   -1,  267,   -1,
  422,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,  374,   -1,   -1,  304,  265,  306,  267,   -1,
  422,  270,   -1,   -1,  313,   -1,  275,  316,   -1,  318,
  279,   -1,   -1,  322,   -1,   -1,  325,   -1,   -1,  288,
   -1,  330,  331,   -1,   -1,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,   -1,   -1,  304,  265,  306,  267,  308,
  422,  270,   -1,   -1,  313,   -1,  275,  316,   -1,  318,
  279,   -1,   -1,  322,  363,   -1,  325,   -1,   -1,  288,
   -1,  330,  331,   -1,   -1,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,   -1,   -1,  304,  265,  306,  267,  308,
   -1,  270,   -1,   -1,  313,   -1,  275,  316,   -1,  318,
  279,   -1,   -1,  322,  283,   -1,  325,   -1,   -1,  288,
   -1,  330,  331,   -1,  293,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,  422,   -1,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  265,  334,  267,   -1,  337,  270,
   -1,  272,   -1,  422,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,   -1,  304,   -1,   -1,   -1,   -1,  261,   -1,
   -1,   -1,   -1,  422,   -1,  316,   -1,  318,   -1,  272,
   -1,  322,  323,   -1,  277,   -1,   -1,   -1,  281,  330,
  331,  284,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  301,  302,
   -1,  261,   -1,  422,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  272,   -1,  317,   -1,   -1,  277,  321,   -1,
  323,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  335,  336,   -1,  338,  296,  297,   -1,  342,
   -1,  301,  302,   -1,  261,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,  362,
  277,  321,   -1,  323,  281,   -1,   -1,  284,   -1,  372,
  373,  422,   -1,  333,   -1,   -1,  336,   -1,  338,  296,
  297,   -1,  342,   -1,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,  362,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,  372,  373,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,  261,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,  362,   -1,  321,   -1,  323,
   -1,   -1,  284,   -1,   -1,  372,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  297,   -1,  261,  342,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,  362,  321,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,
   -1,  333,   -1,  297,  336,   -1,  338,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
  362,   -1,   -1,   -1,   -1,   -1,  368,  369,   -1,  333,
  372,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,
   -1,   -1,   -1,   -1,  368,  369,
  };

#line 7393 "D:\Development\Applications\mono2\mcs\mcs\cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int INTERR_OPERATOR = 364;
  public const int WHEN = 365;
  public const int INTERPOLATED_STRING = 366;
  public const int INTERPOLATED_STRING_END = 367;
  public const int GET = 368;
  public const int SET = 369;
  public const int LAST_KEYWORD = 370;
  public const int OPEN_BRACE = 371;
  public const int CLOSE_BRACE = 372;
  public const int OPEN_BRACKET = 373;
  public const int CLOSE_BRACKET = 374;
  public const int OPEN_PARENS = 375;
  public const int CLOSE_PARENS = 376;
  public const int DOT = 377;
  public const int COMMA = 378;
  public const int COLON = 379;
  public const int SEMICOLON = 380;
  public const int TILDE = 381;
  public const int PLUS = 382;
  public const int MINUS = 383;
  public const int BANG = 384;
  public const int ASSIGN = 385;
  public const int OP_LT = 386;
  public const int OP_GT = 387;
  public const int BITWISE_AND = 388;
  public const int BITWISE_OR = 389;
  public const int STAR = 390;
  public const int PERCENT = 391;
  public const int DIV = 392;
  public const int CARRET = 393;
  public const int INTERR = 394;
  public const int DOUBLE_COLON = 395;
  public const int OP_INC = 396;
  public const int OP_DEC = 397;
  public const int OP_SHIFT_LEFT = 398;
  public const int OP_SHIFT_RIGHT = 399;
  public const int OP_LE = 400;
  public const int OP_GE = 401;
  public const int OP_EQ = 402;
  public const int OP_NE = 403;
  public const int OP_AND = 404;
  public const int OP_OR = 405;
  public const int OP_MULT_ASSIGN = 406;
  public const int OP_DIV_ASSIGN = 407;
  public const int OP_MOD_ASSIGN = 408;
  public const int OP_ADD_ASSIGN = 409;
  public const int OP_SUB_ASSIGN = 410;
  public const int OP_SHIFT_LEFT_ASSIGN = 411;
  public const int OP_SHIFT_RIGHT_ASSIGN = 412;
  public const int OP_AND_ASSIGN = 413;
  public const int OP_XOR_ASSIGN = 414;
  public const int OP_OR_ASSIGN = 415;
  public const int OP_PTR = 416;
  public const int OP_COALESCING = 417;
  public const int OP_GENERICS_LT = 418;
  public const int OP_GENERICS_LT_DECL = 419;
  public const int OP_GENERICS_GT = 420;
  public const int LITERAL = 421;
  public const int IDENTIFIER = 422;
  public const int OPEN_PARENS_LAMBDA = 423;
  public const int OPEN_PARENS_CAST = 424;
  public const int GENERIC_DIMENSION = 425;
  public const int DEFAULT_COLON = 426;
  public const int OPEN_BRACKET_EXPR = 427;
  public const int EVAL_STATEMENT_PARSER = 428;
  public const int EVAL_COMPILATION_UNIT_PARSER = 429;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 430;
  public const int DOC_SEE = 431;
  public const int GENERATE_COMPLETION = 432;
  public const int COMPLETE_COMPLETION = 433;
  public const int UMINUS = 434;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
